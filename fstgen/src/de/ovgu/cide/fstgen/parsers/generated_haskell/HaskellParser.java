/* Generated By:JavaCC: Do not edit this line. HaskellParser.java */
package de.ovgu.cide.fstgen.parsers.generated_haskell;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.AbstractFSTParser;

  public class HaskellParser  extends AbstractFSTParser implements HaskellParserConstants {

        /**
	 * Append the given {@link Token} and any preceding special tokens to a
	 * given {@link StringBuffer}.
	 * 
	 * @param token
	 *            the given JavaCC {@link Token} object
	 * @param buffer
	 *            the buffer to which to append <code>token</code>
	 */
        final private static void accumulate(Token token, StringBuffer buffer) {

                // Append preceding special tokens to <code>buffer</code>:
                //
                Token special = firstSpecial(token);
                if (special != token)
                        while (special != null) {
                                buffer.append(special.toString());
                                special = special.next;
                        }

                // Finally, append the token itself:
                //
                buffer.append(token.toString());
        }

        /**
	 * Accumulate {@list Token} objects from the token stream, respecting nested
	 * code inside <code>open</code> and <code>close</code> pairs, until an
	 * unmatched <code>close</code> is the next token in the stream. This
	 * method assumes that an <code>open</code> token has just been read from
	 * the stream so the initial nesting level is 1. The method returns when a
	 * matching <code>close</code> token is the next token in the token
	 * stream. <em>The <code>close</code> token is left in the stream!</em>
	 * 
	 * @return the accumulated tokens as a {@link String}.
	 * 
	 * @throws ParseException
	 *             if an end-of-file is found before an unmatched
	 *             <code>close</code> token.
	 */
        final private Token accumulateNestedRegion(int open, int close)
                        throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getToken(1);

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(UNANTICIPATED_SYMBOL);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;
                result.offset=startToken.offset;

                // Accumulate tokens until a <code>close</code> token is found:
                //
                for (int nesting = 1; nesting > 0;) {


                        if (token.kind == EOF)
                                throw new ParseException("accumulating from line "
                                                + result.beginLine + " at column " + result.beginColumn
                                                + ": EOF reached before ending " + tokenImage[close]
                                                + " found");

                        if (token.kind == open)
                                ++nesting;
                        else if (token.kind == close) {
                                if (nesting == 1)
                                        break;
                                --nesting;
                        }

                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.length=(token.offset-result.offset)+token.length;
                        result.next = token.next;

                        accumulate(token, buffer);
                        getNextToken();
                        token = getToken(1);
                }

                result.image = buffer.toString();
                return result;
        }


        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind) throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind });
        }

        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2) throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2 });
        }

        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2, int endTokenKind3)
                        throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2, endTokenKind3 });
        }
        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2, int endTokenKind3, int endTokenKind4)
                        throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2, endTokenKind3, endTokenKind4 });
        }

        final private boolean isNot(int kind) {
                return getToken(1).kind != kind;
        }

        final private boolean isNot(int k1, int k2) {
                return isNot(k1) && isNot(k2);
        }

        final private boolean isNot(int k1, int k2, int k3) {
                return isNot(k1, k2) && isNot(k3);
        }
        final private boolean isNot(int k1, int k2, int k3, int k4) {
                return isNot(k1, k2, k3) && isNot(k4);
        }

        /** returns true if the CONTEXT_ARROW is found before the SEMICOLON **/
        final private boolean isContext() throws ParseException {
                int lookahead=1;
                while (true) {
                        Token t = getToken(lookahead);
                        if (t.kind==EOF) throw new ParseException("EOF found before ; or =>  (line " + token.beginLine
                                                + ", column " + token.beginColumn
                                                + ")");
                        if (t.kind==SEMICOLON) return false;
                        if (t.kind==CONTEXT_ARROW) return true;
                        lookahead++;
                }
        }

        /**
	 * Accumulate {@link Token} objects from the token stream until a token
	 * matching <code>tokenKind</code> is consumed from the stream. The tokens
	 * are accumulated in <code>buffer</code>, NOT including the terminating
	 * token.
	 * 
	 * @return a {@link Token} formed by concatenating all intervening tokens
	 *         and special tokens.
	 */
        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int[] endTokenKinds) throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getToken(1);

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(UNANTICIPATED_SYMBOL);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;
                result.offset=startToken.offset;

                // Accumulate tokens until a <code>tokenKind</code> token is found:
                //
                int nesting=0;
                while (!contains(endTokenKinds, token.kind) || nesting >0) {
                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;
                        result.length=(token.offset-result.offset)+token.length;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before " + images(endTokenKinds)
                                                + " found");

                        if (considerInnerBlocks && token.kind == LEFT_CURLY)
                                ++nesting;
                        else if (considerInnerBlocks && token.kind == RIGHT_CURLY) {
                                --nesting;
                        }

                        accumulate(token, buffer);
                        getNextToken();
                        token = getToken(1);
                }

                if (buffer.length() == 0)
                        throw new ParseException("syntax error - empty pseudo-match (line " + result.beginLine
                                                + ", column " + result.beginColumn
                                                + ")");

                result.image = buffer.toString();
                return result;
        }

        private String images(int[] endTokenKinds) {
                String result = "";
                for (int i : endTokenKinds)
                        result += tokenImage[i] + " ";
                return result;
        }

        private boolean contains(int[] endTokenKinds, int kind) {
                for (int i : endTokenKinds)
                        if (i == kind)
                                return true;
                return false;
        }

    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

        while (token.specialToken != null)
            token = token.specialToken ;

        return token ;
    }

  Token findListContent() throws ParseException {
    return accumulateNestedRegion(LEFT_PAREN, RIGHT_PAREN) ;
  }

  Token findBlockContent() throws ParseException {
    return accumulateNestedRegion (LEFT_CURLY, RIGHT_CURLY) ;
  }

  Token findConRest() throws ParseException {
        //(block | ~(SEMICOLON|ALT|RIGHT_CURLY))*
    return accumulateUntil(true,SEMICOLON,ALT,RIGHT_CURLY,DERIVING) ;
  }

  Token findNonstddeclRest() throws ParseException {
        //(block | ~(SEMICOLON|RIGHT_CURLY))+
    return accumulateUntil(true,SEMICOLON,RIGHT_CURLY) ;
  }

  Token findUntilSemiOrCCB() throws ParseException {
        //~(SEMICOLON | RIGHT_CURLY)*
    return accumulateUntil(false,SEMICOLON,RIGHT_CURLY) ;
  }

  Token findUntilSemiOrContextArrow() throws ParseException {
        //(~(CONTEXT_ARROW|SEMICOLON))*;
    return accumulateUntil(false,CONTEXT_ARROW,SEMICOLON) ;
  }

  Token findUntilSemiOrEquals() throws ParseException {
        //~(EQUALS|SEMICOLON))*
    return accumulateUntil(false,SEMICOLON,EQUALS) ;
  }

  Token findUntilEquals() throws ParseException {
        //~(EQUALS))*
    return accumulateUntil(false,EQUALS) ;
  }

  final public FSTInfo module(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      n = moduleHeader(inTerminal);
                                     replaceName("moduleHeader", n);
                                                                       replaceName(n);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(LEFT_CURLY);
    n = body(inTerminal);
                                                                                                                 replaceName(n);
    jj_consume_token(RIGHT_CURLY);
                                                                                                                                       {if (true) return productionEndNonTerminal("module","{moduleHeader}","{moduleHeader}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo body(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      n = imports(inTerminal);
                                replaceName(n);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case DATA:
    case NEWTYPE:
    case CLASS:
    case INSTANCE:
    case DEFAULTTOKEN:
    case INFIXL:
    case INFIXR:
    case INFIX:
    case OTHER2:
    case OTHER4:
    case OTHER5:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      n = definitions(inTerminal);
                                                                                     replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
                                                                                                        {if (true) return productionEndNonTerminal("body","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo imports(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = importDecl(inTerminal);
                                  replaceName(n);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      n = importDecl(inTerminal);
                                                                                               replaceName(n);
    }
    jj_consume_token(SEMICOLON);
                                                                                                                       {if (true) return productionEndNonTerminal("imports","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo moduleHeader(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MODULE);
    n = naam(inTerminal);
                                     replaceName("naam", n);
                                                               replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n = exports(inTerminal);
                                                                                                        replaceName(n);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(WHERE);
                                                                                                                                   {if (true) return productionEndNonTerminal("moduleHeader","{naam}","{naam}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exports(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = exportList(inTerminal);
                                       replaceName(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
                                                              {if (true) return productionEndNonTerminal("exports","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo importDecl(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUALIFIED:
      jj_consume_token(QUALIFIED);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n = naam(true);
                                              replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      n = naam(true);
                                                                                   replaceName(n);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDING:
    case LEFT_PAREN:
      n = hiding(true);
                                                                                                                      replaceName(n);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                                                                                                         {if (true) return productionEndTerminal("importDecl","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo hiding(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDING:
      jj_consume_token(HIDING);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = exportList(true);
                                             replaceName(n);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
                                                                    {if (true) return productionEndTerminal("hiding","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exportList(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = export(inTerminal);
                              replaceName(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      n = export(inTerminal);
                                                                          replaceName(n);
    }
                                                                                              {if (true) return productionEndNonTerminal("exportList","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo export(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_2(2147483647)) {
      n = var(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("export1","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case LEFT_PAREN:
        n = naam(true);
                      replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          n = exportNaamParam(true);
                                                                 replaceName(n);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
                                                                                    {if (true) return productionEndTerminal("export2","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
        break;
      case MODULE:
        jj_consume_token(MODULE);
        n = naam(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("export3","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exportNaamParam(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_3(2)) {
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(OTHER12);
      jj_consume_token(RIGHT_PAREN);
                                    {if (true) return productionEndTerminal("exportNaamParam1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_PAREN:
          n = naamOrVarList(true);
                                    replaceName(n);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
                                                           {if (true) return productionEndTerminal("exportNaamParam2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo naamOrVarList(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = naamOrVar(true);
                           replaceName(n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      n = naamOrVar(true);
                                                                    replaceName(n);
    }
                                                                                        {if (true) return productionEndTerminal("naamOrVarList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo naamOrVar(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_4(2147483647)) {
      n = naam(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("naamOrVar1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case LEFT_PAREN:
        n = var(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("naamOrVar2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo definitions(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = definition(inTerminal);
                                  replaceName(n);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      jj_consume_token(SEMICOLON);
      n = definition(inTerminal);
                                                                                  replaceName(n);
    }
                                                                                                      {if (true) return productionEndNonTerminal("definitions","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo definition(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      n = simpletype(inTerminal);
                                         replaceName("simpletype", n);
                                                                         replaceName(n);
      jj_consume_token(EQUALS);
      n = functiontype(inTerminal);
                                                                                                                          replaceName(n);
                                                                                                                                            {if (true) return productionEndNonTerminal("typedecl","{simpletype}","{simpletype}");}
      break;
    case DATA:
      jj_consume_token(DATA);
      if (jj_2_5(2147483647)) {
        n = context(inTerminal);
                                                            replaceName(n);
      } else {
        ;
      }
      n = simpletype(inTerminal);
                                                                                                        replaceName("simpletype", n);
                                                                                                                                        replaceName(n);
      jj_consume_token(EQUALS);
      n = constrs(inTerminal);
                                                                                                                                                                                    replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        n = deriving(inTerminal);
                                                                                                                                                                                                                              replaceName(n);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                                 {if (true) return productionEndNonTerminal("datadecl","{simpletype}","{simpletype}");}
      break;
    case NEWTYPE:
      jj_consume_token(NEWTYPE);
      if (jj_2_6(2147483647)) {
        n = context(inTerminal);
                                                               replaceName(n);
      } else {
        ;
      }
      n = simpletype(inTerminal);
                                                                                                           replaceName("simpletype", n);
                                                                                                                                           replaceName(n);
      jj_consume_token(EQUALS);
      n = naam(inTerminal);
                                                                                                                                                                                    replaceName(n);
      n = newtypeParam(inTerminal);
                                                                                                                                                                                                                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        n = deriving(inTerminal);
                                                                                                                                                                                                                                                                           replaceName(n);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                                                                              {if (true) return productionEndNonTerminal("newtypedecl","{simpletype}","{simpletype}");}
      break;
    case CLASS:
      jj_consume_token(CLASS);
      if (jj_2_7(2147483647)) {
        n = context(inTerminal);
                                                             replaceName(n);
      } else {
        ;
      }
      n = naam(inTerminal);
                                                                                                   replaceName("naam", n);
                                                                                                                             replaceName(n);
      label_5:
      while (true) {
        n = var(inTerminal);
                                                                                                                                                                  replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_PAREN:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_5;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(inTerminal);
                                                                                                                                                                                                                replaceName(n);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                   {if (true) return productionEndNonTerminal("classdecl","{naam}","{naam}");}
      break;
    case INSTANCE:
      jj_consume_token(INSTANCE);
      if (jj_2_8(2147483647)) {
        n = context(inTerminal);
                                                                replaceName(n);
      } else {
        ;
      }
      n = inst(inTerminal);
                                                                                                      replaceName("inst", n);
                                                                                                                                replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(inTerminal);
                                                                                                                                                                            replaceName(n);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
                                                                                                                                                                                               {if (true) return productionEndNonTerminal("instancedecl","{inst}","{inst}");}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      n = functiontypeList(inTerminal);
                                                  replaceName("functiontypeList", n);
                                                                                        replaceName(n);
                                                                                                          {if (true) return productionEndNonTerminal("defaultdecl","{functiontypeList}","{functiontypeList}");}
      break;
    case INFIXL:
    case INFIXR:
    case INFIX:
    case OTHER2:
    case OTHER4:
    case OTHER5:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      n = declaration(true);
                             replaceName("declaration", n);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("declaration","{declaration}","{declaration}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo simpletype(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = naam(true);
                      replaceName("naam", n);
                                                replaceName(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case LEFT_PAREN:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
      n = var(true);
                                                                               replaceName(n);
    }
                                                                                                   {if (true) return productionEndTerminal("simpletype","{naam}","{naam}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo constrs(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = constr(inTerminal);
                              replaceName(n);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALT:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      jj_consume_token(ALT);
      n = constr(inTerminal);
                                                                          replaceName(n);
    }
                                                                                              {if (true) return productionEndNonTerminal("constrs","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo constr(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_10(2147483647)) {
      n = naam(true);
                                            replaceName("naam", n);
                                                                      replaceName(n);
      jj_consume_token(LEFT_CURLY);
      n = fielddeclaration(true);
                                                                                                                     replaceName(n);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        n = fielddeclaration(true);
                                                                                                                                                                     replaceName(n);
      }
      jj_consume_token(RIGHT_CURLY);
                                                                                                                                                                                             {if (true) return productionEndTerminal("constr1","{naam}","{naam}","Replacement","Default",first,token);}
    } else if (jj_2_11(2147483647)) {
      label_9:
      while (true) {
        n = type(true);
                                                                         replaceName(n);
        if (jj_2_9(2147483647)) {
          ;
        } else {
          break label_9;
        }
      }
      n = operator(true);
                                                                                                              replaceName("operator", n);
                                                                                                                                            replaceName(n);
      label_10:
      while (true) {
        n = type(true);
                                                                                                                                                                            replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
      }
                                                                                                                                                                                                {if (true) return productionEndTerminal("constr2","{operator}","{operator}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case LEFT_PAREN:
        n = naam(true);
                      replaceName("naam", n);
                                                replaceName(n);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_11;
          }
          n = type(true);
                                                                                replaceName(n);
        }
                                                                                                    {if (true) return productionEndTerminal("constr3","{naam}","{naam}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo fielddeclaration(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = varList(true);
                         replaceName(n);
    jj_consume_token(OFTYPE);
    n = functiontype(true);
                                                                     replaceName(n);
                                                                                       {if (true) return productionEndTerminal("fielddeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo deriving(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_12(2)) {
      jj_consume_token(DERIVING);
      jj_consume_token(LEFT_PAREN);
      n = naamList(true);
                                                      replaceName(n);
      jj_consume_token(RIGHT_PAREN);
                                                                            {if (true) return productionEndTerminal("deriving1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        jj_consume_token(DERIVING);
        n = naam(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("deriving2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo newtypeParam(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_CURLY:
      jj_consume_token(LEFT_CURLY);
      n = var(true);
                         replaceName(n);
      jj_consume_token(OFTYPE);
      n = functiontype(true);
                                                                     replaceName(n);
      jj_consume_token(RIGHT_CURLY);
                                                                                           {if (true) return productionEndTerminal("newtypeParam1","-","-","Replacement","Default",first,token);}
      break;
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      n = type(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("newtypeParam2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inst(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = naam(true);
                      replaceName(n);
    label_12:
    while (true) {
      n = type(true);
                                                      replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
    }
                                                                          {if (true) return productionEndTerminal("inst","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo decls(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_CURLY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIXL:
    case INFIXR:
    case INFIX:
    case OTHER2:
    case OTHER4:
    case OTHER5:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      n = declarationList(inTerminal);
                                            replaceName(n);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_CURLY);
                                                                   {if (true) return productionEndNonTerminal("decls","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo declarationList(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = declaration(inTerminal);
                                   replaceName(n);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
      jj_consume_token(SEMICOLON);
      n = declaration(inTerminal);
                                                                                    replaceName(n);
    }
                                                                                                        {if (true) return productionEndNonTerminal("declarationList","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo declaration(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_14(2147483647)) {
      n = function(true);
                                                    replaceName(n);
      jj_consume_token(EQUALS);
      n = expr(true);
                                                                                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(true);
                                                                                                                             replaceName(n);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
                                                                                                                                                {if (true) return productionEndTerminal("declaration1","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    } else if (jj_2_15(2147483647)) {
      n = function(true);
                                                    replaceName(n);
      label_14:
      while (true) {
        n = altExprAss(true);
                                                                                          replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALT:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_14;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(true);
                                                                                                                                  replaceName(n);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
                                                                                                                                                     {if (true) return productionEndTerminal("declaration2","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    } else if (jj_2_16(2147483647)) {
      n = varList(true);
                                                   replaceName(n);
      jj_consume_token(OFTYPE);
      if (jj_2_13(2147483647)) {
        n = context(true);
                                                                                                                replaceName(n);
      } else {
        ;
      }
      n = functiontype(true);
                                                                                                                                                        replaceName(n);
                                                                                                                                                                          {if (true) return productionEndTerminal("declaration3","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    } else if (jj_2_17(2147483647)) {
      n = patr(true);
                                            replaceName(n);
      jj_consume_token(EQUALS);
      n = expr(true);
                                                                               replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(true);
                                                                                                                     replaceName(n);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
                                                                                                                                        {if (true) return productionEndTerminal("declaration4","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    } else if (jj_2_18(2147483647)) {
      n = patr(true);
                                            replaceName(n);
      label_15:
      while (true) {
        n = altExprAss(true);
                                                                                  replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALT:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_15;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(true);
                                                                                                                          replaceName(n);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
                                                                                                                                             {if (true) return productionEndTerminal("declaration5","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFIX:
        jj_consume_token(INFIX);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        n = operatorList(true);
                                                  replaceName(n);
                                                                    {if (true) return productionEndTerminal("declaration6","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
        break;
      case INFIXL:
        jj_consume_token(INFIXL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        n = operatorList(true);
                                                   replaceName(n);
                                                                     {if (true) return productionEndTerminal("declaration7","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
        break;
      case INFIXR:
        jj_consume_token(INFIXR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        n = operatorList(true);
                                                   replaceName(n);
                                                                     {if (true) return productionEndTerminal("declaration8","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo altExprAss(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ALT);
    n = expr(true);
                          replaceName(n);
    jj_consume_token(EQUALS);
    n = expr(true);
                                                             replaceName(n);
                                                                               {if (true) return productionEndTerminal("altExprAss","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo function(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_19(2147483647)) {
      n = var(true);
                                                replaceName(n);
      n = patroon(true);
                                                                                  replaceName(n);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_16;
        }
        n = patroon(true);
                                                                                                                     replaceName(n);
      }
                                                                                                                                         {if (true) return productionEndTerminal("function1","-","{TOSTRING}","Replacement","Default",first,token);}
    } else if (jj_2_20(2147483647)) {
      jj_consume_token(LEFT_PAREN);
      n = function(true);
                                                        replaceName(n);
      jj_consume_token(RIGHT_PAREN);
      label_17:
      while (true) {
        n = patroon(true);
                                                                                               replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_17;
        }
      }
                                                                                                                   {if (true) return productionEndTerminal("function2","-","{TOSTRING}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        n = patroon(true);
                         replaceName(n);
        n = operator(true);
                                                            replaceName(n);
        n = patr(true);
                                                                                           replaceName(n);
                                                                                                             {if (true) return productionEndTerminal("function3","-","{TOSTRING}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo whereDecls(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WHERE);
    n = decls(inTerminal);
                                     replaceName(n);
                                                       {if (true) return productionEndNonTerminal("whereDecls","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expressie(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n = literal(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("expressie1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_21(2147483647)) {
        n = var(true);
                                      replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_CURLY:
          n = contrExprParam(true);
                                                                                replaceName(n);
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
                                                                                                   {if (true) return productionEndTerminal("expressie2","-","-","Replacement","Default",first,token);}
      } else if (jj_2_22(2147483647)) {
        n = naam(true);
                                        replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_CURLY:
          n = contrExprParam(true);
                                                                                  replaceName(n);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
                                                                                                     {if (true) return productionEndTerminal("expressie3","-","-","Replacement","Default",first,token);}
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(LEFT_PAREN);
        n = expr(true);
                                                           replaceName(n);
        n = operator(true);
                                                                                              replaceName(n);
        jj_consume_token(RIGHT_PAREN);
                                                                                                                    {if (true) return productionEndTerminal("expressie4","-","-","Replacement","Default",first,token);}
      } else if (jj_2_24(2147483647)) {
        jj_consume_token(LEFT_PAREN);
        n = operator(true);
                                                        replaceName(n);
        n = expr(true);
                                                                                       replaceName(n);
        jj_consume_token(RIGHT_PAREN);
                                                                                                             {if (true) return productionEndTerminal("expressie5","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LET:
          case DO:
          case CASE:
          case IF:
          case OTHER2:
          case OTHER9:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            n = exprList(true);
                               replaceName(n);
            break;
          default:
            jj_la1[51] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_PAREN);
                                                      {if (true) return productionEndTerminal("expressie6","-","-","Replacement","Default",first,token);}
          break;
        case LEFT_HPAREN:
          jj_consume_token(LEFT_HPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LET:
          case DO:
          case CASE:
          case IF:
          case OTHER2:
          case OTHER9:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            n = exprList(true);
                                replaceName(n);
            break;
          default:
            jj_la1[52] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_HPAREN);
                                                        {if (true) return productionEndTerminal("expressie7","-","-","Replacement","Default",first,token);}
          break;
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LET:
          case DO:
          case CASE:
          case IF:
          case OTHER2:
          case OTHER9:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            n = exprListSpecial(true);
                                      replaceName(n);
            break;
          default:
            jj_la1[53] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_BRACKET);
                                                             {if (true) return productionEndTerminal("expressie8","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo contrExprParam(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_CURLY);
    n = contrExprAssign(true);
                                     replaceName(n);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      n = contrExprAssign(true);
                                                                                    replaceName(n);
    }
    jj_consume_token(RIGHT_CURLY);
                                                                                                            {if (true) return productionEndTerminal("contrExprParam","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo contrExprAssign(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = var(true);
                     replaceName(n);
    jj_consume_token(EQUALS);
    n = expr(true);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("contrExprAssign","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expr(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = exprMain(true);
                          replaceName(n);
    label_19:
    while (true) {
      if (jj_2_25(2147483647)) {
        ;
      } else {
        break label_19;
      }
      n = exprOperator(true);
                                                                                            replaceName(n);
    }
    if (jj_2_26(2147483647)) {
      n = exprEnd(true);
                                                                                                                                                      replaceName(n);
    } else {
      ;
    }
                                                                                                                                                                         {if (true) return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exprEnd(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(OFTYPE);
    if (jj_2_27(2147483647)) {
      n = context(true);
                                                    replaceName(n);
    } else {
      ;
    }
    n = functiontype(true);
                                                                                            replaceName(n);
                                                                                                              {if (true) return productionEndTerminal("exprEnd","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exprMain(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      label_20:
      while (true) {
        n = expressie(true);
                                         replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_20;
        }
      }
                                                             {if (true) return productionEndTerminal("exprMain1","-","-","Replacement","Default",first,token);}
      break;
    case OTHER2:
      jj_consume_token(OTHER2);
      n = expr(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("exprMain2","-","-","Replacement","Default",first,token);}
      break;
    case OTHER9:
      jj_consume_token(OTHER9);
      label_21:
      while (true) {
        n = patroon(true);
                               replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_21;
        }
      }
      jj_consume_token(OTHER7);
      n = expr(true);
                                                                     replaceName(n);
                                                                                       {if (true) return productionEndTerminal("exprMain3","-","-","Replacement","Default",first,token);}
      break;
    case IF:
      jj_consume_token(IF);
      n = expr(true);
                           replaceName(n);
      jj_consume_token(THEN);
      n = expr(true);
                                                                 replaceName(n);
      jj_consume_token(ELSE);
      n = expr(true);
                                                                                                       replaceName(n);
                                                                                                                         {if (true) return productionEndTerminal("exprMain4","-","-","Replacement","Default",first,token);}
      break;
    case CASE:
      jj_consume_token(CASE);
      n = expr(true);
                             replaceName(n);
      jj_consume_token(OF);
      jj_consume_token(LEFT_CURLY);
      n = caseInner(true);
                                                                          replaceName(n);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_22;
        }
        jj_consume_token(SEMICOLON);
        n = caseInner(true);
                                                                                                                   replaceName(n);
      }
      jj_consume_token(RIGHT_CURLY);
                                                                                                                                           {if (true) return productionEndTerminal("exprMain5","-","-","Replacement","Default",first,token);}
      break;
    case LET:
      jj_consume_token(LET);
      n = decls(true);
                             replaceName(n);
      jj_consume_token(IN);
      n = expr(true);
                                                                 replaceName(n);
                                                                                   {if (true) return productionEndTerminal("exprMain6","-","-","Replacement","Default",first,token);}
      break;
    case DO:
      jj_consume_token(DO);
      jj_consume_token(LEFT_CURLY);
      n = altSpecialSemiList(true);
                                             replaceName(n);
      jj_consume_token(RIGHT_CURLY);
                                                                   {if (true) return productionEndTerminal("exprMain7","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exprOperator(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = operator(true);
                          replaceName(n);
    n = expr(true);
                                                         replaceName(n);
                                                                           {if (true) return productionEndTerminal("exprOperator","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exprList(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = expr(true);
                      replaceName(n);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      n = expr(true);
                                                          replaceName(n);
    }
                                                                              {if (true) return productionEndTerminal("exprList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exprListSpecial(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_28(2147483647)) {
      n = expr(true);
                                            replaceName(n);
      jj_consume_token(ALT);
      n = altSpecialList(true);
                                                                                         replaceName(n);
                                                                                                           {if (true) return productionEndTerminal("exprListSpecial1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_29(2147483647)) {
      n = expr(true);
                                                          replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        n = expr(true);
                                                                                              replaceName(n);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(OTHER12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case DO:
      case CASE:
      case IF:
      case OTHER2:
      case OTHER9:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        n = expr(true);
                                                                                                                                    replaceName(n);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
                                                                                                                                                       {if (true) return productionEndTerminal("exprListSpecial2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case DO:
      case CASE:
      case IF:
      case OTHER2:
      case OTHER9:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        n = expr(true);
                      replaceName(n);
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            break label_24;
          }
          jj_consume_token(COMMA);
          n = expr(true);
                                                          replaceName(n);
        }
                                                                              {if (true) return productionEndTerminal("exprListSpecial3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo altSpecialSemiList(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = altSpecial(true);
                            replaceName(n);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_25;
      }
      jj_consume_token(SEMICOLON);
      n = altSpecial(true);
                                                                      replaceName(n);
    }
                                                                                          {if (true) return productionEndTerminal("altSpecialSemiList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo altSpecialList(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = altSpecial(true);
                            replaceName(n);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      n = altSpecial(true);
                                                                      replaceName(n);
    }
                                                                                          {if (true) return productionEndTerminal("altSpecialList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo altSpecial(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_30(2147483647)) {
      n = patr(true);
                                             replaceName(n);
      jj_consume_token(OTHER10);
      n = expr(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("altSpecial1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_31(2147483647)) {
      n = expr(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("altSpecial2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        jj_consume_token(LET);
        n = decls(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("altSpecial3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo caseInner(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_32(2147483647)) {
      n = patr(true);
                                             replaceName(n);
      jj_consume_token(OTHER7);
      n = expr(true);
                                                                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n = whereDecls(true);
                                                                                                                       replaceName(n);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
                                                                                                                                          {if (true) return productionEndTerminal("caseInner1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        n = patr(true);
                      replaceName(n);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALT:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_27;
          }
          n = caseInnerAlt(true);
                                                              replaceName(n);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          n = whereDecls(true);
                                                                                                      replaceName(n);
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
                                                                                                                         {if (true) return productionEndTerminal("caseInner2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo caseInnerAlt(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ALT);
    n = expr(true);
                          replaceName(n);
    jj_consume_token(OTHER7);
    n = expr(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("caseInnerAlt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patr(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = patrMain(true);
                          replaceName(n);
    label_28:
    while (true) {
      if (jj_2_33(2147483647)) {
        ;
      } else {
        break label_28;
      }
      n = patrOp(true);
                                                                                replaceName(n);
    }
                                                                                                    {if (true) return productionEndTerminal("patr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patrOp(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = qconop(true);
                        replaceName(n);
    n = patr(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("patrOp","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patrMain(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_34(2147483647)) {
      n = naam(true);
                                                  replaceName(n);
      label_29:
      while (true) {
        n = patroon(true);
                                                                                                  replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_29;
        }
      }
                                                                                                                      {if (true) return productionEndTerminal("patrMain1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_35(2147483647)) {
      n = var(true);
                                                    replaceName(n);
      jj_consume_token(OTHER8);
      jj_consume_token(INTEGER);
                                                                                    {if (true) return productionEndTerminal("patrMain2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        n = patroon(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("patrMain3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patroon(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_30:
    while (true) {
      if (jj_2_36(2147483647)) {
        ;
      } else {
        break label_30;
      }
      n = patroonPrefix(true);
                                                           replaceName(n);
    }
    n = patroonMain(true);
                                                                                                   replaceName(n);
                                                                                                                     {if (true) return productionEndTerminal("patroon","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patroonPrefix(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER5:
      jj_consume_token(OTHER5);
              {if (true) return productionEndTerminal("patroonPrefix1","-","-","Replacement","Default",first,token);}
      break;
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = var(true);
                     replaceName(n);
      jj_consume_token(OTHER3);
                                           {if (true) return productionEndTerminal("patroonPrefix2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patroonMain(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER4:
      jj_consume_token(OTHER4);
              {if (true) return productionEndTerminal("patroonMain1","-","-","Replacement","Default",first,token);}
      break;
    case OTHER2:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
        jj_consume_token(OTHER2);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      n = literal(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("patroonMain2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[81] = jj_gen;
      if (jj_2_37(2147483647)) {
        n = var(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("patroonMain3","-","-","Replacement","Default",first,token);}
      } else if (jj_2_38(2147483647)) {
        n = naam(true);
                                        replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_CURLY:
          n = contrPatrParam(true);
                                                                                  replaceName(n);
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
                                                                                                     {if (true) return productionEndTerminal("constructorNaam","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OTHER2:
          case OTHER4:
          case OTHER5:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            n = patrList(true);
                               replaceName(n);
            break;
          default:
            jj_la1[78] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_PAREN);
                                                      {if (true) return productionEndTerminal("patroonMain5","-","-","Replacement","Default",first,token);}
          break;
        case LEFT_HPAREN:
          jj_consume_token(LEFT_HPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OTHER2:
          case OTHER4:
          case OTHER5:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            n = patrList(true);
                                replaceName(n);
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_HPAREN);
                                                        {if (true) return productionEndTerminal("patroonMain6","-","-","Replacement","Default",first,token);}
          break;
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OTHER2:
          case OTHER4:
          case OTHER5:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            n = patrList(true);
                               replaceName(n);
            break;
          default:
            jj_la1[80] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_BRACKET);
                                                      {if (true) return productionEndTerminal("patroonMain7","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo patrList(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = patr(true);
                      replaceName(n);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      n = patr(true);
                                                          replaceName(n);
    }
                                                                              {if (true) return productionEndTerminal("patrList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo contrPatrParam(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_CURLY);
    n = contrPatrAssign(true);
                                     replaceName(n);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMMA);
      n = contrPatrAssign(true);
                                                                                    replaceName(n);
    }
    jj_consume_token(RIGHT_CURLY);
                                                                                                            {if (true) return productionEndTerminal("contrPatrParam","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo contrPatrAssign(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = var(true);
                     replaceName(n);
    jj_consume_token(EQUALS);
    n = patr(true);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("contrPatrAssign","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo type(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_39(2147483647)) {
      n = naam(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("type1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_ID:
        jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("type2","-","-","Replacement","Default",first,token);}
        break;
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          n = functiontypeList(true);
                                       replaceName(n);
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
                                                              {if (true) return productionEndTerminal("type3","-","-","Replacement","Default",first,token);}
        break;
      case LEFT_HPAREN:
        jj_consume_token(LEFT_HPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          n = functiontypeList(true);
                                        replaceName(n);
          break;
        default:
          jj_la1[86] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_HPAREN);
                                                                {if (true) return productionEndTerminal("type4","-","-","Replacement","Default",first,token);}
        break;
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        n = functiontype(true);
                                  replaceName(n);
        jj_consume_token(RIGHT_BRACKET);
                                                        {if (true) return productionEndTerminal("type5","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo functiontypeList(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = functiontype(true);
                              replaceName(n);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      n = functiontype(true);
                                                                          replaceName(n);
    }
                                                                                              {if (true) return productionEndTerminal("functiontypeList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo functiontype(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = paramtype(true);
                           replaceName(n);
    label_34:
    while (true) {
      if (jj_2_40(2147483647)) {
        ;
      } else {
        break label_34;
      }
      jj_consume_token(OTHER7);
      n = paramtype(true);
                                                                                                 replaceName(n);
    }
                                                                                                                     {if (true) return productionEndTerminal("functiontype","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo paramtype(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_35:
    while (true) {
      n = type(true);
                                         replaceName(n);
      if (jj_2_41(2147483647)) {
        ;
      } else {
        break label_35;
      }
    }
                                                             {if (true) return productionEndTerminal("paramtype","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo context(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_42(2147483647)) {
      n = klasse(true);
                                                 replaceName(n);
      jj_consume_token(CONTEXT_ARROW);
                                                                        {if (true) return productionEndTerminal("context1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_43(2)) {
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(CONTEXT_ARROW);
                                    {if (true) return productionEndTerminal("context2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        n = klasse(true);
                            replaceName(n);
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_36;
          }
          jj_consume_token(COMMA);
          n = klasse(true);
                                                                  replaceName(n);
        }
        jj_consume_token(RIGHT_PAREN);
        jj_consume_token(CONTEXT_ARROW);
                                                                                               {if (true) return productionEndTerminal("context3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo klasse(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = naam(true);
                      replaceName(n);
    label_37:
    while (true) {
      n = klasseTypeVar(true);
                                                               replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_ID:
      case LEFT_PAREN:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_37;
      }
    }
                                                                                   {if (true) return productionEndTerminal("klasse","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo klasseTypeVar(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(VARIABLE_ID);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_38;
        }
        n = type(true);
                                         replaceName(n);
      }
      jj_consume_token(RIGHT_PAREN);
                                                                 {if (true) return productionEndTerminal("klasseTypeVar1","-","-","Replacement","Default",first,token);}
      break;
    case VARIABLE_ID:
      jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("klasseTypeVar2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo varList(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = var(true);
                     replaceName(n);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      n = var(true);
                                                        replaceName(n);
    }
                                                                            {if (true) return productionEndTerminal("varList","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo var(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_44(2147483647)) {
      n = ModuleNaamPrefix(true);
                                                                 replaceName(n);
    } else {
      ;
    }
    n = varMain(true);
                                                                                                    replaceName("varMain", n);
                                                                                                                                 replaceName(n);
                                                                                                                                                   {if (true) return productionEndTerminal("var","{varMain}","{varMain}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo varMain(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
      jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("varMain1","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      n = varsym(true);
                            replaceName(n);
      jj_consume_token(RIGHT_PAREN);
                                                  {if (true) return productionEndTerminal("varMain2","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo naamList(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = naam(true);
                      replaceName(n);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      n = naam(true);
                                                          replaceName(n);
    }
                                                                              {if (true) return productionEndTerminal("naamList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo naam(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = qcon(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("naam","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qcon(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
      n = qconid(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("qcon1","-","-","Replacement","Default",first,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      n = gconsym(true);
                             replaceName(n);
      jj_consume_token(RIGHT_PAREN);
                                                   {if (true) return productionEndTerminal("qcon2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo operatorList(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = operator(true);
                          replaceName(n);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      n = operator(true);
                                                                  replaceName(n);
    }
                                                                                      {if (true) return productionEndTerminal("operatorList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo operator(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = qop(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("operator","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo op(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_45(2147483647)) {
      n = varop(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("op1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFIX_QUOTE:
      case CONSYM:
        n = conop(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("op2","-","-","Replacement","Default",first,token);}
        break;
      case OTHER1:
      case OTHER2:
      case OTHER4:
      case OTHER8:
        n = otherOperators(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("op3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qop(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_47(2147483647)) {
      n = qvarop(true);
                                            replaceName(n);
                                                              {if (true) return productionEndTerminal("qop1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_48(2147483647)) {
      n = qconop(true);
                                            replaceName(n);
                                                              {if (true) return productionEndTerminal("qop2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER1:
      case OTHER2:
      case OTHER4:
      case OTHER8:
      case CONSTRUCTOR_ID:
        if (jj_2_46(2147483647)) {
          n = ModuleNaamPrefix(true);
                                                                 replaceName(n);
        } else {
          ;
        }
        n = otherOperators(true);
                                                                                                           replaceName(n);
                                                                                                                             {if (true) return productionEndTerminal("qop3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo varop(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER1:
    case OTHER2:
    case OTHER4:
    case OTHER8:
    case VARSYM:
      n = varsym(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("varop1","-","-","Replacement","Default",first,token);}
      break;
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      jj_consume_token(VARIABLE_ID);
      jj_consume_token(INFIX_QUOTE);
                               {if (true) return productionEndTerminal("varop2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qvarop(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      n = qvarid(true);
                                         replaceName(n);
      jj_consume_token(INFIX_QUOTE);
                                                               {if (true) return productionEndTerminal("qvarop1","-","-","Replacement","Default",first,token);}
      break;
    case OTHER1:
    case OTHER2:
    case OTHER4:
    case OTHER8:
    case CONSTRUCTOR_ID:
    case VARSYM:
      n = qvarsym(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("qvarop2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo conop(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSYM:
      jj_consume_token(CONSYM);
                  {if (true) return productionEndTerminal("conop1","-","-","Replacement","Default",first,token);}
      break;
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      jj_consume_token(CONSTRUCTOR_ID);
      jj_consume_token(INFIX_QUOTE);
                                  {if (true) return productionEndTerminal("conop2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qconop(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      n = qconid(true);
                                         replaceName(n);
      jj_consume_token(INFIX_QUOTE);
                                                               {if (true) return productionEndTerminal("qconop1","-","-","Replacement","Default",first,token);}
      break;
    case OTHER6:
    case CONSTRUCTOR_ID:
    case CONSYM:
      n = gconsym(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("qconop2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qvarsym(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_49(2147483647)) {
      n = ModuleNaamPrefix(true);
                                                                 replaceName(n);
    } else {
      ;
    }
    n = varsym(true);
                                                                                                   replaceName(n);
                                                                                                                     {if (true) return productionEndTerminal("qvarsym","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qvarid(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_50(2147483647)) {
      n = ModuleNaamPrefix(true);
                                                                 replaceName(n);
    } else {
      ;
    }
    jj_consume_token(VARIABLE_ID);
                                                                                                  {if (true) return productionEndTerminal("qvarid","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qconsym(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_51(2147483647)) {
      n = ModuleNaamPrefix(true);
                                                                 replaceName(n);
    } else {
      ;
    }
    jj_consume_token(CONSYM);
                                                                                             {if (true) return productionEndTerminal("qconsym","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qconid(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_52(2147483647)) {
      n = ModuleNaamPrefix(true);
                                                                 replaceName(n);
    } else {
      ;
    }
    jj_consume_token(CONSTRUCTOR_ID);
                                                                                                     {if (true) return productionEndTerminal("qconid","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo gconsym(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER6:
      jj_consume_token(OTHER6);
              {if (true) return productionEndTerminal("gconsym1","-","-","Replacement","Default",first,token);}
      break;
    case CONSTRUCTOR_ID:
    case CONSYM:
      n = qconsym(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("gconsym2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo varsym(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARSYM:
      jj_consume_token(VARSYM);
                  {if (true) return productionEndTerminal("varsym1","-","-","Replacement","Default",first,token);}
      break;
    case OTHER1:
    case OTHER2:
    case OTHER4:
    case OTHER8:
      n = otherOperators(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("varsym2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModuleNaamPrefix(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONSTRUCTOR_ID);
    jj_consume_token(OTHER1);
    label_42:
    while (true) {
      if (jj_2_53(2147483647)) {
        ;
      } else {
        break label_42;
      }
      jj_consume_token(CONSTRUCTOR_ID);
      jj_consume_token(OTHER1);
    }
                                                                                      {if (true) return productionEndTerminal("ModuleNaamPrefix","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo otherOperators(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER8:
      jj_consume_token(OTHER8);
              {if (true) return productionEndTerminal("otherOperators1","-","-","Replacement","Default",first,token);}
      break;
    case OTHER1:
      jj_consume_token(OTHER1);
              {if (true) return productionEndTerminal("otherOperators2","-","-","Replacement","Default",first,token);}
      break;
    case OTHER2:
      jj_consume_token(OTHER2);
              {if (true) return productionEndTerminal("otherOperators3","-","-","Replacement","Default",first,token);}
      break;
    case OTHER4:
      jj_consume_token(OTHER4);
              {if (true) return productionEndTerminal("otherOperators4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo literal(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                   {if (true) return productionEndTerminal("literal1","-","-","Replacement","Default",first,token);}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                 {if (true) return productionEndTerminal("literal2","-","-","Replacement","Default",first,token);}
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
                             {if (true) return productionEndTerminal("literal3","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("literal4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(OTHER9)) return true;
    Token xsp;
    if (jj_3R_147()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(OTHER2)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    Token xsp;
    if (jj_3R_146()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    if (jj_scan_token(OTHER1)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(OFTYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    if (jj_scan_token(OTHER1)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(OTHER4)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(OTHER2)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(OTHER1)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_219()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(OTHER8)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(LEFT_HPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_HPAREN)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    if (jj_scan_token(OTHER1)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(VARSYM)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_44()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(OTHER6)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_53()) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    Token xsp;
    if (jj_3R_111()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_44()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    if (jj_scan_token(CONSYM)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(ALT)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(ALT)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(INFIXR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(OFTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(INFIXL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(ALT)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(INFIX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_52()) return true;
    Token xsp;
    if (jj_3R_230()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(OFTYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_50()) return true;
    Token xsp;
    if (jj_3R_226()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_207()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_scan_token(VARIABLE_ID)) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(DERIVING)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    if (jj_3R_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(LEFT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_132()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(VARIABLE_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_61()) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(OTHER12)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_45()) return true;
    Token xsp;
    if (jj_3R_94()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_61()) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(LEFT_HPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_HPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(LEFT_HPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_HPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(OTHER4)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(OTHER3)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(OTHER5)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(OTHER8)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_45()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(OTHER8)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_45()) return true;
    Token xsp;
    if (jj_3R_140()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_58()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(OTHER7)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(ALT)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(OTHER10)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(OTHER10)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(OTHER12)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_176()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(ALT)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_176()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    if (jj_scan_token(OTHER12)) return true;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(ALT)) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_49()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_151()) return true;
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_150()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  public HaskellParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[109];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2,0x8,0x0,0x41c03f00,0x0,0x2,0x10,0x40,0x80,0x80,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x4,0x4,0x41c03f00,0x0,0x8000000,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x41c00000,0x0,0x4,0x8000000,0x4,0x4,0x8000000,0x4,0x0,0x0,0x0,0x1c00000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x400b4000,0x400b4000,0x400b4000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x400b4000,0x0,0x0,0x400b4000,0x0,0x400b4000,0x0,0x0,0x4000,0x4,0x8000000,0x4,0x40000000,0x40000000,0x40000000,0x0,0x40000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x60000000,0x60000000,0x0,0x0,0x0,0x60000000,0x60000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xc78003,0x0,0x18000,0x0,0x0,0x0,0x0,0x18000,0x0,0x0,0x8000,0x18000,0x0,0x0,0x18000,0x0,0x0,0x0,0x18000,0x0,0x0,0xc78003,0x18000,0x0,0x0,0x18000,0x18000,0x8000,0x0,0x18000,0x18000,0xc78003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x0,0xc78003,0xc78003,0xc78003,0x0,0x0,0xc78020,0xc78020,0xc78020,0xc60000,0x0,0x0,0xc78000,0xc78003,0x0,0xc78020,0x0,0x0,0xc78020,0x0,0xc78020,0x0,0x0,0x0,0x0,0x0,0x0,0xc78003,0xc78003,0xc78003,0x18002,0x0,0x0,0xc78003,0xc78003,0xc78003,0xc60001,0x0,0x0,0x0,0x18000,0x18000,0x10000,0x0,0x0,0x0,0x10000,0x18000,0x10000,0x0,0x10000,0x0,0x8000,0x0,0x11,0x8011,0x11,0x8011,0x0,0x8004,0x8004,0x11,0x11,0xc60000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x10,0x2a0,0x80,0x80,0x0,0x0,0x80,0x0,0x80,0x800,0x80,0x80,0x80,0x80,0x800,0x80,0x10,0x0,0x0,0x80,0x0,0x0,0x2a0,0x80,0x0,0x800,0x2a0,0x2a0,0x80,0x0,0x2a4,0x2a0,0x2a0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2a0,0x2a0,0x2a0,0x4,0x4,0x2a0,0x2a0,0x2a0,0x0,0x2a0,0x800,0x2a0,0x2a0,0x10,0x2a0,0x800,0x800,0x2a0,0x800,0x2a0,0x10,0x800,0x0,0x0,0x0,0x0,0x2a0,0x2a0,0x2a0,0x80,0x0,0x4,0x2a0,0x2a0,0x2a0,0x0,0x2a0,0x800,0x800,0x2a0,0x2a0,0x2a0,0x800,0x800,0x80,0x80,0x2a0,0x80,0x800,0x80,0x800,0x80,0x800,0x5000,0x0,0x3000,0x3000,0x5000,0x5000,0x4000,0x2000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[53];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public HaskellParser(CharStream stream) {
    token_source = new HaskellParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public HaskellParser(HaskellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(HaskellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[82];
    for (int i = 0; i < 82; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 109; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 53; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
