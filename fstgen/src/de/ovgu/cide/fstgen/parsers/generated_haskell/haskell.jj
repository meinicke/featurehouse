
options {
  STATIC = false;
}

PARSER_BEGIN(HaskellParser)

package de.ovgu.cide.fstgen.parsers.generated_haskell;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.AbstractFSTParser;

  public class HaskellParser  extends AbstractFSTParser {

	/**
	 * Append the given {@link Token} and any preceding special tokens to a
	 * given {@link StringBuffer}.
	 * 
	 * @param token
	 *            the given JavaCC {@link Token} object
	 * @param buffer
	 *            the buffer to which to append <code>token</code>
	 */
	final private static void accumulate(Token token, StringBuffer buffer) {

		// Append preceding special tokens to <code>buffer</code>:
		//
		Token special = firstSpecial(token);
		if (special != token)
			while (special != null) {
				buffer.append(special.toString());
				special = special.next;
			}

		// Finally, append the token itself:
		//
		buffer.append(token.toString());
	}

	/**
	 * Accumulate {@list Token} objects from the token stream, respecting nested
	 * code inside <code>open</code> and <code>close</code> pairs, until an
	 * unmatched <code>close</code> is the next token in the stream. This
	 * method assumes that an <code>open</code> token has just been read from
	 * the stream so the initial nesting level is 1. The method returns when a
	 * matching <code>close</code> token is the next token in the token
	 * stream. <em>The <code>close</code> token is left in the stream!</em>
	 * 
	 * @return the accumulated tokens as a {@link String}.
	 * 
	 * @throws ParseException
	 *             if an end-of-file is found before an unmatched
	 *             <code>close</code> token.
	 */
	final private Token accumulateNestedRegion(int open, int close)
			throws ParseException {

		StringBuffer buffer = new StringBuffer();
		Token token = getToken(1);

		// Initialize result with known information (starting position, etc.):
		//
		Token result = Token.newToken(UNANTICIPATED_SYMBOL);
		result.specialToken = null;

		Token startToken = firstSpecial(token);
		result.beginColumn = startToken.beginColumn;
		result.beginLine = startToken.beginLine;
		result.offset=startToken.offset;

		// Accumulate tokens until a <code>close</code> token is found:
		//
		for (int nesting = 1; nesting > 0;) {


			if (token.kind == EOF)
				throw new ParseException("accumulating from line "
						+ result.beginLine + " at column " + result.beginColumn
						+ ": EOF reached before ending " + tokenImage[close]
						+ " found");

			if (token.kind == open)
				++nesting;
			else if (token.kind == close) {
				if (nesting == 1)
					break;
				--nesting;
			}

			// Update information in result:
			//
			result.endColumn = token.endColumn;
			result.endLine = token.endLine;
			result.length=(token.offset-result.offset)+token.length;
			result.next = token.next;

			accumulate(token, buffer);
			getNextToken();
			token = getToken(1);
		}

		result.image = buffer.toString();
		return result;
	}


	final private Token accumulateUntil(boolean considerInnerBlocks,
			int endTokenKind) throws ParseException {
		return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind });
	}

	final private Token accumulateUntil(boolean considerInnerBlocks,
			int endTokenKind1, int endTokenKind2) throws ParseException {
		return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
				endTokenKind2 });
	}

	final private Token accumulateUntil(boolean considerInnerBlocks,
			int endTokenKind1, int endTokenKind2, int endTokenKind3)
			throws ParseException {
		return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
				endTokenKind2, endTokenKind3 });
	}
	final private Token accumulateUntil(boolean considerInnerBlocks,
			int endTokenKind1, int endTokenKind2, int endTokenKind3, int endTokenKind4)
			throws ParseException {
		return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
				endTokenKind2, endTokenKind3, endTokenKind4 });
	}

	final private boolean isNot(int kind) {
		return getToken(1).kind != kind;
	}

	final private boolean isNot(int k1, int k2) {
		return isNot(k1) && isNot(k2);
	}

	final private boolean isNot(int k1, int k2, int k3) {
		return isNot(k1, k2) && isNot(k3);
	}
	final private boolean isNot(int k1, int k2, int k3, int k4) {
		return isNot(k1, k2, k3) && isNot(k4);
	}
	
	/** returns true if the CONTEXT_ARROW is found before the SEMICOLON **/
	final private boolean isContext() throws ParseException {
		int lookahead=1;
		while (true) {
			Token t = getToken(lookahead);
			if (t.kind==EOF) throw new ParseException("EOF found before ; or =>  (line " + token.beginLine
                                                + ", column " + token.beginColumn
                                                + ")");
			if (t.kind==SEMICOLON) return false;
			if (t.kind==CONTEXT_ARROW) return true;	
			lookahead++;
		}
	}

	/**
	 * Accumulate {@link Token} objects from the token stream until a token
	 * matching <code>tokenKind</code> is consumed from the stream. The tokens
	 * are accumulated in <code>buffer</code>, NOT including the terminating
	 * token.
	 * 
	 * @return a {@link Token} formed by concatenating all intervening tokens
	 *         and special tokens.
	 */
	final private Token accumulateUntil(boolean considerInnerBlocks,
			int[] endTokenKinds) throws ParseException {

		StringBuffer buffer = new StringBuffer();
		Token token = getToken(1);

		// Initialize result with known information (starting position, etc.):
		//
		Token result = Token.newToken(UNANTICIPATED_SYMBOL);
		result.specialToken = null;

		Token startToken = firstSpecial(token);
		result.beginColumn = startToken.beginColumn;
		result.beginLine = startToken.beginLine;
		result.offset=startToken.offset;

		// Accumulate tokens until a <code>tokenKind</code> token is found:
		//
		int nesting=0;
		while (!contains(endTokenKinds, token.kind) || nesting >0) {
			// Update information in result:
			//
			result.endColumn = token.endColumn;
			result.endLine = token.endLine;
			result.next = token.next;
			result.length=(token.offset-result.offset)+token.length;

			if (token.kind == EOF)
				throw new ParseException("from line " + result.beginLine
						+ " at column " + result.beginColumn
						+ ": EOF reached before " + images(endTokenKinds)
						+ " found");
			
			if (considerInnerBlocks && token.kind == LEFT_CURLY)
				++nesting;
			else if (considerInnerBlocks && token.kind == RIGHT_CURLY) {
				--nesting;
			}

			accumulate(token, buffer);
			getNextToken();
			token = getToken(1);
		}

		if (buffer.length() == 0)
			throw new ParseException("syntax error - empty pseudo-match (line " + result.beginLine
                                                + ", column " + result.beginColumn
                                                + ")");

		result.image = buffer.toString();
		return result;
	}

	private String images(int[] endTokenKinds) {
		String result = "";
		for (int i : endTokenKinds)
			result += tokenImage[i] + " ";
		return result;
	}

	private boolean contains(int[] endTokenKinds, int kind) {
		for (int i : endTokenKinds)
			if (i == kind)
				return true;
		return false;
	}

    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

	while (token.specialToken != null)
	    token = token.specialToken ;

	return token ;
    }
  }

PARSER_END(HaskellParser)


JAVACODE
Token findListContent () {
    return accumulateNestedRegion(LEFT_PAREN, RIGHT_PAREN) ;
}

JAVACODE
Token findBlockContent () {
    return accumulateNestedRegion (LEFT_CURLY, RIGHT_CURLY) ;
}

JAVACODE
Token findConRest () {
	//(block | ~(SEMICOLON|ALT|RIGHT_CURLY))*
    return accumulateUntil(true,SEMICOLON,ALT,RIGHT_CURLY,DERIVING) ;
}

JAVACODE
Token findNonstddeclRest () {
	//(block | ~(SEMICOLON|RIGHT_CURLY))+
    return accumulateUntil(true,SEMICOLON,RIGHT_CURLY) ;
}

JAVACODE
Token findUntilSemiOrCCB () {
	//~(SEMICOLON | RIGHT_CURLY)*
    return accumulateUntil(false,SEMICOLON,RIGHT_CURLY) ;
}
JAVACODE
Token findUntilSemiOrContextArrow () {
	//(~(CONTEXT_ARROW|SEMICOLON))*;
    return accumulateUntil(false,CONTEXT_ARROW,SEMICOLON) ;
}
JAVACODE
Token findUntilSemiOrEquals () {
	//~(EQUALS|SEMICOLON))*
    return accumulateUntil(false,SEMICOLON,EQUALS) ;
}
JAVACODE
Token findUntilEquals () {
	//~(EQUALS))*
    return accumulateUntil(false,EQUALS) ;
}





//options	{
//    k = 9;
//    // Allow any char but \uFFFF (16 bit -1)
//    charVocabulary='\u0000'..'\uFFFE';
//}

TOKEN : {
	<MODULE : "module">
|	<WHERE : "where" >
|	<IMPORT : "import" >
|	<QUALIFIED : "qualified" >
|	<DERIVING : "deriving" >
|	<AS : "as" >
|	<HIDING : "hiding" >
|	<TYPE : "type" >
|	<DATA : "data" >
|	<NEWTYPE : "newtype" >
|	<CLASS : "class" >
|	<INSTANCE : "instance" >
|	<DEFAULTTOKEN : "default" >
|	<LET : "let" >
|	<IN : "in" >
|	<DO : "do" >
|	<CASE : "case" >
|	<OF : "of" >
|	<IF : "if">
|	<THEN : "then">
|	<ELSE : "else">
|	<INFIXL : "infixl" >
|	<INFIXR : "infixr" >
|	<INFIX : "infix" >
|	<CONTEXT_ARROW : "=>" >
|	<EQUALS : "=" >
|	<ALT : "|" >
|	<OFTYPE : "::" >
|	<OTHER1 : "." >
|	<OTHER2 : "-" >
|	<OTHER3 : "@" >
|	<OTHER4 : "_" >
|	<OTHER5 : "~" >
|	<OTHER6 : ":" >
|	<OTHER7 : "->" >
|	<OTHER8 : "+" >
|	<OTHER9 : "\\" >
|	<OTHER10 : "<-" >
|	<OTHER11 : "--" >
|	<OTHER12 : ".." >
//|	<QVARID>//|	<QCONID>//|	<QVARSYM>
}

SPECIAL_TOKEN : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"--" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"{-"(~["-"])*"-"("-" | ~["-", "}"](~["-"])*"-")*"}">
}

    
//PPDIRECTIVE
//	:	'#' (~('\n'))* NEWLINE { $setType(Token.SKIP); }
//	;


TOKEN : {
	<CONSTRUCTOR_ID : <UPPER_CASE>	( <LETTER>
							| <DIGIT>
							| "'"  | "#" )* >
|	<VARIABLE_ID : <LOWER_CASE>	( <LETTER>
							| <DIGIT>
							| "'"  | "#" )*>

|	<INTEGER:	(<DECIMAL>	|	"0o" <OCTAL> | "0O" <OCTAL>
		|	"0x" <HEXADECIMAL> | "0X" <HEXADECIMAL>)>
		
|   <FLOAT: <DECIMAL> "." <DECIMAL> (["e","E"] (["+","-"])? <DECIMAL>)?>
|	<#DECIMAL : (<DIGIT>)+ >

|	<#HEXADECIMAL : (<HEXIT>)+>

|	<#OCTAL : (<OCTIT>)+ >

//|	<CHARACTER_LITERAL : "'" (~["'","\\"]|<CHARACTER_ESCAPE>) "'" >////|	<STRING_LITERAL : "\"" (~["\"","\\"]|<STRING_ESCAPE>|<GAP>)* "\"" >
|  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","a","b","r","f","\\","'","\"","&"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","a","b","r","f","\\","'","\"","&"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|	<#CHARACTER_ESCAPE	:	"\\"
		( <CHAR_ESC>
		| <DECIMAL>
		| "x" <HEXADECIMAL>
		| "o" <OCTAL>
		)
	>
	
|	<#CHAR_ESC
	:
    	( "a"
    	| "b"  
    	| "f"  
    	| "n"  
    	| "r" 
    	| "t" 
    	| "v"
    	| "\\" 
    	| "\""
    	| "'" )
	>

|	<#STRING_ESCAPE	: ("\\&" | <CHARACTER_ESCAPE>)>
    
    
|	<#ASCII : "NUL" >
    
//|	<NEWLINE : "\n">

//|	<#GAP : "\\" (<WS> | <NEWLINE>)+ "\\" >

|	<#LOWER_CASE:	["a"-"z","_"]>	
|	<#UPPER_CASE:	["A"-"Z"]>	
|	<#LETTER : <UPPER_CASE> | <LOWER_CASE>>

|	<#DIGIT:	["0"-"9"]>	

|	<#HEXIT:	(<DIGIT> | ["A"-"F"] | ["a"-"f"] )>	

|	<#OCTIT:	["0"-"7"]>	

|	<LEFT_CURLY : "{" >

|	<RIGHT_CURLY : "}" >

|	<SEMICOLON : ";" >

//extension: unboxed tuple
|	<LEFT_HPAREN : "(#" >

|	<RIGHT_HPAREN : "#)" >
|	<LEFT_PAREN : "(" >

|	<RIGHT_PAREN : ")" >

|	<LEFT_BRACKET : "[" >

|	<RIGHT_BRACKET : "]" >

|	<COMMA : "," >

|	<INFIX_QUOTE : "`" >

|	<VARSYM : <SYMBOL> (<SYMBOL> | ":" )* >

|	<CONSYM : ":" (<SYMBOL> | ":"  )* >

|	<SYMBOL : "!" | "#" | "$" | "%" | "&" | "*" | "+" | "." | "/" | "<" | "="
       | ">" | "?" | "@" | "\\" | "^" | "-" | "~" | "|"
       >
       
|	<UNANTICIPATED_SYMBOL : ~["a"-"z","A"-"Z","0"-"9"] >
}


<PAREN> TOKEN :{
 	<ANYTHINGP: ~["(",")"]>
}
FSTInfo module(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=moduleHeader(inTerminal){ replaceName("moduleHeader", n);}{ replaceName(n);}] "{" n=body(inTerminal){ replaceName(n);} "}" {return productionEndNonTerminal("module","{moduleHeader}","{moduleHeader}");}

 )  }

FSTInfo body(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=imports(inTerminal){ replaceName(n);}] [";" ] [n=definitions(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("body","-","-");}

 )  }

FSTInfo imports(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=importDecl(inTerminal){ replaceName(n);} (LOOKAHEAD(2) ";" n=importDecl(inTerminal){ replaceName(n);})* ";" {return productionEndNonTerminal("imports","-","-");}

 )  }

FSTInfo moduleHeader(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"module" n=naam(inTerminal){ replaceName("naam", n);}{ replaceName(n);} [n=exports(inTerminal){ replaceName(n);}] "where" {return productionEndNonTerminal("moduleHeader","{naam}","{naam}");}

 )  }

FSTInfo exports(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=exportList(inTerminal){ replaceName(n);}] ")" {return productionEndNonTerminal("exports","-","-");}

 )  }

FSTInfo importDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"import" ["qualified" ] n=naam(true){ replaceName(n);} ["as" n=naam(true){ replaceName(n);}] [n=hiding(true){ replaceName(n);}] {return productionEndTerminal("importDecl","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo hiding(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	["hiding" ] "(" [n=exportList(true){ replaceName(n);}] ")" {return productionEndTerminal("hiding","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exportList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=export(inTerminal){ replaceName(n);} ("," n=export(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("exportList","-","-");}

 )  }

FSTInfo export(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(var()) n=var(true){ replaceName(n);} {return productionEndTerminal("export1","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	n=naam(true){ replaceName(n);} [n=exportNaamParam(true){ replaceName(n);}] {return productionEndTerminal("export2","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	"module" n=naam(true){ replaceName(n);} {return productionEndTerminal("export3","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo exportNaamParam(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" ".." ")"  {return productionEndTerminal("exportNaamParam1","-","-","Replacement","Default",first,token);}
 |
	"(" [n=naamOrVarList(true){ replaceName(n);}] ")" {return productionEndTerminal("exportNaamParam2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo naamOrVarList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=naamOrVar(true){ replaceName(n);} ("," n=naamOrVar(true){ replaceName(n);})* {return productionEndTerminal("naamOrVarList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo naamOrVar(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(naam()) n=naam(true){ replaceName(n);} {return productionEndTerminal("naamOrVar1","-","-","Replacement","Default",first,token);}
 |
	n=var(true){ replaceName(n);} {return productionEndTerminal("naamOrVar2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo definitions(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=definition(inTerminal){ replaceName(n);} (";" n=definition(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("definitions","-","-");}

 )  }

FSTInfo definition(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"type" n=simpletype(inTerminal){ replaceName("simpletype", n);}{ replaceName(n);} "=" n=functiontype(inTerminal){ replaceName(n);} {return productionEndNonTerminal("typedecl","{simpletype}","{simpletype}");}
 |
	"data" [LOOKAHEAD(context()) n=context(inTerminal){ replaceName(n);}] n=simpletype(inTerminal){ replaceName("simpletype", n);}{ replaceName(n);} "=" n=constrs(inTerminal){ replaceName(n);} [n=deriving(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("datadecl","{simpletype}","{simpletype}");}
 |
	"newtype" [LOOKAHEAD(context()) n=context(inTerminal){ replaceName(n);}] n=simpletype(inTerminal){ replaceName("simpletype", n);}{ replaceName(n);} "=" n=naam(inTerminal){ replaceName(n);} n=newtypeParam(inTerminal){ replaceName(n);} [n=deriving(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("newtypedecl","{simpletype}","{simpletype}");}
 |
	"class" [LOOKAHEAD(context()) n=context(inTerminal){ replaceName(n);}] n=naam(inTerminal){ replaceName("naam", n);}{ replaceName(n);} (n=var(inTerminal){ replaceName(n);})+ [n=whereDecls(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("classdecl","{naam}","{naam}");}
 |
	"instance" [LOOKAHEAD(context()) n=context(inTerminal){ replaceName(n);}] n=inst(inTerminal){ replaceName("inst", n);}{ replaceName(n);} [n=whereDecls(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("instancedecl","{inst}","{inst}");}
 |
	"default" n=functiontypeList(inTerminal){ replaceName("functiontypeList", n);}{ replaceName(n);} {return productionEndNonTerminal("defaultdecl","{functiontypeList}","{functiontypeList}");}
 |
	n=declaration(true){ replaceName("declaration", n);}{ replaceName(n);} {return productionEndTerminal("declaration","{declaration}","{declaration}","Replacement","Default",first,token);}

 )  }

FSTInfo simpletype(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=naam(true){ replaceName("naam", n);}{ replaceName(n);} (n=var(true){ replaceName(n);})* {return productionEndTerminal("simpletype","{naam}","{naam}","Replacement","Default",first,token);}

 )  }

FSTInfo constrs(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=constr(inTerminal){ replaceName(n);} ("|" n=constr(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("constrs","-","-");}

 )  }

FSTInfo constr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(naam() "{") n=naam(true){ replaceName("naam", n);}{ replaceName(n);} "{" n=fielddeclaration(true){ replaceName(n);} ("," n=fielddeclaration(true){ replaceName(n);})* "}" {return productionEndTerminal("constr1","{naam}","{naam}","Replacement","Default",first,token);}
 |
	LOOKAHEAD((type())+ operator()) (LOOKAHEAD(type()) n=type(true){ replaceName(n);})+ n=operator(true){ replaceName("operator", n);}{ replaceName(n);} (n=type(true){ replaceName(n);})+ {return productionEndTerminal("constr2","{operator}","{operator}","Replacement","Default",first,token);}
 |
	n=naam(true){ replaceName("naam", n);}{ replaceName(n);} (n=type(true){ replaceName(n);})* {return productionEndTerminal("constr3","{naam}","{naam}","Replacement","Default",first,token);}

 )  }

FSTInfo fielddeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=varList(true){ replaceName(n);} "::" n=functiontype(true){ replaceName(n);} {return productionEndTerminal("fielddeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo deriving(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "deriving" "(" n=naamList(true){ replaceName(n);} ")" {return productionEndTerminal("deriving1","-","-","Replacement","Default",first,token);}
 |
	"deriving" n=naam(true){ replaceName(n);} {return productionEndTerminal("deriving2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo newtypeParam(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=var(true){ replaceName(n);} "::" n=functiontype(true){ replaceName(n);} "}" {return productionEndTerminal("newtypeParam1","-","-","Replacement","Default",first,token);}
 |
	n=type(true){ replaceName(n);} {return productionEndTerminal("newtypeParam2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inst(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=naam(true){ replaceName(n);} (n=type(true){ replaceName(n);})+ {return productionEndTerminal("inst","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo decls(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [n=declarationList(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("decls","-","-");}

 )  }

FSTInfo declarationList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=declaration(inTerminal){ replaceName(n);} (";" n=declaration(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("declarationList","-","-");}

 )  }

FSTInfo declaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(function() "=") n=function(true){ replaceName(n);} "=" n=expr(true){ replaceName(n);} [n=whereDecls(true){ replaceName(n);}] {return productionEndTerminal("declaration1","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(function() "|") n=function(true){ replaceName(n);} (n=altExprAss(true){ replaceName(n);})+ [n=whereDecls(true){ replaceName(n);}] {return productionEndTerminal("declaration2","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(varList() "::") n=varList(true){ replaceName(n);} "::" [LOOKAHEAD(context()) n=context(true){ replaceName(n);}] n=functiontype(true){ replaceName(n);} {return productionEndTerminal("declaration3","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(patr() "=") n=patr(true){ replaceName(n);} "=" n=expr(true){ replaceName(n);} [n=whereDecls(true){ replaceName(n);}] {return productionEndTerminal("declaration4","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(patr() "|") n=patr(true){ replaceName(n);} (n=altExprAss(true){ replaceName(n);})+ [n=whereDecls(true){ replaceName(n);}] {return productionEndTerminal("declaration5","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	"infix" [<INTEGER>] n=operatorList(true){ replaceName(n);} {return productionEndTerminal("declaration6","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	"infixl" [<INTEGER>] n=operatorList(true){ replaceName(n);} {return productionEndTerminal("declaration7","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	"infixr" [<INTEGER>] n=operatorList(true){ replaceName(n);} {return productionEndTerminal("declaration8","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo altExprAss(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=expr(true){ replaceName(n);} "=" n=expr(true){ replaceName(n);} {return productionEndTerminal("altExprAss","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo function(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(var() patroon()) n=var(true){ replaceName(n);} n=patroon(true){ replaceName(n);} (n=patroon(true){ replaceName(n);})* {return productionEndTerminal("function1","-","{TOSTRING}","Replacement","Default",first,token);}
 |
	LOOKAHEAD("(" function()) "(" n=function(true){ replaceName(n);} ")" (n=patroon(true){ replaceName(n);})+ {return productionEndTerminal("function2","-","{TOSTRING}","Replacement","Default",first,token);}
 |
	n=patroon(true){ replaceName(n);} n=operator(true){ replaceName(n);} n=patr(true){ replaceName(n);} {return productionEndTerminal("function3","-","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo whereDecls(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"where" n=decls(inTerminal){ replaceName(n);} {return productionEndNonTerminal("whereDecls","-","-");}

 )  }

FSTInfo expressie(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=literal(true){ replaceName(n);} {return productionEndTerminal("expressie1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(var()) n=var(true){ replaceName(n);} [n=contrExprParam(true){ replaceName(n);}] {return productionEndTerminal("expressie2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(naam()) n=naam(true){ replaceName(n);} [n=contrExprParam(true){ replaceName(n);}] {return productionEndTerminal("expressie3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD("(" expr() operator()) "(" n=expr(true){ replaceName(n);} n=operator(true){ replaceName(n);} ")" {return productionEndTerminal("expressie4","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD("(" operator()) "(" n=operator(true){ replaceName(n);} n=expr(true){ replaceName(n);} ")" {return productionEndTerminal("expressie5","-","-","Replacement","Default",first,token);}
 |
	"(" [n=exprList(true){ replaceName(n);}] ")" {return productionEndTerminal("expressie6","-","-","Replacement","Default",first,token);}
 |
	"(#" [n=exprList(true){ replaceName(n);}] "#)" {return productionEndTerminal("expressie7","-","-","Replacement","Default",first,token);}
 |
	"[" [n=exprListSpecial(true){ replaceName(n);}] "]" {return productionEndTerminal("expressie8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo contrExprParam(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=contrExprAssign(true){ replaceName(n);} ("," n=contrExprAssign(true){ replaceName(n);})* "}" {return productionEndTerminal("contrExprParam","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo contrExprAssign(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=var(true){ replaceName(n);} "=" n=expr(true){ replaceName(n);} {return productionEndTerminal("contrExprAssign","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=exprMain(true){ replaceName(n);} (LOOKAHEAD(exprOperator()) n=exprOperator(true){ replaceName(n);})* [LOOKAHEAD(exprEnd()) n=exprEnd(true){ replaceName(n);}] {return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exprEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"::" [LOOKAHEAD(context()) n=context(true){ replaceName(n);}] n=functiontype(true){ replaceName(n);} {return productionEndTerminal("exprEnd","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exprMain(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(1) n=expressie(true){ replaceName(n);})+ {return productionEndTerminal("exprMain1","-","-","Replacement","Default",first,token);}
 |
	"-" n=expr(true){ replaceName(n);} {return productionEndTerminal("exprMain2","-","-","Replacement","Default",first,token);}
 |
	"\\" (n=patroon(true){ replaceName(n);})+ "->" n=expr(true){ replaceName(n);} {return productionEndTerminal("exprMain3","-","-","Replacement","Default",first,token);}
 |
	"if" n=expr(true){ replaceName(n);} "then" n=expr(true){ replaceName(n);} "else" n=expr(true){ replaceName(n);} {return productionEndTerminal("exprMain4","-","-","Replacement","Default",first,token);}
 |
	"case" n=expr(true){ replaceName(n);} "of" "{" n=caseInner(true){ replaceName(n);} (";" n=caseInner(true){ replaceName(n);})* "}" {return productionEndTerminal("exprMain5","-","-","Replacement","Default",first,token);}
 |
	"let" n=decls(true){ replaceName(n);} "in" n=expr(true){ replaceName(n);} {return productionEndTerminal("exprMain6","-","-","Replacement","Default",first,token);}
 |
	"do" "{" n=altSpecialSemiList(true){ replaceName(n);} "}" {return productionEndTerminal("exprMain7","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exprOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=operator(true){ replaceName(n);} n=expr(true){ replaceName(n);} {return productionEndTerminal("exprOperator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exprList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=expr(true){ replaceName(n);} ("," n=expr(true){ replaceName(n);})* {return productionEndTerminal("exprList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exprListSpecial(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(expr() "|") n=expr(true){ replaceName(n);} "|" n=altSpecialList(true){ replaceName(n);} {return productionEndTerminal("exprListSpecial1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(expr() ["," expr()] "..") n=expr(true){ replaceName(n);} ["," n=expr(true){ replaceName(n);}] ".." [n=expr(true){ replaceName(n);}] {return productionEndTerminal("exprListSpecial2","-","-","Replacement","Default",first,token);}
 |
	n=expr(true){ replaceName(n);} ("," n=expr(true){ replaceName(n);})* {return productionEndTerminal("exprListSpecial3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo altSpecialSemiList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=altSpecial(true){ replaceName(n);} (";" n=altSpecial(true){ replaceName(n);})* {return productionEndTerminal("altSpecialSemiList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo altSpecialList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=altSpecial(true){ replaceName(n);} ("," n=altSpecial(true){ replaceName(n);})* {return productionEndTerminal("altSpecialList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo altSpecial(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(patr() "<-") n=patr(true){ replaceName(n);} "<-" n=expr(true){ replaceName(n);} {return productionEndTerminal("altSpecial1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(expr()) n=expr(true){ replaceName(n);} {return productionEndTerminal("altSpecial2","-","-","Replacement","Default",first,token);}
 |
	"let" n=decls(true){ replaceName(n);} {return productionEndTerminal("altSpecial3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo caseInner(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(patr() "->") n=patr(true){ replaceName(n);} "->" n=expr(true){ replaceName(n);} [n=whereDecls(true){ replaceName(n);}] {return productionEndTerminal("caseInner1","-","-","Replacement","Default",first,token);}
 |
	n=patr(true){ replaceName(n);} (n=caseInnerAlt(true){ replaceName(n);})* [n=whereDecls(true){ replaceName(n);}] {return productionEndTerminal("caseInner2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo caseInnerAlt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=expr(true){ replaceName(n);} "->" n=expr(true){ replaceName(n);} {return productionEndTerminal("caseInnerAlt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=patrMain(true){ replaceName(n);} (LOOKAHEAD(qconop()) n=patrOp(true){ replaceName(n);})* {return productionEndTerminal("patr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patrOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=qconop(true){ replaceName(n);} n=patr(true){ replaceName(n);} {return productionEndTerminal("patrOp","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patrMain(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(naam() patroon()) n=naam(true){ replaceName(n);} (LOOKAHEAD(1) n=patroon(true){ replaceName(n);})+ {return productionEndTerminal("patrMain1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(var() "+" <INTEGER>) n=var(true){ replaceName(n);} "+" <INTEGER> {return productionEndTerminal("patrMain2","-","-","Replacement","Default",first,token);}
 |
	n=patroon(true){ replaceName(n);} {return productionEndTerminal("patrMain3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patroon(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(patroonPrefix()) n=patroonPrefix(true){ replaceName(n);})* n=patroonMain(true){ replaceName(n);} {return productionEndTerminal("patroon","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patroonPrefix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("patroonPrefix1","-","-","Replacement","Default",first,token);}
 |
	n=var(true){ replaceName(n);} "@" {return productionEndTerminal("patroonPrefix2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patroonMain(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"_"  {return productionEndTerminal("patroonMain1","-","-","Replacement","Default",first,token);}
 |
	["-" ] n=literal(true){ replaceName(n);} {return productionEndTerminal("patroonMain2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(var()) n=var(true){ replaceName(n);} {return productionEndTerminal("patroonMain3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(naam()) n=naam(true){ replaceName(n);} [n=contrPatrParam(true){ replaceName(n);}] {return productionEndTerminal("constructorNaam","-","-","Replacement","Default",first,token);}
 |
	"(" [n=patrList(true){ replaceName(n);}] ")" {return productionEndTerminal("patroonMain5","-","-","Replacement","Default",first,token);}
 |
	"(#" [n=patrList(true){ replaceName(n);}] "#)" {return productionEndTerminal("patroonMain6","-","-","Replacement","Default",first,token);}
 |
	"[" [n=patrList(true){ replaceName(n);}] "]" {return productionEndTerminal("patroonMain7","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo patrList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=patr(true){ replaceName(n);} ("," n=patr(true){ replaceName(n);})* {return productionEndTerminal("patrList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo contrPatrParam(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=contrPatrAssign(true){ replaceName(n);} ("," n=contrPatrAssign(true){ replaceName(n);})* "}" {return productionEndTerminal("contrPatrParam","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo contrPatrAssign(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=var(true){ replaceName(n);} "=" n=patr(true){ replaceName(n);} {return productionEndTerminal("contrPatrAssign","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(naam()) n=naam(true){ replaceName(n);} {return productionEndTerminal("type1","-","-","Replacement","Default",first,token);}
 |
	<VARIABLE_ID> {return productionEndTerminal("type2","-","-","Replacement","Default",first,token);}
 |
	"(" [n=functiontypeList(true){ replaceName(n);}] ")" {return productionEndTerminal("type3","-","-","Replacement","Default",first,token);}
 |
	"(#" [n=functiontypeList(true){ replaceName(n);}] "#)" {return productionEndTerminal("type4","-","-","Replacement","Default",first,token);}
 |
	"[" n=functiontype(true){ replaceName(n);} "]" {return productionEndTerminal("type5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo functiontypeList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=functiontype(true){ replaceName(n);} ("," n=functiontype(true){ replaceName(n);})* {return productionEndTerminal("functiontypeList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo functiontype(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=paramtype(true){ replaceName(n);} (LOOKAHEAD("->" paramtype()) "->" n=paramtype(true){ replaceName(n);})* {return productionEndTerminal("functiontype","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo paramtype(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(type()) n=type(true){ replaceName(n);})+ {return productionEndTerminal("paramtype","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo context(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(klasse() "=>") n=klasse(true){ replaceName(n);} "=>" {return productionEndTerminal("context1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) "(" ")" "=>"  {return productionEndTerminal("context2","-","-","Replacement","Default",first,token);}
 |
	"(" n=klasse(true){ replaceName(n);} ("," n=klasse(true){ replaceName(n);})* ")" "=>" {return productionEndTerminal("context3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo klasse(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=naam(true){ replaceName(n);} (n=klasseTypeVar(true){ replaceName(n);})+ {return productionEndTerminal("klasse","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo klasseTypeVar(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" <VARIABLE_ID> (n=type(true){ replaceName(n);})* ")" {return productionEndTerminal("klasseTypeVar1","-","-","Replacement","Default",first,token);}
 |
	<VARIABLE_ID> {return productionEndTerminal("klasseTypeVar2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo varList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=var(true){ replaceName(n);} ("," n=var(true){ replaceName(n);})* {return productionEndTerminal("varList","-","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo var(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(ModuleNaamPrefix()) n=ModuleNaamPrefix(true){ replaceName(n);}] n=varMain(true){ replaceName("varMain", n);}{ replaceName(n);} {return productionEndTerminal("var","{varMain}","{varMain}","Replacement","Default",first,token);}

 )  }

FSTInfo varMain(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<VARIABLE_ID> {return productionEndTerminal("varMain1","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
 |
	"(" n=varsym(true){ replaceName(n);} ")" {return productionEndTerminal("varMain2","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo naamList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=naam(true){ replaceName(n);} ("," n=naam(true){ replaceName(n);})* {return productionEndTerminal("naamList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo naam(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=qcon(true){ replaceName(n);} {return productionEndTerminal("naam","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo qcon(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=qconid(true){ replaceName(n);} {return productionEndTerminal("qcon1","-","-","Replacement","Default",first,token);}
 |
	"(" n=gconsym(true){ replaceName(n);} ")" {return productionEndTerminal("qcon2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo operatorList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=operator(true){ replaceName(n);} ("," n=operator(true){ replaceName(n);})* {return productionEndTerminal("operatorList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo operator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=qop(true){ replaceName(n);} {return productionEndTerminal("operator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo op(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(varop()) n=varop(true){ replaceName(n);} {return productionEndTerminal("op1","-","-","Replacement","Default",first,token);}
 |
	n=conop(true){ replaceName(n);} {return productionEndTerminal("op2","-","-","Replacement","Default",first,token);}
 |
	n=otherOperators(true){ replaceName(n);} {return productionEndTerminal("op3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qop(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(qvarop()) n=qvarop(true){ replaceName(n);} {return productionEndTerminal("qop1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(qconop()) n=qconop(true){ replaceName(n);} {return productionEndTerminal("qop2","-","-","Replacement","Default",first,token);}
 |
	[LOOKAHEAD(ModuleNaamPrefix()) n=ModuleNaamPrefix(true){ replaceName(n);}] n=otherOperators(true){ replaceName(n);} {return productionEndTerminal("qop3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo varop(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=varsym(true){ replaceName(n);} {return productionEndTerminal("varop1","-","-","Replacement","Default",first,token);}
 |
	"`" <VARIABLE_ID> "`" {return productionEndTerminal("varop2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qvarop(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(1) "`" n=qvarid(true){ replaceName(n);} "`" {return productionEndTerminal("qvarop1","-","-","Replacement","Default",first,token);}
 |
	n=qvarsym(true){ replaceName(n);} {return productionEndTerminal("qvarop2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo conop(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CONSYM> {return productionEndTerminal("conop1","-","-","Replacement","Default",first,token);}
 |
	"`" <CONSTRUCTOR_ID> "`" {return productionEndTerminal("conop2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qconop(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(1) "`" n=qconid(true){ replaceName(n);} "`" {return productionEndTerminal("qconop1","-","-","Replacement","Default",first,token);}
 |
	n=gconsym(true){ replaceName(n);} {return productionEndTerminal("qconop2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qvarsym(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(ModuleNaamPrefix()) n=ModuleNaamPrefix(true){ replaceName(n);}] n=varsym(true){ replaceName(n);} {return productionEndTerminal("qvarsym","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qvarid(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(ModuleNaamPrefix()) n=ModuleNaamPrefix(true){ replaceName(n);}] <VARIABLE_ID> {return productionEndTerminal("qvarid","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qconsym(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(ModuleNaamPrefix()) n=ModuleNaamPrefix(true){ replaceName(n);}] <CONSYM> {return productionEndTerminal("qconsym","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo qconid(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(ModuleNaamPrefix()) n=ModuleNaamPrefix(true){ replaceName(n);}] <CONSTRUCTOR_ID> {return productionEndTerminal("qconid","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo gconsym(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":"  {return productionEndTerminal("gconsym1","-","-","Replacement","Default",first,token);}
 |
	n=qconsym(true){ replaceName(n);} {return productionEndTerminal("gconsym2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo varsym(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<VARSYM> {return productionEndTerminal("varsym1","-","-","Replacement","Default",first,token);}
 |
	n=otherOperators(true){ replaceName(n);} {return productionEndTerminal("varsym2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModuleNaamPrefix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CONSTRUCTOR_ID> "." (LOOKAHEAD(<CONSTRUCTOR_ID> ".") <CONSTRUCTOR_ID> ".")* {return productionEndTerminal("ModuleNaamPrefix","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo otherOperators(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("otherOperators1","-","-","Replacement","Default",first,token);}
 |
	"."  {return productionEndTerminal("otherOperators2","-","-","Replacement","Default",first,token);}
 |
	"-"  {return productionEndTerminal("otherOperators3","-","-","Replacement","Default",first,token);}
 |
	"_"  {return productionEndTerminal("otherOperators4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo literal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER> {return productionEndTerminal("literal1","-","-","Replacement","Default",first,token);}
 |
	<FLOAT> {return productionEndTerminal("literal2","-","-","Replacement","Default",first,token);}
 |
	<CHARACTER_LITERAL> {return productionEndTerminal("literal3","-","-","Replacement","Default",first,token);}
 |
	<STRING_LITERAL> {return productionEndTerminal("literal4","-","-","Replacement","Default",first,token);}

 )  }

