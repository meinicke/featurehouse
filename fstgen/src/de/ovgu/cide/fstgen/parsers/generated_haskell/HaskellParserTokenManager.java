/* Generated By:JavaCC: Do not edit this line. HaskellParserTokenManager.java */
package de.ovgu.cide.fstgen.parsers.generated_haskell;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.AbstractFSTParser;
import cide.gparser.*;
public class HaskellParserTokenManager implements HaskellParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x410000000L) != 0L)
            return 36;
         if ((active1 & 0x4L) != 0L)
            return 6;
         if ((active0 & 0x100000000L) != 0L)
            return 16;
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 77;
            return 56;
         }
         if ((active0 & 0x8840000000L) != 0L)
            return 0;
         if ((active0 & 0x132ae000000L) != 0L)
            return 56;
         if ((active0 & 0x1fffffeL) != 0L)
         {
            jjmatchedKind = 48;
            return 16;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000000L) != 0L)
            return 36;
         if ((active0 & 0x8000000000L) != 0L)
            return 57;
         if ((active0 & 0x326fbeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 1;
            }
            return 16;
         }
         if ((active0 & 0x1cd9040L) != 0L)
            return 16;
         if ((active0 & 0x14802000000L) != 0L)
            return 56;
         return -1;
      case 2:
         if ((active0 & 0x4000L) != 0L)
            return 16;
         if ((active0 & 0x1f23fbeL) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
            return 16;
         }
         return -1;
      case 3:
         if ((active0 & 0x320300L) != 0L)
            return 16;
         if ((active0 & 0x1c03cbeL) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
            return 16;
         }
         return -1;
      case 4:
         if ((active0 & 0x34baL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 4;
            }
            return 16;
         }
         if ((active0 & 0x1c00804L) != 0L)
            return 16;
         return -1;
      case 5:
         if ((active0 & 0xc0008aL) != 0L)
            return 16;
         if ((active0 & 0x3430L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
            return 16;
         }
         return -1;
      case 6:
         if ((active0 & 0x2400L) != 0L)
            return 16;
         if ((active0 & 0x1030L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
            return 16;
         }
         return -1;
      case 7:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 7;
            return 16;
         }
         if ((active0 & 0x1020L) != 0L)
            return 16;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 42);
      case 10:
         return jjStopAtPos(0, 43);
      case 13:
         return jjStopAtPos(0, 44);
      case 32:
         return jjStopAtPos(0, 41);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 40:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 41:
         return jjStopAtPos(0, 72);
      case 43:
         return jjStartNfaWithStates_0(0, 36, 56);
      case 44:
         return jjStopAtPos(0, 75);
      case 45:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x8800000000L, 0x0L);
      case 46:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 58:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 68);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 61:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 64:
         return jjStartNfaWithStates_0(0, 31, 56);
      case 91:
         return jjStopAtPos(0, 73);
      case 92:
         return jjStartNfaWithStates_0(0, 37, 56);
      case 93:
         return jjStopAtPos(0, 74);
      case 95:
         return jjStartNfaWithStates_0(0, 32, 16);
      case 96:
         return jjStopAtPos(0, 76);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x12220L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1c89008L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100100L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 66, 6);
      case 124:
         return jjStartNfaWithStates_0(0, 27, 56);
      case 125:
         return jjStopAtPos(0, 67);
      case 126:
         return jjStartNfaWithStates_0(0, 33, 56);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 41:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 45:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 56);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 57);
         break;
      case 46:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 56);
         break;
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 36);
         break;
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 56);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 56);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6420L, active1, 0L);
      case 102:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 16);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 16);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100004L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1c01000L, active1, 0L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 16);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x810L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x82L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100004L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c02000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x108L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x221000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 16);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c000a0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 16);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 16);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 120:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 1, 16);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 16);
         break;
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 16);
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      case 103:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 4, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 57:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  if ((0xf400ec7a00000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0xf400ec7a00000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(56);
                  }
                  if (curChar == 45)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xf000ec7a00000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 48)
                     jjAddStates(6, 9);
                  else if (curChar == 58)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 3:
                  if (curChar == 10 && kind > 45)
                     kind = 45;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 45)
                     jjCheckNAddStates(15, 17);
                  break;
               case 9:
               case 10:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 14:
                  if ((0x3ff008800000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x3ff008800000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 39 && kind > 54)
                     kind = 54;
                  break;
               case 21:
                  if ((0xc400000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 19);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if ((0xc400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 30:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if (curChar != 58)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0xf400ec7a00000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 38:
                  if (curChar == 48)
                     jjAddStates(6, 9);
                  break;
               case 40:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(3, 5);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0xf000ec7a00000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0xf400ec7a00000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 57:
                  jjCheckNAddStates(0, 2);
                  if ((0x5000000050000001L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(56);
                  }
                  break;
               case 0:
               case 56:
                  if ((0x5000000050000001L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(56);
                  break;
               case 5:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(16);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(14);
                  }
                  else if ((0x5000000050000001L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if ((0xf8000001f8000001L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  break;
               case 1:
                  jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 125 && kind > 46)
                     kind = 46;
                  break;
               case 12:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(22, 24);
                  break;
               case 21:
                  if ((0x14404610000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(25, 27);
                  break;
               case 29:
                  if ((0x14404610000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 36:
                  if ((0x5000000050000001L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0xf8000001f8000001L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 39:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if (curChar == 120)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if (curChar == 88)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(46);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 55:
                  if ((0x5000000050000001L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 57:
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffcffffffffffL & l) != 0L)
                     kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 81)
                     kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 48, 49, 50, 39, 41, 43, 45, 27, 28, 30, 18, 20, 8, 
   9, 11, 27, 28, 32, 30, 21, 22, 24, 29, 31, 33, 53, 54, 
};
public static final String[] jjstrLiteralImages = {
"", "\155\157\144\165\154\145", "\167\150\145\162\145", 
"\151\155\160\157\162\164", "\161\165\141\154\151\146\151\145\144", "\144\145\162\151\166\151\156\147", 
"\141\163", "\150\151\144\151\156\147", "\164\171\160\145", "\144\141\164\141", 
"\156\145\167\164\171\160\145", "\143\154\141\163\163", "\151\156\163\164\141\156\143\145", 
"\144\145\146\141\165\154\164", "\154\145\164", "\151\156", "\144\157", "\143\141\163\145", "\157\146", 
"\151\146", "\164\150\145\156", "\145\154\163\145", "\151\156\146\151\170\154", 
"\151\156\146\151\170\162", "\151\156\146\151\170", "\75\76", "\75", "\174", "\72\72", "\56", "\55", 
"\100", "\137", "\176", "\72", "\55\76", "\53", "\134", "\74\55", "\55\55", "\56\56", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\173", "\175", 
"\73", "\50\43", "\43\51", "\50", "\51", "\133", "\135", "\54", "\140", null, null, 
null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PAREN", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xc781ffffffffffL, 0x3fffcL, 
};
static final long[] jjtoSkip = {
   0x7e0000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7e0000000000L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[57];
private final int[] jjstateSet = new int[114];
protected char curChar;
public HaskellParserTokenManager(CharStream stream){
   input_stream = stream;
}
public HaskellParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 57; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
