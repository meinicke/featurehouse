/* Generated By:JavaCC: Do not edit this line. AlloyParser.java */
package de.ovgu.cide.fstgen.parsers.generated_alloy;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.AbstractFSTParser;

public class AlloyParser extends AbstractFSTParser implements AlloyParserConstants {
        public AlloyParser(){}

  final public FSTInfo NatInteger(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
                           {if (true) return productionEndTerminal("NatInteger","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Integer(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      n = NatInteger(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Integer1","-","-","Replacement","Default",first,token);}
      break;
    case INTEGER_LITERAL:
      n = NatInteger(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("Integer2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Specification(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      n = Module(inTerminal);
                               replaceName(n);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      if (jj_2_1(10)) {
        ;
      } else {
        break label_1;
      }
      n = Open(inTerminal);
                                                                                    replaceName(n);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case LONE:
      case ONE:
      case ABSTRACT:
      case SIG:
      case ENUM:
      case FACT:
      case ASSERT:
      case THIS:
      case PRIVATE:
      case FUN:
      case PRED:
      case RUN:
      case SOME1:
      case CHECK:
      case IDENTIFIER:
      case LBRACE:
      case SLASH:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n = Paragraph(inTerminal);
                                                                                                                                 replaceName(n);
    }
    jj_consume_token(0);
                                                                                                                                                           {if (true) return productionEndNonTerminal("Specification","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Module(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MODULE);
    n = Name(inTerminal);
                                     replaceName("Name", n);
                                                               replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n = ExactlyClause(inTerminal);
                                                                                                              replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
                                                                                                                                 {if (true) return productionEndNonTerminal("Module","{Name}","{Name}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExactlyClause(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXACTLY:
      jj_consume_token(EXACTLY);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n = Name(true);
                                      replaceName(n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      n = ExactlyClauseListElement(true);
                                                                                          replaceName(n);
    }
    jj_consume_token(RBRACKET);
                                                                                                                  {if (true) return productionEndTerminal("ExactlyClause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExactlyClauseListElement(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXACTLY:
      jj_consume_token(EXACTLY);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n = NatInteger(true);
                                            replaceName(n);
                                                              {if (true) return productionEndTerminal("ExactlyClauseListElement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Open(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(OPEN);
    n = Name(inTerminal);
                                               replaceName("Name", n);
                                                                         replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n = RefClause(inTerminal);
                                                                                                                    replaceName(n);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      n = AsClause(inTerminal);
                                                                                                                                                               replaceName(n);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                                                                                                                                                                                  {if (true) return productionEndNonTerminal("Open","{Name}","{Name}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RefClause(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACKET);
    n = Ref(true);
                         replaceName(n);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      n = Ref(true);
                                                            replaceName(n);
    }
    jj_consume_token(RBRACKET);
                                                                                    {if (true) return productionEndTerminal("RefClause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AsClause(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(AS);
    n = Name(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("AsClause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Paragraph(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACT:
      n = FactDecl(true);
                          replaceName("FactDecl", n);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("Paragraph1","{FactDecl}","{FactDecl}","Replacement","Default",first,token);}
      break;
    case ASSERT:
      n = AssertDecl(true);
                            replaceName("AssertDecl", n);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("Paragraph2","{AssertDecl}","{AssertDecl}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_2(2)) {
        n = FunDecl(true);
                                      replaceName("FunDecl", n);
                                                                   replaceName(n);
                                                                                     {if (true) return productionEndTerminal("Paragraph3","{FunDecl}","{FunDecl}","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
        case THIS:
        case RUN:
        case CHECK:
        case IDENTIFIER:
        case LBRACE:
        case SLASH:
          n = CmdDecl(true);
                         replaceName("CmdDecl", n);
                                                      replaceName(n);
                                                                        {if (true) return productionEndTerminal("Paragraph4","{CmdDecl}","{CmdDecl}","Replacement","Default",first,token);}
          break;
        case ENUM:
          n = EnumDecl(inTerminal);
                                replaceName("EnumDecl", n);
                                                              replaceName(n);
                                                                                {if (true) return productionEndNonTerminal("Paragraph5","{EnumDecl}","{EnumDecl}");}
          break;
        case LONE:
        case ONE:
        case ABSTRACT:
        case SIG:
        case PRIVATE:
        case SOME1:
          n = SigDecl(inTerminal);
                               replaceName("SigDecl", n);
                                                            replaceName(n);
                                                                              {if (true) return productionEndNonTerminal("Paragraph6","{SigDecl}","{SigDecl}");}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FactDecl(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FACT);
    n = MaybeName(true);
                                  replaceName("MaybeName", n);
                                                                 replaceName(n);
    n = Block(true);
                                                                                                 replaceName(n);
                                                                                                                   {if (true) return productionEndTerminal("FactDecl","-","{MaybeName}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssertDecl(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ASSERT);
    n = MaybeName(true);
                                    replaceName("MaybeName", n);
                                                                   replaceName(n);
    n = Block(true);
                                                                                                   replaceName(n);
                                                                                                                     {if (true) return productionEndTerminal("AssertDecl","-","{MaybeName}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunDecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_9(7)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(FUN);
      if (jj_2_3(2147483647)) {
        n = Ref(true);
                                                                           replaceName(n);
        jj_consume_token(DOT);
      } else {
        ;
      }
      n = Name(true);
                                                                                                               replaceName("Name", n);
                                                                                                                                         replaceName(n);
      jj_consume_token(LPAREN);
      n = FunParams(true);
                                                                                                                                                                                 replaceName("FunParams", n);
                                                                                                                                                                                                                replaceName(n);
      jj_consume_token(RPAREN);
      jj_consume_token(COLON);
      n = Expr(true);
                                                                                                                                                                                                                                                       replaceName(n);
      n = Block(true);
                                                                                                                                                                                                                                                                                       replaceName(n);
                                                                                                                                                                                                                                                                                                         {if (true) return productionEndTerminal("FunDecl1","-","{Name}({FunParams})","Replacement","Default",first,token);}
    } else if (jj_2_10(7)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(FUN);
      if (jj_2_4(2147483647)) {
        n = Ref(true);
                                                                           replaceName(n);
        jj_consume_token(DOT);
      } else {
        ;
      }
      n = Name(true);
                                                                                                               replaceName("Name", n);
                                                                                                                                         replaceName(n);
      jj_consume_token(LBRACKET);
      n = FunParams(true);
                                                                                                                                                                                 replaceName("FunParams", n);
                                                                                                                                                                                                                replaceName(n);
      jj_consume_token(RBRACKET);
      jj_consume_token(COLON);
      n = Expr(true);
                                                                                                                                                                                                                                                       replaceName(n);
      n = Block(true);
                                                                                                                                                                                                                                                                                       replaceName(n);
                                                                                                                                                                                                                                                                                                         {if (true) return productionEndTerminal("FunDecl2","-","{Name}({FunParams})","Replacement","Default",first,token);}
    } else if (jj_2_11(7)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(FUN);
      if (jj_2_5(2147483647)) {
        n = Ref(true);
                                                                           replaceName(n);
        jj_consume_token(DOT);
      } else {
        ;
      }
      n = Name(true);
                                                                                                               replaceName("Name", n);
                                                                                                                                         replaceName(n);
      jj_consume_token(COLON);
      n = Expr(true);
                                                                                                                                                                            replaceName(n);
      n = Block(true);
                                                                                                                                                                                                            replaceName(n);
                                                                                                                                                                                                                              {if (true) return productionEndTerminal("FunDecl3","-","{Name}({FunParams})","Replacement","Default",first,token);}
    } else if (jj_2_12(7)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(PRED);
      if (jj_2_6(2147483647)) {
        n = Ref(true);
                                                                            replaceName(n);
        jj_consume_token(DOT);
      } else {
        ;
      }
      n = Name(true);
                                                                                                                replaceName("Name", n);
                                                                                                                                          replaceName(n);
      jj_consume_token(LPAREN);
      n = FunParams(true);
                                                                                                                                                                                  replaceName("FunParams", n);
                                                                                                                                                                                                                 replaceName(n);
      jj_consume_token(RPAREN);
      n = Block(true);
                                                                                                                                                                                                                                                     replaceName(n);
                                                                                                                                                                                                                                                                       {if (true) return productionEndTerminal("FunDecl4","-","{Name}({FunParams})","Replacement","Default",first,token);}
    } else if (jj_2_13(7)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(PRED);
      if (jj_2_7(2147483647)) {
        n = Ref(true);
                                                                            replaceName(n);
        jj_consume_token(DOT);
      } else {
        ;
      }
      n = Name(true);
                                                                                                                replaceName("Name", n);
                                                                                                                                          replaceName(n);
      jj_consume_token(LBRACKET);
      n = FunParams(true);
                                                                                                                                                                                  replaceName("FunParams", n);
                                                                                                                                                                                                                 replaceName(n);
      jj_consume_token(RBRACKET);
      n = Block(true);
                                                                                                                                                                                                                                                     replaceName(n);
                                                                                                                                                                                                                                                                       {if (true) return productionEndTerminal("FunDecl5","-","{Name}({FunParams})","Replacement","Default",first,token);}
    } else if (jj_2_14(7)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(PRED);
      if (jj_2_8(2147483647)) {
        n = Ref(true);
                                                                            replaceName(n);
        jj_consume_token(DOT);
      } else {
        ;
      }
      n = Name(true);
                                                                                                                replaceName("Name", n);
                                                                                                                                          replaceName(n);
      n = Block(true);
                                                                                                                                                                          replaceName(n);
                                                                                                                                                                                            {if (true) return productionEndTerminal("FunDecl6","-","{Name}({FunParams})","Replacement","Default",first,token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunParams(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
    case THIS:
    case PRIVATE:
    case DISJ:
    case IDENTIFIER:
    case COMMA:
    case SLASH:
      n = Decls(true);
                        replaceName(n);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
                                           {if (true) return productionEndTerminal("FunParams","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CmdDecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
    case THIS:
    case IDENTIFIER:
    case SLASH:
      n = CmdDeclClause(true);
                                             replaceName(n);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RUN:
    case CHECK:
      n = RunOrCheck(true);
                                                                                    replaceName(n);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n = NameOrBlock(true);
                                                                                                                           replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      n = Scope(true);
                                                                                                                                                            replaceName(n);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                                                                                                                                                                               {if (true) return productionEndTerminal("CmdDecl","-","{AUTO}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CmdDeclClause(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Name(true);
                      replaceName(n);
    jj_consume_token(COLON);
                                            {if (true) return productionEndTerminal("CmdDeclClause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RunOrCheck(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RUN:
      jj_consume_token(RUN);
                {if (true) return productionEndTerminal("RunOrCheck1","-","-","Replacement","Default",first,token);}
      break;
    case CHECK:
      jj_consume_token(CHECK);
                  {if (true) return productionEndTerminal("RunOrCheck2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NameOrBlock(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case IDENTIFIER:
      n = NonEmptyName(inTerminal);
                                    replaceName(n);
                                                      {if (true) return productionEndNonTerminal("NameOrBlock1","-","-");}
      break;
    case LBRACE:
      n = Block(inTerminal);
                             replaceName(n);
                                               {if (true) return productionEndNonTerminal("NameOrBlock2","-","-");}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Scope(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_15(2147483647)) {
      jj_consume_token(FOR);
      n = NatInteger(true);
                                                                     replaceName(n);
      jj_consume_token(BUT);
      n = TypeScope(true);
                                                                                                               replaceName(n);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        n = TypeScope(true);
                                                                                                                                                        replaceName(n);
      }
                                                                                                                                                                            {if (true) return productionEndTerminal("Scope1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        jj_consume_token(FOR);
        n = TypeScope(true);
                                 replaceName(n);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          n = TypeScope(true);
                                                                          replaceName(n);
        }
                                                                                              {if (true) return productionEndTerminal("Scope2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeScope(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXACTLY:
      jj_consume_token(EXACTLY);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    n = NatInteger(true);
                                         replaceName(n);
    n = TypeScopeClause(true);
                                                                                   replaceName(n);
                                                                                                     {if (true) return productionEndTerminal("TypeScope","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeScopeClause(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Name(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("TypeScopeClause1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SigDecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONE:
      case ONE:
      case ABSTRACT:
      case PRIVATE:
      case SOME1:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_7;
      }
      n = SigQual(inTerminal);
                                replaceName(n);
    }
    jj_consume_token(SIG);
    n = Name(inTerminal);
                                                                             replaceName("Name", n);
                                                                                                       replaceName(n);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      n = Name(inTerminal);
                                                                                                                                                 replaceName("Name", n);
                                                                                                                                                                           replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case EXTENDS:
      n = SigExt(inTerminal);
                                                                                                                                                                                                                     replaceName(n);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    n = SigBody(inTerminal);
                                                                                                                                                                                                                                                                  replaceName(n);
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n = Block(inTerminal);
                                                                                                                                                                                                                                                                                                                          replaceName(n);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                                                                                                                             {if (true) return productionEndNonTerminal("SigDecl","{Name}","{Name}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SigBody(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
    case THIS:
    case PRIVATE:
    case DISJ:
    case IDENTIFIER:
    case COMMA:
    case SLASH:
      n = Decls(inTerminal);
                              replaceName(n);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
                                                 {if (true) return productionEndNonTerminal("SigBody","SigBody","SigBody");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Decls(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Decl(inTerminal);
                            replaceName(n);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      n = Decl(inTerminal);
                                                                      replaceName(n);
    }
                                                                                          {if (true) return productionEndNonTerminal("Decls","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Decl(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISJ:
      jj_consume_token(DISJ);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    n = Name(true);
                                             replaceName("Name", n);
                                                                       replaceName(n);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      n = Name(true);
                                                                                                           replaceName("Name", n);
                                                                                                                                     replaceName(n);
    }
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISJ:
      jj_consume_token(DISJ);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    n = Expr(true);
                                                                                                                                                                                    replaceName(n);
                                                                                                                                                                                                      {if (true) return productionEndTerminal("Decl","{Name}","{Name}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EnumDecl(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ENUM);
    n = Name(inTerminal);
                                   replaceName("Name", n);
                                                             replaceName(n);
    jj_consume_token(LBRACE);
    n = Name(inTerminal);
                                                                                                      replaceName("Name", n);
                                                                                                                                replaceName(n);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      n = Name(inTerminal);
                                                                                                                                                                          replaceName("Name", n);
                                                                                                                                                                                                    replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                                                                                                                                                                            {if (true) return productionEndNonTerminal("EnumDecl","{Name}","{Name}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SigQual(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                     {if (true) return productionEndTerminal("SigQual1","SigQual","SigQual","Replacement","Default",first,token);}
      break;
    case LONE:
      jj_consume_token(LONE);
                 {if (true) return productionEndTerminal("SigQual2","SigQual","SigQual","Replacement","Default",first,token);}
      break;
    case ONE:
      jj_consume_token(ONE);
                {if (true) return productionEndTerminal("SigQual3","SigQual","SigQual","Replacement","Default",first,token);}
      break;
    case SOME1:
      jj_consume_token(SOME1);
                 {if (true) return productionEndTerminal("SigQual4","SigQual","SigQual","Replacement","Default",first,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                    {if (true) return productionEndTerminal("SigQual5","SigQual","SigQual","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SigExt(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      n = Ref(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("SigExt1","SigExt","SigExt","Replacement","Default",first,token);}
      break;
    case IN:
      jj_consume_token(IN);
      n = Ref(true);
                          replaceName(n);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_12;
        }
        jj_consume_token(PLUS);
        n = Ref(true);
                                                             replaceName(n);
      }
                                                                                 {if (true) return productionEndTerminal("SigExt2","SigExt","SigExt","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expr(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expr1(true);
                       replaceName(n);
    if (jj_2_16(2)) {
      n = BinOpExpr(true);
                                                                         replaceName(n);
    } else {
      ;
    }
                                                                                            {if (true) return productionEndTerminal("Expr","{AUTO}","{AUTO}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BinOpExpr(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = BinOp(true);
                       replaceName(n);
    n = Expr(true);
                                                      replaceName(n);
                                                                        {if (true) return productionEndTerminal("BinOpExpr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expr1(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expr2(true);
                       replaceName(n);
    if (jj_2_17(2)) {
      n = ArrowOpExpr(true);
                                                                           replaceName(n);
    } else {
      ;
    }
                                                                                              {if (true) return productionEndTerminal("Expr1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrowOpExpr(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ArrowOp(true);
                         replaceName(n);
    n = Expr(true);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("ArrowOpExpr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expr2(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expr3(true);
                       replaceName(n);
    if (jj_2_18(2)) {
      n = CompareOpExpr(true);
                                                                             replaceName(n);
    } else {
      ;
    }
                                                                                                {if (true) return productionEndTerminal("Expr2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CompareOpExpr(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case 79:
      n = NotClause(true);
                            replaceName(n);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    n = CompareOp(true);
                                                                 replaceName(n);
    n = Expr(true);
                                                                                                replaceName(n);
                                                                                                                  {if (true) return productionEndTerminal("CompareOpExpr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expr3(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expr4(true);
                       replaceName(n);
    if (jj_2_19(2147483647)) {
      n = ElseExpr(true);
                                                                                 replaceName(n);
    } else {
      ;
    }
                                                                                                    {if (true) return productionEndTerminal("Expr3","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ElseExpr(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLIES:
    case 80:
      n = ImpliesClause(true);
                                replaceName(n);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    n = Expr(true);
                                                                replaceName(n);
    jj_consume_token(ELSE);
    n = Expr(true);
                                                                                                      replaceName(n);
                                                                                                                        {if (true) return productionEndTerminal("ElseExpr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expr4(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expr5(true);
                       replaceName(n);
    if (jj_2_20(2)) {
      n = ExprList(true);
                                                                        replaceName(n);
    } else {
      ;
    }
                                                                                           {if (true) return productionEndTerminal("Expr4","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExprList(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACKET);
    n = Expr(true);
                          replaceName(n);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      n = Expr(true);
                                                              replaceName(n);
    }
    jj_consume_token(RBRACKET);
                                                                                      {if (true) return productionEndTerminal("ExprList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expr5(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      jj_consume_token(LET);
      n = LetDecl(true);
                               replaceName(n);
      label_14:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(COMMA);
        n = LetDecl(true);
                                                                                   replaceName(n);
      }
      if (jj_2_22(2)) {
        n = BlockOrBar(true);
                                                                                                                                        replaceName(n);
      } else {
        ;
      }
                                                                                                                                                           {if (true) return productionEndTerminal("Expr51","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[48] = jj_gen;
      if (jj_2_25(3)) {
        n = Quant(true);
                                    replaceName(n);
        n = Decl(true);
                                                                   replaceName(n);
        label_15:
        while (true) {
          if (jj_2_23(2)) {
            ;
          } else {
            break label_15;
          }
          jj_consume_token(COMMA);
          n = Decl(true);
                                                                                                                    replaceName(n);
        }
        if (jj_2_24(2)) {
          n = BlockOrBar(true);
                                                                                                                                                                         replaceName(n);
        } else {
          ;
        }
                                                                                                                                                                                            {if (true) return productionEndTerminal("Expr52","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NO:
        case LONE:
        case ONE:
        case SET:
        case seq:
        case NOT:
        case SOME1:
        case STAR:
        case 79:
        case 95:
        case 96:
        case 97:
          n = UnOp(true);
                      replaceName(n);
          n = Expr(true);
                                                     replaceName(n);
                                                                       {if (true) return productionEndTerminal("Expr53","-","-","Replacement","Default",first,token);}
          break;
        case INTEGER_LITERAL:
          n = NatInteger(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("Expr54","-","-","Replacement","Default",first,token);}
          break;
        case MINUS:
          jj_consume_token(MINUS);
          n = NatInteger(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Expr55","-","-","Replacement","Default",first,token);}
          break;
        case NONE1:
          jj_consume_token(NONE1);
                 {if (true) return productionEndTerminal("Expr56","-","-","Replacement","Default",first,token);}
          break;
        case IDEN:
          jj_consume_token(IDEN);
                 {if (true) return productionEndTerminal("Expr57","-","-","Replacement","Default",first,token);}
          break;
        case UNIV:
          jj_consume_token(UNIV);
                 {if (true) return productionEndTerminal("Expr58","-","-","Replacement","Default",first,token);}
          break;
        case INTT:
          jj_consume_token(INTT);
                {if (true) return productionEndTerminal("Expr59","-","-","Replacement","Default",first,token);}
          break;
        case SEQINT:
          jj_consume_token(SEQINT);
                    {if (true) return productionEndTerminal("Expr510","-","-","Replacement","Default",first,token);}
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          n = Expr(true);
                          replaceName(n);
          jj_consume_token(RPAREN);
                                                {if (true) return productionEndTerminal("Expr511","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[49] = jj_gen;
          if (jj_2_26(3)) {
            n = Block(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("Expr512","-","-","Replacement","Default",first,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AS:
            case THIS:
            case IDENTIFIER:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case AS:
                jj_consume_token(AS);
                break;
              default:
                jj_la1[46] = jj_gen;
                ;
              }
              n = NonEmptyName(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("Expr513","-","-","Replacement","Default",first,token);}
              break;
            case LBRACE:
              jj_consume_token(LBRACE);
              n = Decl(true);
                          replaceName(n);
              label_16:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[47] = jj_gen;
                  break label_16;
                }
                jj_consume_token(COMMA);
                n = Decl(true);
                                                              replaceName(n);
              }
              n = BlockOrBar(true);
                                                                                                     replaceName(n);
              jj_consume_token(RBRACE);
                                                                                                                           {if (true) return productionEndTerminal("Expr514","-","-","Replacement","Default",first,token);}
              break;
            default:
              jj_la1[50] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NotClause(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
              {if (true) return productionEndTerminal("NotClause1","-","-","Replacement","Default",first,token);}
      break;
    case NOT:
      jj_consume_token(NOT);
                {if (true) return productionEndTerminal("NotClause2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImpliesClause(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      jj_consume_token(80);
               {if (true) return productionEndTerminal("ImpliesClause1","-","-","Replacement","Default",first,token);}
      break;
    case IMPLIES:
      jj_consume_token(IMPLIES);
                    {if (true) return productionEndTerminal("ImpliesClause2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LetDecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Name(true);
                      replaceName(n);
    jj_consume_token(81);
    n = Expr(true);
                                                         replaceName(n);
                                                                           {if (true) return productionEndTerminal("LetDecl","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Quant(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
                {if (true) return productionEndTerminal("Quant1","-","-","Replacement","Default",first,token);}
      break;
    case NO:
      jj_consume_token(NO);
               {if (true) return productionEndTerminal("Quant2","-","-","Replacement","Default",first,token);}
      break;
    case SOME1:
      jj_consume_token(SOME1);
                 {if (true) return productionEndTerminal("Quant3","-","-","Replacement","Default",first,token);}
      break;
    case LONE:
      jj_consume_token(LONE);
                 {if (true) return productionEndTerminal("Quant4","-","-","Replacement","Default",first,token);}
      break;
    case ONE:
      jj_consume_token(ONE);
                {if (true) return productionEndTerminal("Quant5","-","-","Replacement","Default",first,token);}
      break;
    case SUM:
      jj_consume_token(SUM);
                {if (true) return productionEndTerminal("Quant6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BinOp(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 82:
      jj_consume_token(82);
               {if (true) return productionEndTerminal("BinOp1","-","-","Replacement","Default",first,token);}
      break;
    case OR:
      jj_consume_token(OR);
               {if (true) return productionEndTerminal("BinOp2","-","-","Replacement","Default",first,token);}
      break;
    case 83:
      jj_consume_token(83);
               {if (true) return productionEndTerminal("BinOp3","-","-","Replacement","Default",first,token);}
      break;
    case AND1:
      jj_consume_token(AND1);
                {if (true) return productionEndTerminal("BinOp4","-","-","Replacement","Default",first,token);}
      break;
    case AND:
      jj_consume_token(AND);
              {if (true) return productionEndTerminal("BinOp5","-","-","Replacement","Default",first,token);}
      break;
    case 84:
      jj_consume_token(84);
                {if (true) return productionEndTerminal("BinOp6","-","-","Replacement","Default",first,token);}
      break;
    case IFF:
      jj_consume_token(IFF);
                {if (true) return productionEndTerminal("BinOp7","-","-","Replacement","Default",first,token);}
      break;
    case 80:
      jj_consume_token(80);
               {if (true) return productionEndTerminal("BinOp8","-","-","Replacement","Default",first,token);}
      break;
    case IMPLIES:
      jj_consume_token(IMPLIES);
                    {if (true) return productionEndTerminal("BinOp9","-","-","Replacement","Default",first,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("BinOp10","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("BinOp11","-","-","Replacement","Default",first,token);}
      break;
    case 85:
      jj_consume_token(85);
               {if (true) return productionEndTerminal("BinOp12","-","-","Replacement","Default",first,token);}
      break;
    case 86:
      jj_consume_token(86);
               {if (true) return productionEndTerminal("BinOp13","-","-","Replacement","Default",first,token);}
      break;
    case 87:
      jj_consume_token(87);
               {if (true) return productionEndTerminal("BinOp14","-","-","Replacement","Default",first,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
              {if (true) return productionEndTerminal("BinOp15","-","-","Replacement","Default",first,token);}
      break;
    case 88:
      jj_consume_token(88);
               {if (true) return productionEndTerminal("BinOp16","-","-","Replacement","Default",first,token);}
      break;
    case 89:
      jj_consume_token(89);
               {if (true) return productionEndTerminal("BinOp17","-","-","Replacement","Default",first,token);}
      break;
    case 90:
      jj_consume_token(90);
                {if (true) return productionEndTerminal("BinOp18","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrowOp(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_27(2)) {
      n = ArrowOpClause(true);
                                             replaceName(n);
    } else {
      ;
    }
    jj_consume_token(LARROW);
    if (jj_2_28(2)) {
      n = ArrowOpClause(true);
                                                                                                         replaceName(n);
    } else {
      ;
    }
                                                                                                                            {if (true) return productionEndTerminal("ArrowOp","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrowOpClause(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOME1:
      jj_consume_token(SOME1);
                 {if (true) return productionEndTerminal("ArrowOpClause1","-","-","Replacement","Default",first,token);}
      break;
    case ONE:
      jj_consume_token(ONE);
                {if (true) return productionEndTerminal("ArrowOpClause2","-","-","Replacement","Default",first,token);}
      break;
    case LONE:
      jj_consume_token(LONE);
                 {if (true) return productionEndTerminal("ArrowOpClause3","-","-","Replacement","Default",first,token);}
      break;
    case SET:
      jj_consume_token(SET);
                {if (true) return productionEndTerminal("ArrowOpClause4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CompareOp(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 81:
      jj_consume_token(81);
              {if (true) return productionEndTerminal("CompareOp1","-","-","Replacement","Default",first,token);}
      break;
    case IN:
      jj_consume_token(IN);
               {if (true) return productionEndTerminal("CompareOp2","-","-","Replacement","Default",first,token);}
      break;
    case 91:
      jj_consume_token(91);
              {if (true) return productionEndTerminal("CompareOp3","-","-","Replacement","Default",first,token);}
      break;
    case 92:
      jj_consume_token(92);
              {if (true) return productionEndTerminal("CompareOp4","-","-","Replacement","Default",first,token);}
      break;
    case 93:
      jj_consume_token(93);
               {if (true) return productionEndTerminal("CompareOp5","-","-","Replacement","Default",first,token);}
      break;
    case 94:
      jj_consume_token(94);
               {if (true) return productionEndTerminal("CompareOp6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnOp(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
              {if (true) return productionEndTerminal("UnOp1","-","-","Replacement","Default",first,token);}
      break;
    case NOT:
      jj_consume_token(NOT);
                {if (true) return productionEndTerminal("UnOp2","-","-","Replacement","Default",first,token);}
      break;
    case NO:
      jj_consume_token(NO);
               {if (true) return productionEndTerminal("UnOp3","-","-","Replacement","Default",first,token);}
      break;
    case SOME1:
      jj_consume_token(SOME1);
                 {if (true) return productionEndTerminal("UnOp4","-","-","Replacement","Default",first,token);}
      break;
    case LONE:
      jj_consume_token(LONE);
                 {if (true) return productionEndTerminal("UnOp5","-","-","Replacement","Default",first,token);}
      break;
    case ONE:
      jj_consume_token(ONE);
                {if (true) return productionEndTerminal("UnOp6","-","-","Replacement","Default",first,token);}
      break;
    case SET:
      jj_consume_token(SET);
                {if (true) return productionEndTerminal("UnOp7","-","-","Replacement","Default",first,token);}
      break;
    case seq:
      jj_consume_token(seq);
                {if (true) return productionEndTerminal("UnOp8","-","-","Replacement","Default",first,token);}
      break;
    case 95:
      jj_consume_token(95);
              {if (true) return productionEndTerminal("UnOp9","-","-","Replacement","Default",first,token);}
      break;
    case 96:
      jj_consume_token(96);
              {if (true) return productionEndTerminal("UnOp10","-","-","Replacement","Default",first,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("UnOp11","-","-","Replacement","Default",first,token);}
      break;
    case 97:
      jj_consume_token(97);
              {if (true) return productionEndTerminal("UnOp12","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Block(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTT:
      case ALL:
      case NO:
      case LONE:
      case ONE:
      case SET:
      case AS:
      case UNIV:
      case THIS:
      case SEQINT:
      case SUM:
      case seq:
      case LET:
      case NOT:
      case SOME1:
      case NONE1:
      case IDEN:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case MINUS:
      case STAR:
      case 79:
      case 95:
      case 96:
      case 97:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_17;
      }
      n = Expr(inTerminal);
                                 replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                         {if (true) return productionEndNonTerminal("Block","Block","Block");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BlockOrBar(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n = Block(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("BlockOrBar1","-","-","Replacement","Default",first,token);}
      break;
    case 98:
      jj_consume_token(98);
      n = Expr(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("BlockOrBar2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Name(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = NameClause(true);
                            replaceName(n);
    label_18:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(SLASH);
      jj_consume_token(IDENTIFIER);
    }
                                                                               {if (true) return productionEndTerminal("Name","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NameClause(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("NameClause1","-","-","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("NameClause2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[60] = jj_gen;
          {if (true) return productionEndTerminal("NameClause3","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NonEmptyName(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = NonEmptyNameClause(true);
                                    replaceName(n);
    label_19:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(SLASH);
      jj_consume_token(IDENTIFIER);
    }
                                                                                       {if (true) return productionEndTerminal("NonEmptyName","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NonEmptyNameClause(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("NonEmptyNameClause1","-","-","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("NonEmptyNameClause2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MaybeName(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case IDENTIFIER:
      n = NonEmptyName(true);
                               replaceName(n);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
                                                  {if (true) return productionEndTerminal("MaybeName","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Ref(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Name(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("Ref1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_3R_34() {
    if (jj_3R_54()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(BUT)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(SEQINT)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(INTT)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(UNIV)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(PRED)) return true;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  final private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(PRED)) return true;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(PRED)) return true;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(FUN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(FUN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(FUN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(98)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(97)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(seq)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(ONE)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(LONE)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(SOME1)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(NO)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_24()) return true;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(LONE)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(ONE)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(SOME1)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    if (jj_scan_token(LARROW)) return true;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(89)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(IMPLIES)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(IFF)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(AND1)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(ONE)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(LONE)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(SOME1)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(NO)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(81)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(IMPLIES)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_40()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(SEQINT)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(INTT)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(UNIV)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(IDEN)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(NONE1)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_127()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_42()) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_55()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_78()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  public AlloyParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[63];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0xc5020000,0x0,0x100000,0x0,0x100000,0x0,0x0,0x20000000,0x0,0x0,0xc5020000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x45000000,0x0,0x80000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x45000000,0x0,0x80000,0x0,0x0,0x0,0x20000000,0x0,0x0,0xd808000,0x20000000,0x0,0x0,0x5c00000,0x10000,0xd000000,0x80000,0xd800000,0x2dc08000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x10000000,0x4000000,0x22026ae,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0xc,0x22020a2,0x80,0x80,0x80,0x80,0x80,0x80,0x1a0,0x20,0x2002000,0x800,0x2002000,0x20,0x0,0x0,0x800,0x0,0x200080,0x0,0x1,0x0,0x1a0,0x0,0x80,0x100,0x0,0x100,0x0,0x200080,0x0,0x1,0x100000,0x8000000,0x0,0x0,0x0,0x80000,0x11b40050,0x20,0x100000,0x8000000,0x220000,0x801c000,0x200000,0x0,0x340000,0x11be0070,0x0,0x20,0x20,0x20,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x1000,0x0,0x4021,0x80,0x0,0x200,0x0,0x0,0x80,0x0,0x200,0x0,0x4021,0x0,0x0,0x0,0x0,0x0,0x0,0x4201,0x4001,0x0,0x0,0x0,0x21,0x200,0x200,0x0,0x0,0x0,0x200,0x0,0x20,0x4201,0x200,0x0,0x0,0x200,0x0,0x200,0x0,0x800,0x0,0x8000,0x10000,0x200,0x0,0x200,0x0,0x8000b008,0x21,0x8000,0x10000,0x0,0x7fd1c00,0x0,0x78020000,0x8000a000,0x8000b029,0x20,0x1,0x1,0x1,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x4,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AlloyParser(CharStream stream) {
    token_source = new AlloyParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AlloyParser(AlloyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AlloyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[99];
    for (int i = 0; i < 99; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 63; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 99; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
