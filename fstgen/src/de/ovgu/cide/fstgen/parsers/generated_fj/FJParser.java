/* Generated By:JavaCC: Do not edit this line. FJParser.java */
package de.ovgu.cide.fstgen.parsers.generated_fj;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;


public class FJParser extends AbstractFSTParser implements FJParserConstants {

  final public FSTInfo TypeDeclaration(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CLASS);
    n = Name(inTerminal);
                                    replaceName("Name", n);
                                                              replaceName(n);
    jj_consume_token(EXTENDS);
    n = ExtendedType(inTerminal);
                                                                                                                     replaceName(n);
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      n = VarDeclaration(inTerminal);
                                                                                                                                                                                      replaceName(n);
    }
    n = ClassConstructor(inTerminal);
                                                                                                                                                                                                                                         replaceName(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      n = MethodDeclaration(inTerminal);
                                                                                                                                                                                                                                                                                            replaceName(n);
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
                                                                                                                                                                                                                                                                                                                          {if (true) return productionEndNonTerminal("TypeDeclaration","{Name}","{Name}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Name(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
                                                                            {if (true) return productionEndTerminal("Name","-","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExtendedType(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("ExtendedType1","-","-","Replacement","Default",first,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
                   {if (true) return productionEndTerminal("ExtendedType2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VarDeclaration(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Type(true);
                      replaceName(n);
    t = jj_consume_token(IDENTIFIER);
                                                       replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    jj_consume_token(38);
                                                                                                               {if (true) return productionEndTerminal("VarDeclaration","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassConstructor(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Type(true);
                      replaceName("Type", n);
                                                replaceName(n);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case INT:
    case IDENTIFIER:
      n = FormalParameterList(true);
                                                                                                   replaceName(n);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    jj_consume_token(SUPER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      n = ExpressionList(true);
                                                                                                                                                                  replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(38);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      n = FieldAssign(true);
                                                                                                                                                                                                                  replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                                                                                                                                                                                          {if (true) return productionEndTerminal("ClassConstructor","{Type}","{Type}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FieldAssign(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THIS);
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(39);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(38);
                                                      {if (true) return productionEndTerminal("FieldAssign","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MethodDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Type(true);
                      replaceName(n);
    t = jj_consume_token(IDENTIFIER);
                                                       replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case INT:
    case IDENTIFIER:
      n = FormalParameterList(true);
                                                                                                                                            replaceName(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    jj_consume_token(RETURN);
    n = Expression(true);
                                                                                                                                                                                                   replaceName(n);
    jj_consume_token(38);
    jj_consume_token(RBRACE);
                                                                                                                                                                                                                             {if (true) return productionEndTerminal("MethodDeclaration","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BinaryOperator(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("BinaryOperator1","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("BinaryOperator2","-","-","Replacement","Default",first,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("BinaryOperator3","-","-","Replacement","Default",first,token);}
      break;
    case SLASH:
      jj_consume_token(SLASH);
              {if (true) return productionEndTerminal("BinaryOperator4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParameterList(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = FormalParameter(true);
                                 replaceName(n);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      n = FormalParameterRest(true);
                                                                                replaceName(n);
    }
                                                                                                    {if (true) return productionEndTerminal("FormalParameterList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParameter(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Type(true);
                      replaceName(n);
    jj_consume_token(IDENTIFIER);
                                                     {if (true) return productionEndTerminal("FormalParameter","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParameterRest(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    n = FormalParameter(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("FormalParameterRest","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Type(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                {if (true) return productionEndTerminal("Type1","-","{<IDENTIFIER>}","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
                                                                            {if (true) return productionEndTerminal("Type2","-","{<IDENTIFIER>}","Replacement","Default",first,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
                   {if (true) return productionEndTerminal("Type3","-","{<IDENTIFIER>}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expression(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Term(true);
                      replaceName(n);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      n = PlusOrMinus(true);
                                                             replaceName(n);
    }
                                                                                 {if (true) return productionEndTerminal("Expression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PlusOrMinus(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n = PlusExpressionRest(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("PlusOrMinus1","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      n = MinusExpressionRest(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("PlusOrMinus2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PlusExpressionRest(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(PLUS);
    n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("PlusExpressionRest","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MinusExpressionRest(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MINUS);
    n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("MinusExpressionRest","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = PrimaryExpression(true);
                                   replaceName(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      n = TimesOrDivide(true);
                                                                            replaceName(n);
    }
                                                                                                {if (true) return productionEndTerminal("Term","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TimesOrDivide(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      n = TimesExpressionRest(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("TimesOrDivide1","-","-","Replacement","Default",first,token);}
      break;
    case SLASH:
      n = DivideExpressionRest(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("TimesOrDivide2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TimesExpressionRest(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STAR);
    n = PrimaryExpression(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("TimesExpressionRest","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DivideExpressionRest(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SLASH);
    n = PrimaryExpression(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("DivideExpressionRest","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PrimaryExpression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
                           {if (true) return productionEndTerminal("PrimaryExpression1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_2(2147483647)) {
        n = MethodInvoke(true);
                                                    replaceName(n);
                                                                      {if (true) return productionEndTerminal("PrimaryExpression2","-","-","Replacement","Default",first,token);}
      } else if (jj_2_3(2147483647)) {
        n = FieldInvoke(true);
                                                   replaceName(n);
                                                                     {if (true) return productionEndTerminal("PrimaryExpression3","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("PrimaryExpression4","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[14] = jj_gen;
          if (jj_2_4(2147483647)) {
            n = AllocationExpression(true);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("PrimaryExpression5","-","-","Replacement","Default",first,token);}
          } else if (jj_2_5(2147483647)) {
            n = CastExpression(true);
                                                      replaceName(n);
                                                                        {if (true) return productionEndTerminal("PrimaryExpression6","-","-","Replacement","Default",first,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              n = NestedExpression(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("PrimaryExpression7","-","-","Replacement","Default",first,token);}
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MethodInvoke(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = InvokeTarget(true);
                              replaceName(n);
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      n = ExpressionList(true);
                                                                                             replaceName(n);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                                    {if (true) return productionEndTerminal("MethodInvoke","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FieldInvoke(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = InvokeTarget(true);
                              replaceName(n);
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
                                                                 {if (true) return productionEndTerminal("FieldInvoke","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo InvokeTarget(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      n = AllocationExpression(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("InvokeTarget1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      n = NestedExpression(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("InvokeTarget2","-","-","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("InvokeTarget3","-","-","Replacement","Default",first,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("InvokeTarget4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AllocationExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NEW);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      n = ExpressionList(true);
                                                        replaceName(n);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                               {if (true) return productionEndTerminal("AllocationExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CastExpression(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    n = Type(true);
                          replaceName(n);
    jj_consume_token(RPAREN);
    n = PrimaryExpression(true);
                                                                          replaceName(n);
                                                                                            {if (true) return productionEndTerminal("CastExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NestedExpression(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                replaceName(n);
    jj_consume_token(RPAREN);
                                                      {if (true) return productionEndTerminal("NestedExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExpressionList(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expression(true);
                            replaceName(n);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      n = Expression(true);
                                                                      replaceName(n);
    }
                                                                                          {if (true) return productionEndTerminal("ExpressionList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  public FJParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2024000,0x2004000,0x2024000,0x12242000,0x2000,0x2024000,0x0,0x0,0x2024000,0x0,0x0,0x0,0x0,0x200000,0x2000000,0x10000000,0x12242000,0x12042000,0x12242000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x1,0x0,0xc,0xc,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FJParser(CharStream stream) {
    token_source = new FJParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FJParser(FJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[40];
    for (int i = 0; i < 40; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
