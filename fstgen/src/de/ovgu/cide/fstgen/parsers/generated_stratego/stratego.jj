options {
	STATIC = false;
	DEBUG_PARSER = false;
}

PARSER_BEGIN(StrategoParser)
package de.ovgu.cide.fstgen.parsers.generated_stratego;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser 
{
	public StrategoParser(){}
}

PARSER_END(StrategoParser)

/*****************************************************************************
 * WHITE SPACE                                                               *
 *****************************************************************************/
SPECIAL_TOKEN : 
	{ " " | "\t" | "\n" | "\r" | "\f" }
/*****************************************************************************
 * COMMENTS                                                                  *
 *****************************************************************************/
MORE :
	{ "//" : IN_SINGLE_LINE_COMMENT |
	  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT |
	  "/*" : IN_MULTI_LINE_COMMENT 
	}
	<IN_SINGLE_LINE_COMMENT>
		SPECIAL_TOKEN :
			{ <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT }
	<IN_FORMAL_COMMENT>
		SPECIAL_TOKEN :
			{ <FORMAL_COMMENT: "*/" > : DEFAULT }
	<IN_MULTI_LINE_COMMENT>
		SPECIAL_TOKEN :
			{ <MULTI_LINE_COMMENT: "*/" > : DEFAULT }
	<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
		MORE :
			{ < ~[] > }
/*****************************************************************************
 * RESERVED KEYWORDS AND LITERALS                                            *
 *****************************************************************************/
/*****************************************************************************
 * MODULE DECLARATION                                                        *
 *****************************************************************************/
TOKEN :
	{ < MODULE: "module" > |
	  < SPECIFICATION: "specification" > |
	  < IMPORTS: "imports" >
	}
/*****************************************************************************
 * GRAMMAR DECLARATION                                                       *
 *****************************************************************************/
TOKEN :
	{ < SORTS: "sorts" > }
/*****************************************************************************
 * DISAMBIGUATION DECLARATION                                                *
 *****************************************************************************/
TOKEN :
	{ < LEFT: "left" > |
	  < ASSOC: "assoc" > |
	  < AVOID: "avoid" > |
	  < RIGHT: "right" > |
	  < PREFER: "prefer" > |
	  < BRACKET: "bracket" > |
	  < REJECT: "reject" > |
	  < NONASSOC: "non-assoc" > |
	  < RECOVER: "recover" > |
	  < DEPRECATED: "deprecated" > | 
	  < INDENTPADDING: "indentpadding" >
	}
/*****************************************************************************
 * TRANSFORMATION DECLARATION                                                *
 *****************************************************************************/
TOKEN :
	{ < ALL: "all" > | 
	  < CONSTRUCTORS: "constructors" > | 
	  < FAIL: "fail" > |
	  < ID: "id" > | 
	  < IN: "in" > | 
	  < LET: "let" > |
	  < NOT: "not" > | 
	  < ONE: "one" > |
	  < DEPENDS: "depends" > |
	  < ON: "on" > |
	  < CALL: "call" > |
	  < PROCEED: "proceed" > |
	  < SIGNATURES: "signatures" > |
	  < WITH: "with" > |
	  < OVERLAYS: "overlays" > | 
	  < PRIM: "prim" > |
	  < RULES: "rules" > | 
	  < SIGNATURE: "signature" > | 
	  < SOME: "some" > |
	  < STRATEGIES: "strategies" > | 
	  < STRATEGO: "stratego" > | 
	  < TEST: "test" > | 
	  < WHERE: "where" > | 
	  < IMPORTTERM: "import-term" > | 
	  < CASE: "case" > |
	  < ELSE: "else" > | 
	  < END: "end" > | 
	  < EXTERNAL: "external" > | 
	  < IF: "if" > |
	  < OTHERWISE: "otherwise" > | 
	  < REC: "rec" > | 
	  < SWITCH: "switch" > | 
	  < THEN: "then" > | 
	  < EXTEND: "extend" > | 
	  < OVERRIDE: "override" > |
	  < INTERNAL: "internal" > | 
	  < SEALED: "sealed" > | 
	  < EXTENSIBLE: "extensible" > |
	  < OVERRIDABLE: "overrideable" > 
	}
/*****************************************************************************
 * LITERALS                                                                  *
 *****************************************************************************/
TOKEN :
	{ < INTEGER_LITERAL:
		<DECIMAL_LITERAL> (["l","L"])? | 
	  	<HEX_LITERAL> (["l","L"])? | 
	  	<OCTAL_LITERAL> (["l","L"])? > |
	  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
	  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > |
	  < #OCTAL_LITERAL: "0" (["0"-"7"])* > |
	  < FLOATING_POINT_LITERAL:
    	(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | 
    	"." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | 
    	(["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | 
    	(["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] > |
	  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
	  < CHARACTER_LITERAL:
	  	"'" ( (~["'","\\","\n","\r"]) | 
			("\\"
				( ["n","t","b","r","f","u","\\","'","\""] | 
				  ["0"-"7"] ( ["0"-"7"] )? | 
				  ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) ) "'" > |
	  < STRING_LITERAL:
    	"\"" ( (~["\"","\\"]) | 
			 ("\\"
				( ["n","t","b","r","f","u","\\","'","\""] | 
				  ["0"-"7"] ( ["0"-"7"] )? | 
				  ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
	}
/*****************************************************************************
 * STRING QUOTATIONS                                                         *
 *****************************************************************************/
/*****************************************************************************
 * BRACKET                                                                   *
 *****************************************************************************/
<DEFAULT> TOKEN :
	{ < STRING_QUOT_BRACKET: 
	  "$""[" > : SQBRACKETS1 
	}
	<SQBRACKETS1>
		SPECIAL_TOKEN :
			{ <SQBRACKETEND: "]" > : DEFAULT }
	<SQBRACKETS1>
		SPECIAL_TOKEN :
			{ <IN1SQBRACKET: "[" > : SQBRACKETS2 }
	<SQBRACKETS2>
		SPECIAL_TOKEN :
			{ <IN1SQBRACKETEND: "]" > : SQBRACKETS1 }
	<SQBRACKETS2>
		SPECIAL_TOKEN :
			{ <IN2SQBRACKET: "[" > : SQBRACKETS3 }
	<SQBRACKETS3>
		SPECIAL_TOKEN :
			{ <IN2SQBRACKETEND: "]" > : SQBRACKETS2 }
	<SQBRACKETS3>
		SPECIAL_TOKEN :
			{ <IN3SQBRACKET: "[" > : SQBRACKETS4 }
	<SQBRACKETS4>
		SPECIAL_TOKEN :
			{ <IN3SQBRACKETEND: "]" > : SQBRACKETS3 }
	<SQBRACKETS4>
		SPECIAL_TOKEN :
			{ <IN4SQBRACKET: "[" > : SQBRACKETS5 }
	<SQBRACKETS5>
		SPECIAL_TOKEN :
			{ <IN4SQBRACKETEND: "]" > : SQBRACKETS4 }
	<SQBRACKETS5>
		SPECIAL_TOKEN :
			{ <IN5SQBRACKET: "[" > : SQBRACKETS6 }
	<SQBRACKETS6>
		SPECIAL_TOKEN :
			{ <IN5SQBRACKETEND: "]" > : SQBRACKETS5 }
	<SQBRACKETS1> 
		MORE: 
			{ < ~[] > }
	<SQBRACKETS2>
		MORE:
			{ < ~[] > }
	<SQBRACKETS3>
		MORE:
			{ < ~[] > }
	<SQBRACKETS4>
		MORE:
			{ < ~[] > }
	<SQBRACKETS5>
		MORE:
			{ < ~[] > }
	<SQBRACKETS6>
		MORE:
			{ < ~[] > }
/*****************************************************************************
 * BRACE                                                                     *
 *****************************************************************************/
<DEFAULT> TOKEN :
	{ < STRING_QUOT_BRACE: 
	  "$""{" > : SQBRACES1 
	}
	<SQBRACES1>
		SPECIAL_TOKEN :
			{ <SQBRACEEND: "}" > : DEFAULT }
	<SQBRACES1>
		SPECIAL_TOKEN :
			{ <IN1SQBRACE: "{" > : SQBRACES2 }
	<SQBRACES2>
		SPECIAL_TOKEN :
			{ <IN1SQBRACEEND: "}" > : SQBRACES1 }
	<SQBRACES2>
		SPECIAL_TOKEN :
			{ <IN2SQBRACE: "{" > : SQBRACES3 }
	<SQBRACES3>
		SPECIAL_TOKEN :
			{ <IN2SQBRACEEND: "}" > : SQBRACES2 }
	<SQBRACES3>
		SPECIAL_TOKEN :
			{ <IN3SQBRACE: "{" > : SQBRACES4 }
	<SQBRACES4>
		SPECIAL_TOKEN :
			{ <IN3SQBRACEEND: "}" > : SQBRACES3 }
	<SQBRACES4>
		SPECIAL_TOKEN :
			{ <IN4SQBRACE: "{" > : SQBRACES5 }
	<SQBRACES5>
		SPECIAL_TOKEN :
			{ <IN4SQBRACEEND: "}" > : SQBRACES4 }
	<SQBRACES5>
		SPECIAL_TOKEN :
			{ <IN5SQBRACE: "{" > : SQBRACES6 }
	<SQBRACES6>
		SPECIAL_TOKEN :
			{ <IN5SQBRACEEND: "}" > : SQBRACES5 }
	<SQBRACES1> 
		MORE: 
			{ < ~[] > }
	<SQBRACES2>
		MORE:
			{ < ~[] > }
	<SQBRACES3>
		MORE:
			{ < ~[] > }
	<SQBRACES4>
		MORE:
			{ < ~[] > }
	<SQBRACES5>
		MORE:
			{ < ~[] > }
	<SQBRACES6>
		MORE:
			{ < ~[] > }
/*****************************************************************************
 * IDENTIFIER                                                                *
 *****************************************************************************/
TOKEN :
	{ < IDENTIFIER: (<LETTER>|<DIGIT>|<LOWLINE>|<APOSTROPHE>) 
	  (<LETTER>|<DIGIT>|<MINUS>|<DOT>|<LOWLINE>|<APOSTROPHE>)* (<STAR>)? > |
	  < LETTER: (<LCCHAR>|<UCCHAR>) > |
	  < LCCHAR: [ "a"-"z" ] > |
	  < UCCHAR: [ "A"-"Z" ] > |
	  < DIGIT: [ "0"-"9" ] >
	}
/*****************************************************************************
 * PARENTHESIS                                                               *
 *****************************************************************************/
TOKEN :
	{ < LPAREN: "(" > | 
	  < RPAREN: ")" > | 
	  < LBRACE: "{" > | 
	  < RBRACE: "}" > | 
	  < LBRACKET: "[" > |
	  < RBRACKET: "]" > |
	  < LT: "<" > |
	  < GT: ">" > 
	}
/*****************************************************************************
 * OPERATORS                                                                 *
 *****************************************************************************/
TOKEN :
	{ < PLUS: "+" > |
	  < MINUS: "-" > |
	  < STAR: "*" > |
	  < SLASH: "/" >
	}
/*****************************************************************************
 * SEPARATORS                                                                *
 *****************************************************************************/
TOKEN :
	{ < COMMA: "," > |
	  < SEMICOLON: ";" > |
	  < DDOT: ":" > |
	  < DOT: "." > |
	  < QUESTIONMARK: "?" > |
	  < EXCLAMATIONMARK: "!" >
	}
/*****************************************************************************
 * SPECIAL SIGNS                                                             *
 *****************************************************************************/
TOKEN :
	{ < NUMBERSIGN: "#" > |
	  < AT: "@" > |
	  < DOLLAR: "$" > |
	  < VERTICALLINE: "|" > |
	  < TILDE: "~" > |
	  < AMPERSAND: "&" > |
	  < PERCENTAGE: "%" > |
	  < CIRCUMFLEXACCENT: "^" > |
	  < GRAVEACCENT: "`" > |
	  < APOSTROPHE: "'" > |
	  < ARROW: "->" > |
	  < ASSIGN: "=" > |
	  < LOWLINE: "_" > |
	  < QUOTATIONMARK: "\"" > |
	  < BACKSLASH: "\\" >
	}
FSTInfo NatInteger(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> {return productionEndTerminal("NatInteger","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Int(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<MINUS>] n=NatInteger(true){ replaceName(n);} {return productionEndTerminal("Int","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RealDigit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> "." <INTEGER_LITERAL> {return productionEndTerminal("RealDigit","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Real(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<MINUS>] n=RealDigit(true){ replaceName(n);} {return productionEndTerminal("Real","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo String(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<STRING_LITERAL> {return productionEndTerminal("String","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Char(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CHARACTER_LITERAL> {return productionEndTerminal("Char","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StringQuotBracket(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<STRING_QUOT_BRACKET> {return productionEndTerminal("StringQuotBracket","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StringQuotBrace(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<STRING_QUOT_BRACE> {return productionEndTerminal("StringQuotBrace","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Id(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} {return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}

 )  }

FSTInfo Module(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ModuleDeclaration(inTerminal){ replaceName("ModuleDeclaration", n);}{ replaceName(n);} [n=ImportDeclaration(inTerminal){ replaceName(n);}] (n=Declaration(inTerminal){ replaceName(n);})* <EOF> {return productionEndNonTerminal("Module","{ModuleDeclaration}","{ModuleDeclaration}");}

 )  }

FSTInfo ModName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} (LOOKAHEAD(2) "/" n=Id(true){ replaceName("Id", n);}{ replaceName(n);})* {return productionEndTerminal("ModName","{Id}","{Id}","Replacement","Default",first,token);}

 )  }

FSTInfo ModuleDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"module" n=ModName(true){ replaceName("ModName", n);}{ replaceName(n);} {return productionEndTerminal("ModuleDeclaration1","{ModName}","{ModName}","Replacement","Default",first,token);}
 |
	"specification"  {return productionEndTerminal("ModuleDeclaration2","specification","specification","Replacement","Default",first,token);}

 )  }

FSTInfo ImportDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"imports" (n=ModName(inTerminal){ replaceName(n);})+ {return productionEndNonTerminal("ImportDeclaration","imports","imports");}

 )  }

FSTInfo Declaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"rules" (n=Definition(inTerminal){ replaceName(n);})+ {return productionEndNonTerminal("Declaration1","rules","rules");}
 |
	"strategies" (n=Definition(inTerminal){ replaceName(n);})+ {return productionEndNonTerminal("Declaration2","strategies","strategies");}
 |
	"signature" (n=SigDeclaration(inTerminal){ replaceName(n);})+ {return productionEndNonTerminal("Declaration3","signature","signature");}
 |
	"signatures" (n=SigDeclaration(inTerminal){ replaceName(n);})+ {return productionEndNonTerminal("Declaration4","signatures","signatures");}
 |
	"overlays" (n=Overlay(inTerminal){ replaceName(n);})+ {return productionEndNonTerminal("Declaration5","overlays","overlays");}

 )  }

FSTInfo Overlay(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} [n=OptOverlay(true){ replaceName(n);}] "=" n=Term(true){ replaceName(n);} {return productionEndTerminal("Overlay","{Id}","{Id}","Replacement","Default",first,token);}

 )  }

FSTInfo OptOverlay(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=IdList(true){ replaceName(n);}] ")" {return productionEndTerminal("OptOverlay","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SigDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"sorts" (n=TrafoSort(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("SigDeclaration1","sorts","sorts");}
 |
	"constructors" (n=OpDeclaration(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("SigDeclaration2","constructors","constructors");}

 )  }

FSTInfo TrafoSort(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BracketSort(true){ replaceName("BracketSort", n);}{ replaceName(n);} {return productionEndTerminal("TrafoSort1","{BracketSort}","{BracketSort}","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} [LOOKAHEAD("(" [TrafoSortList()] ")") n=OptSort1(true){ replaceName(n);}] {return productionEndTerminal("TrafoSort2","{Id}","{Id}","Replacement","Default",first,token);}

 )  }

FSTInfo OptSort1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=TrafoSortList(true){ replaceName(n);}] ")" {return productionEndTerminal("OptSort1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BracketSort(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[" [n=TrafoSortList(true){ replaceName(n);}] [n=OptSort2(true){ replaceName(n);}] "]" {return productionEndTerminal("BracketSort1","-","-","Replacement","Default",first,token);}
 |
	n=OptSort1(true){ replaceName(n);} {return productionEndTerminal("BracketSort2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptSort2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=TrafoSort(true){ replaceName(n);} {return productionEndTerminal("OptSort2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OpDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=OptOpDecl1(true){ replaceName(n);}] [n=OptOpDecl2(true){ replaceName(n);}] ":" n=Type(true){ replaceName(n);} {return productionEndTerminal("OpDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptOpDecl1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"external"  {return productionEndTerminal("OptOpDecl1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptOpDecl2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} {return productionEndTerminal("OptOpDecl21","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} {return productionEndTerminal("OptOpDecl22","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Definition(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Anno(true){ replaceName(n);})* n=Def(true){ replaceName("Def", n);}{ replaceName(n);} {return productionEndTerminal("Definition","{Def}","{Def}","Replacement","Default",first,token);}

 )  }

FSTInfo Anno(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extend"  {return productionEndTerminal("Anno1","-","-","Replacement","Default",first,token);}
 |
	"override"  {return productionEndTerminal("Anno2","-","-","Replacement","Default",first,token);}
 |
	"internal"  {return productionEndTerminal("Anno3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Def(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Id() [OptDef1()] ":") n=RuleDef(true){ replaceName(n);} {return productionEndTerminal("Def1","{AUTO}","{AUTO}","Replacement","Default",first,token);}
 |
	n=StrategyDef(true){ replaceName("StrategyDef", n);}{ replaceName(n);} {return productionEndTerminal("Def2","-","{StrategyDef}","Replacement","Default",first,token);}

 )  }

FSTInfo RuleDef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=OptDef1(true){ replaceName(n);}] ":" n=Rule(true){ replaceName(n);} {return productionEndTerminal("RuleDef","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptDef1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=TypedIdList(true){ replaceName(n);}] [n=OptDef2(true){ replaceName(n);}] ")" {return productionEndTerminal("OptDef1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptDef2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" [n=TypedIdList(true){ replaceName(n);}] {return productionEndTerminal("OptDef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Rule(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Term(true){ replaceName(n);} "->" n=Term(true){ replaceName(n);} (n=RuleCond(true){ replaceName(n);})* {return productionEndTerminal("Rule","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleCond(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"where" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("RuleCond1","-","-","Replacement","Default",first,token);}
 |
	"with" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("RuleCond2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StrategyDef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"external" [n=Id(inTerminal){ replaceName(n);}] "(" [n=TypedIdList(inTerminal){ replaceName(n);}] "|" [n=TypedIdList(inTerminal){ replaceName(n);}] ")" ["=" n=Strategy(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("StrategyDef1","external","external");}
 |
	n=Id(true){ replaceName(n);} [n=OptDef1(true){ replaceName(n);}] "=" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("StrategyDef2","{AUTO}","{AUTO}","Replacement","Default",first,token);}

 )  }

FSTInfo Strategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"if" n=Strategy(true){ replaceName(n);} "then" n=Strategy(true){ replaceName(n);} ["else" n=Strategy(true){ replaceName(n);}] "end" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy1","-","-","Replacement","Default",first,token);}
 |
	"switch" n=Strategy(true){ replaceName(n);} (n=SwitchCase(true){ replaceName(n);})* ["otherwise" ":" n=Strategy(true){ replaceName(n);}] "end" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy2","-","-","Replacement","Default",first,token);}
 |
	"let" (n=Definition(true){ replaceName(n);})* "in" n=Strategy(true){ replaceName(n);} "end" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy3","-","-","Replacement","Default",first,token);}
 |
	"call" "(" n=Term(true){ replaceName(n);} "|" [n=StrategyList(true){ replaceName(n);}] "|" [n=TermList(true){ replaceName(n);}] ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy4","-","-","Replacement","Default",first,token);}
 |
	"proceed" [n=OptStrategy(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy5","-","-","Replacement","Default",first,token);}
 |
	"fail"  [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy6","-","-","Replacement","Default",first,token);}
 |
	"id"  [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy7","-","-","Replacement","Default",first,token);}
 |
	"?" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy8","-","-","Replacement","Default",first,token);}
 |
	"!" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy9","-","-","Replacement","Default",first,token);}
 |
	"rec" n=Id(true){ replaceName(n);} "(" n=Strategy(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy10","-","-","Replacement","Default",first,token);}
 |
	"import-term" "(" n=ModName(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy11","-","-","Replacement","Default",first,token);}
 |
	"\\" n=Rule(true){ replaceName(n);} "\\" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy12","-","-","Replacement","Default",first,token);}
 |
	"{|" n=ScopeLabels(true){ replaceName(n);} ":" n=Strategy(true){ replaceName(n);} "|}" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy13","-","-","Replacement","Default",first,token);}
 |
	"rules" "(" (n=DynRuleDef(true){ replaceName(n);})* ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy14","-","-","Replacement","Default",first,token);}
 |
	n=Strat(true){ replaceName(n);} "(" n=Strategy(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy15","-","-","Replacement","Default",first,token);}
 |
	"prim" "(" n=String(true){ replaceName(n);} [n=OptPrimStrategy(true){ replaceName(n);}] ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy16","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Term() ":=") n=Term(true){ replaceName(n);} ":=" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy17","-","-","Replacement","Default",first,token);}
 |
	"(" n=OptRuleOrStrategy(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy18","-","-","Replacement","Default",first,token);}
 |
	n=StrategyCurly(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy19","-","-","Replacement","Default",first,token);}
 |
	n=StrategyAngle(true){ replaceName(n);} n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy20","-","-","Replacement","Default",first,token);}
 |
	"[" [n=StrategyList(true){ replaceName(n);}] ["|" n=Strategy(true){ replaceName(n);}] "]" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy21","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} [n=OptStrategy(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy22","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} [n=OptStrategy(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy23","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Real()) n=Real(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy24","-","-","Replacement","Default",first,token);}
 |
	n=Int(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy25","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Strat(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"some"  {return productionEndTerminal("Strat1","-","-","Replacement","Default",first,token);}
 |
	"one"  {return productionEndTerminal("Strat2","-","-","Replacement","Default",first,token);}
 |
	"all"  {return productionEndTerminal("Strat3","-","-","Replacement","Default",first,token);}
 |
	"not"  {return productionEndTerminal("Strat4","-","-","Replacement","Default",first,token);}
 |
	"where"  {return productionEndTerminal("Strat5","-","-","Replacement","Default",first,token);}
 |
	"with"  {return productionEndTerminal("Strat6","-","-","Replacement","Default",first,token);}
 |
	"test"  {return productionEndTerminal("Strat7","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeStrategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AlternativeOperator(true){ replaceName(n);} n=Strategy(true){ replaceName(n);} {return productionEndTerminal("AlternativeStrategy1","-","-","Replacement","Default",first,token);}
 |
	"=>" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("AlternativeStrategy2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("AlternativeOperator1","-","-","Replacement","Default",first,token);}
 |
	"+"  {return productionEndTerminal("AlternativeOperator2","-","-","Replacement","Default",first,token);}
 |
	"<+"  {return productionEndTerminal("AlternativeOperator3","-","-","Replacement","Default",first,token);}
 |
	"+>"  {return productionEndTerminal("AlternativeOperator4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptPrimStrategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," [LOOKAHEAD(StrategyList() "|") n=StrategyList(true){ replaceName(n);} "|"] [n=TermList(true){ replaceName(n);}] {return productionEndTerminal("OptPrimStrategy","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleOrStrategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Term() "->") n=Rule(true){ replaceName(n);} {return productionEndTerminal("OptRuleOrStrategy1","-","-","Replacement","Default",first,token);}
 |
	[n=StrategyList(true){ replaceName(n);}] {return productionEndTerminal("OptRuleOrStrategy2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StrategyCurly(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [LOOKAHEAD([IdList()] ":") n=OptStrategyCurly(true){ replaceName(n);}] n=Strategy(true){ replaceName(n);} "}" {return productionEndTerminal("StrategyCurly","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptStrategyCurly(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=IdList(true){ replaceName(n);}] ":" {return productionEndTerminal("OptStrategyCurly","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StrategyAngle(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=Strategy(true){ replaceName(n);} ">" {return productionEndTerminal("StrategyAngle","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptStrategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=StrategyList(true){ replaceName(n);}] [n=OptTerm(true){ replaceName(n);}] ")" {return productionEndTerminal("OptStrategy","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" [n=TermList(true){ replaceName(n);}] {return productionEndTerminal("OptTerm","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SwitchCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"case" n=Strategy(true){ replaceName(n);} ":" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("SwitchCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ScopeLabels(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~" n=Term(true){ replaceName(n);} {return productionEndTerminal("ScopeLabels1","-","-","Replacement","Default",first,token);}
 |
	[n=DynRuleScopedIdList(true){ replaceName(n);}] {return productionEndTerminal("ScopeLabels2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleScopeId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Id(true){ replaceName(n);} "." n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleScopeId1","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} {return productionEndTerminal("DynRuleScopeId2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleDef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(RuleDec() [OptRuleDec3()] ":" Rule() "depends") n=DynRuleId(true){ replaceName(n);} ":" n=Rule(true){ replaceName(n);} "depends" "on" n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(RuleDec() [OptRuleDec3()] ":") n=DynRuleId(true){ replaceName(n);} ":" n=RuleOrTerm(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(RuleDec() [OptRuleDec3()] ":+") n=DynRuleId(true){ replaceName(n);} ":+" n=Rule(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(RuleDec() [OptRuleDec3()] TermOperator()) n=DynRuleId(true){ replaceName(n);} n=TermOperator(true){ replaceName(n);} n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef4","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} "+" n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleOrTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Term() "->") n=Rule(true){ replaceName(n);} {return productionEndTerminal("RuleOrTerm1","-","-","Replacement","Default",first,token);}
 |
	n=Term(true){ replaceName(n);} {return productionEndTerminal("RuleOrTerm2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RuleDec(true){ replaceName(n);} [n=OptRuleDec3(true){ replaceName(n);}] {return productionEndTerminal("DynRuleId","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleDec(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=OptRuleDec1(true){ replaceName(n);}] {return productionEndTerminal("RuleDec","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleDec1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=TypedIdList(true){ replaceName(n);}] [n=OptRuleDec2(true){ replaceName(n);}] ")" {return productionEndTerminal("OptRuleDec1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleDec2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" [n=TypedIdList(true){ replaceName(n);}] {return productionEndTerminal("OptRuleDec2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleDec3(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RuleDecOperator(true){ replaceName(n);} n=Term(true){ replaceName(n);} {return productionEndTerminal("OptRuleDec3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleDecOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("RuleDecOperator1","-","-","Replacement","Default",first,token);}
 |
	"."  {return productionEndTerminal("RuleDecOperator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TermOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":-"  {return productionEndTerminal("TermOperator1","-","-","Replacement","Default",first,token);}
 |
	":="  {return productionEndTerminal("TermOperator2","-","-","Replacement","Default",first,token);}
 |
	":+="  {return productionEndTerminal("TermOperator3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleNames(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~" n=Term(true){ replaceName(n);} {return productionEndTerminal("RuleNames1","-","-","Replacement","Default",first,token);}
 |
	[n=IdList(true){ replaceName(n);}] {return productionEndTerminal("RuleNames2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypedId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [":" n=Type(true){ replaceName(n);}] {return productionEndTerminal("TypedId","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(FunType()) n=FunType(true){ replaceName(n);} {return productionEndTerminal("Type1","-","-","Replacement","Default",first,token);}
 |
	n=TrafoSort(true){ replaceName(n);} {return productionEndTerminal("Type2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo FunType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArgType(true){ replaceName(n);} (LOOKAHEAD(2) "*" n=ArgType(true){ replaceName(n);})* "->" n=Type(true){ replaceName(n);} {return productionEndTerminal("FunType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArgType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(TrafoSort()) n=TrafoSort(true){ replaceName(n);} {return productionEndTerminal("ArgType1","-","-","Replacement","Default",first,token);}
 |
	"(" n=Type(true){ replaceName(n);} ")" {return productionEndTerminal("ArgType2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{^" n=Term(true){ replaceName(n);} "}" {return productionEndTerminal("AlternativeTerm1","-","-","Replacement","Default",first,token);}
 |
	"{" [n=TermList(true){ replaceName(n);}] "}" {return productionEndTerminal("AlternativeTerm2","-","-","Replacement","Default",first,token);}
 |
	"#" "(" n=Term(true){ replaceName(n);} ")" {return productionEndTerminal("AlternativeTerm3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Term(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"_" [LOOKAHEAD(Term()) n=Term(true){ replaceName(n);}] [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Real()) n=Real(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term2","-","-","Replacement","Default",first,token);}
 |
	n=Int(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term3","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} [LOOKAHEAD(OptStringTerm()) n=OptStringTerm(true){ replaceName(n);}] [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term4","-","-","Replacement","Default",first,token);}
 |
	"(" [n=TermList(true){ replaceName(n);}] ")" [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term5","-","-","Replacement","Default",first,token);}
 |
	"[" [n=TermList(true){ replaceName(n);}] ["|" n=Term(true){ replaceName(n);}] "]" [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term6","-","-","Replacement","Default",first,token);}
 |
	"{" [n=TermList(true){ replaceName(n);}] "}" [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term7","-","-","Replacement","Default",first,token);}
 |
	"#" "(" n=Term(true){ replaceName(n);} ")" [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term8","-","-","Replacement","Default",first,token);}
 |
	n=StringQuotBracket(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term9","-","-","Replacement","Default",first,token);}
 |
	n=StringQuotBrace(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term10","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} [LOOKAHEAD(2) n=OptIdTerm(true){ replaceName(n);}] [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term11","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() Id() ":") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term12","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() Id() ":=") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term13","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() Id() "=") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term14","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "where") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term15","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "with") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term16","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "strategies") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term17","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "rules") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term18","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() ")") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term19","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "]") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term20","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "}") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term21","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() ",") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term22","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() ";") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term23","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "|") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term24","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "|}") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term25","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "end") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term26","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() "then") n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term27","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(StrategyAngle() <EOF>) n=NoTermAfterStrategyAngle(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term28","-","-","Replacement","Default",first,token);}
 |
	n=StrategyAngle(true){ replaceName(n);} n=Term(true){ replaceName(n);} [n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term29","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NoTermAfterStrategyAngle(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StrategyAngle(true){ replaceName(n);} {return productionEndTerminal("NoTermAfterStrategyAngle","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptIdTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" "[" (n=OptTerms(true){ replaceName(n);})* "]" "|" {return productionEndTerminal("OptIdTerm1","-","-","Replacement","Default",first,token);}
 |
	"(" [n=TermList(true){ replaceName(n);}] ")" {return productionEndTerminal("OptIdTerm2","-","-","Replacement","Default",first,token);}
 |
	"@" n=Term(true){ replaceName(n);} {return productionEndTerminal("OptIdTerm3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptTerms(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Id(true){ replaceName(n);} {return productionEndTerminal("OptTerms1","-","-","Replacement","Default",first,token);}
 |
	":"  {return productionEndTerminal("OptTerms2","-","-","Replacement","Default",first,token);}
 |
	"="  {return productionEndTerminal("OptTerms3","-","-","Replacement","Default",first,token);}
 |
	"("  {return productionEndTerminal("OptTerms4","-","-","Replacement","Default",first,token);}
 |
	")"  {return productionEndTerminal("OptTerms5","-","-","Replacement","Default",first,token);}
 |
	"*"  {return productionEndTerminal("OptTerms6","-","-","Replacement","Default",first,token);}
 |
	"{"  {return productionEndTerminal("OptTerms7","-","-","Replacement","Default",first,token);}
 |
	"}"  {return productionEndTerminal("OptTerms8","-","-","Replacement","Default",first,token);}
 |
	";"  {return productionEndTerminal("OptTerms9","-","-","Replacement","Default",first,token);}
 |
	","  {return productionEndTerminal("OptTerms10","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptStringTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=TermList(true){ replaceName(n);}] ")" {return productionEndTerminal("OptStringTerm","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo IdList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Id(true){ replaceName(n);})* {return productionEndTerminal("IdList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TermList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* {return productionEndTerminal("TermList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypedIdList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* {return productionEndTerminal("TypedIdList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StrategyList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Strategy(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Strategy(true){ replaceName(n);})* {return productionEndTerminal("StrategyList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleScopedIdList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DynRuleScopeId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=DynRuleScopeId(true){ replaceName(n);})* {return productionEndTerminal("DynRuleScopedIdList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TrafoSortList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=TrafoSort(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TrafoSort(true){ replaceName(n);})* {return productionEndTerminal("TrafoSortList","-","-","Replacement","Default",first,token);}

 )  }

