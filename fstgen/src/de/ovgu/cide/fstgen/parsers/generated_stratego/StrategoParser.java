/* Generated By:JavaCC: Do not edit this line. StrategoParser.java */
package de.ovgu.cide.fstgen.parsers.generated_stratego;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser implements StrategoParserConstants {
        public StrategoParser(){}

  final public FSTInfo NatInteger(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
                           {if (true) return productionEndTerminal("NatInteger","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Int(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n = NatInteger(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("Int","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RealDigit(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(DOT);
    jj_consume_token(INTEGER_LITERAL);
                                                 {if (true) return productionEndTerminal("RealDigit","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Real(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n = RealDigit(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("Real","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo String(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("String","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Char(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CHARACTER_LITERAL);
                             {if (true) return productionEndTerminal("Char","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StringQuotBracket(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STRING_QUOT_BRACKET);
                               {if (true) return productionEndTerminal("StringQuotBracket","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StringQuotBrace(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STRING_QUOT_BRACE);
                             {if (true) return productionEndTerminal("StringQuotBrace","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
                                                                            {if (true) return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Module(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ModuleDeclaration(inTerminal);
                                         replaceName("ModuleDeclaration", n);
                                                                                replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTS:
      n = ImportDeclaration(inTerminal);
                                                                                                                                   replaceName(n);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNATURES:
      case OVERLAYS:
      case RULES:
      case SIGNATURE:
      case STRATEGIES:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      n = Declaration(inTerminal);
                                                                                                                                                                                 replaceName(n);
    }
    jj_consume_token(0);
                                                                                                                                                                                                           {if (true) return productionEndNonTerminal("Module","{ModuleDeclaration}","{ModuleDeclaration}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModName(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName("Id", n);
                                            replaceName(n);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(SLASH);
      n = Id(true);
                                                                                           replaceName("Id", n);
                                                                                                                   replaceName(n);
    }
                                                                                                                                       {if (true) return productionEndTerminal("ModName","{Id}","{Id}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModuleDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      jj_consume_token(MODULE);
      n = ModName(true);
                                  replaceName("ModName", n);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndTerminal("ModuleDeclaration1","{ModName}","{ModName}","Replacement","Default",first,token);}
      break;
    case SPECIFICATION:
      jj_consume_token(SPECIFICATION);
                          {if (true) return productionEndTerminal("ModuleDeclaration2","specification","specification","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImportDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORTS);
    label_3:
    while (true) {
      n = ModName(inTerminal);
                                          replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
                                                              {if (true) return productionEndNonTerminal("ImportDeclaration","imports","imports");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Declaration(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULES:
      jj_consume_token(RULES);
      label_4:
      while (true) {
        n = Definition(inTerminal);
                                           replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
      }
                                                               {if (true) return productionEndNonTerminal("Declaration1","rules","rules");}
      break;
    case STRATEGIES:
      jj_consume_token(STRATEGIES);
      label_5:
      while (true) {
        n = Definition(inTerminal);
                                                replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
      }
                                                                    {if (true) return productionEndNonTerminal("Declaration2","strategies","strategies");}
      break;
    case SIGNATURE:
      jj_consume_token(SIGNATURE);
      label_6:
      while (true) {
        n = SigDeclaration(inTerminal);
                                                   replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SORTS:
        case CONSTRUCTORS:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
      }
                                                                       {if (true) return productionEndNonTerminal("Declaration3","signature","signature");}
      break;
    case SIGNATURES:
      jj_consume_token(SIGNATURES);
      label_7:
      while (true) {
        n = SigDeclaration(inTerminal);
                                                    replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SORTS:
        case CONSTRUCTORS:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
      }
                                                                        {if (true) return productionEndNonTerminal("Declaration4","signatures","signatures");}
      break;
    case OVERLAYS:
      jj_consume_token(OVERLAYS);
      label_8:
      while (true) {
        n = Overlay(inTerminal);
                                           replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
      }
                                                               {if (true) return productionEndNonTerminal("Declaration5","overlays","overlays");}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Overlay(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName("Id", n);
                                            replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n = OptOverlay(true);
                                                                                  replaceName(n);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN);
    n = Term(true);
                                                                                                                      replaceName(n);
                                                                                                                                        {if (true) return productionEndTerminal("Overlay","{Id}","{Id}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptOverlay(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = IdList(true);
                             replaceName(n);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                    {if (true) return productionEndTerminal("OptOverlay","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SigDeclaration(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SORTS:
      jj_consume_token(SORTS);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case LPAREN:
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        n = TrafoSort(inTerminal);
                                          replaceName(n);
      }
                                                              {if (true) return productionEndNonTerminal("SigDeclaration1","sorts","sorts");}
      break;
    case CONSTRUCTORS:
      jj_consume_token(CONSTRUCTORS);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case DDOT:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        n = OpDeclaration(inTerminal);
                                                     replaceName(n);
      }
                                                                         {if (true) return productionEndNonTerminal("SigDeclaration2","constructors","constructors");}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TrafoSort(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACKET:
      n = BracketSort(true);
                             replaceName("BracketSort", n);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("TrafoSort1","{BracketSort}","{BracketSort}","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      n = Id(true);
                    replaceName("Id", n);
                                            replaceName(n);
      if (jj_2_2(2147483647)) {
        n = OptSort1(true);
                                                                                                                     replaceName(n);
      } else {
        ;
      }
                                                                                                                                        {if (true) return productionEndTerminal("TrafoSort2","{Id}","{Id}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptSort1(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
      n = TrafoSortList(true);
                                    replaceName(n);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                           {if (true) return productionEndTerminal("OptSort1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BracketSort(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
        n = TrafoSortList(true);
                                    replaceName(n);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERTICALLINE:
        n = OptSort2(true);
                                                                         replaceName(n);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
                                                                                                {if (true) return productionEndTerminal("BracketSort1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      n = OptSort1(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("BracketSort2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptSort2(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VERTICALLINE);
    n = TrafoSort(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("OptSort2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OpDeclaration(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERNAL:
      n = OptOpDecl1(true);
                             replaceName(n);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case IDENTIFIER:
      n = OptOpDecl2(true);
                                                                    replaceName(n);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(DDOT);
    n = Type(true);
                                                                                                        replaceName(n);
                                                                                                                          {if (true) return productionEndTerminal("OpDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptOpDecl1(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EXTERNAL);
                     {if (true) return productionEndTerminal("OptOpDecl1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptOpDecl2(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("OptOpDecl21","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      n = String(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("OptOpDecl22","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Definition(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTEND:
      case OVERRIDE:
      case INTERNAL:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      n = Anno(true);
                       replaceName(n);
    }
    n = Def(true);
                                                       replaceName("Def", n);
                                                                                replaceName(n);
                                                                                                  {if (true) return productionEndTerminal("Definition","{Def}","{Def}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Anno(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTEND:
      jj_consume_token(EXTEND);
                   {if (true) return productionEndTerminal("Anno1","-","-","Replacement","Default",first,token);}
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
                     {if (true) return productionEndTerminal("Anno2","-","-","Replacement","Default",first,token);}
      break;
    case INTERNAL:
      jj_consume_token(INTERNAL);
                     {if (true) return productionEndTerminal("Anno3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Def(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_3(2147483647)) {
      n = RuleDef(true);
                                                         replaceName(n);
                                                                           {if (true) return productionEndTerminal("Def1","{AUTO}","{AUTO}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
      case IDENTIFIER:
        n = StrategyDef(true);
                             replaceName("StrategyDef", n);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("Def2","-","{StrategyDef}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleDef(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n = OptDef1(true);
                                                       replaceName(n);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(DDOT);
    n = Rule(true);
                                                                                           replaceName(n);
                                                                                                             {if (true) return productionEndTerminal("RuleDef","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptDef1(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = TypedIdList(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTICALLINE:
      n = OptDef2(true);
                                                                      replaceName(n);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                             {if (true) return productionEndTerminal("OptDef1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptDef2(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VERTICALLINE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = TypedIdList(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                                                     {if (true) return productionEndTerminal("OptDef2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Rule(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Term(true);
                      replaceName(n);
    jj_consume_token(ARROW);
    n = Term(true);
                                                          replaceName(n);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
      case WHERE:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_12;
      }
      n = RuleCond(true);
                                                                                              replaceName(n);
    }
                                                                                                                  {if (true) return productionEndTerminal("Rule","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleCond(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      n = Strategy(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("RuleCond1","-","-","Replacement","Default",first,token);}
      break;
    case WITH:
      jj_consume_token(WITH);
      n = Strategy(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("RuleCond2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyDef(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERNAL:
      jj_consume_token(EXTERNAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = Id(inTerminal);
                                      replaceName(n);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = TypedIdList(inTerminal);
                                                                                        replaceName(n);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(VERTICALLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = TypedIdList(inTerminal);
                                                                                                                                          replaceName(n);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        n = Strategy(inTerminal);
                                                                                                                                                                                             replaceName(n);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
                                                                                                                                                                                                                {if (true) return productionEndNonTerminal("StrategyDef1","external","external");}
      break;
    case IDENTIFIER:
      n = Id(true);
                    replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n = OptDef1(true);
                                                       replaceName(n);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGN);
      n = Strategy(true);
                                                                                               replaceName(n);
                                                                                                                 {if (true) return productionEndTerminal("StrategyDef2","{AUTO}","{AUTO}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Strategy(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      n = Strategy(true);
                               replaceName(n);
      jj_consume_token(THEN);
      n = Strategy(true);
                                                                         replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        n = Strategy(true);
                                                                                                                    replaceName(n);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                                                                          replaceName(n);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
                                                                                                                                                                                             {if (true) return productionEndTerminal("Strategy1","-","-","Replacement","Default",first,token);}
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      n = Strategy(true);
                                   replaceName(n);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_13;
        }
        n = SwitchCase(true);
                                                                         replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHERWISE:
        jj_consume_token(OTHERWISE);
        jj_consume_token(DDOT);
        n = Strategy(true);
                                                                                                                               replaceName(n);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                                                                                     replaceName(n);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
                                                                                                                                                                                                        {if (true) return productionEndTerminal("Strategy2","-","-","Replacement","Default",first,token);}
      break;
    case LET:
      jj_consume_token(LET);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_14;
        }
        n = Definition(true);
                                   replaceName(n);
      }
      jj_consume_token(IN);
      n = Strategy(true);
                                                                             replaceName(n);
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                                  replaceName(n);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
                                                                                                                                                     {if (true) return productionEndTerminal("Strategy3","-","-","Replacement","Default",first,token);}
      break;
    case CALL:
      jj_consume_token(CALL);
      jj_consume_token(LPAREN);
      n = Term(true);
                                 replaceName(n);
      jj_consume_token(VERTICALLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
      case FAIL:
      case ID:
      case LET:
      case NOT:
      case ONE:
      case CALL:
      case PROCEED:
      case WITH:
      case PRIM:
      case RULES:
      case SOME:
      case TEST:
      case WHERE:
      case IMPORTTERM:
      case IF:
      case REC:
      case SWITCH:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case STRING_QUOT_BRACKET:
      case STRING_QUOT_BRACE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case LT:
      case MINUS:
      case QUESTIONMARK:
      case EXCLAMATIONMARK:
      case NUMBERSIGN:
      case LOWLINE:
      case BACKSLASH:
      case 149:
        n = StrategyList(true);
                                                                             replaceName(n);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(VERTICALLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case STRING_QUOT_BRACKET:
      case STRING_QUOT_BRACE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case LT:
      case MINUS:
      case NUMBERSIGN:
      case LOWLINE:
        n = TermList(true);
                                                                                                                      replaceName(n);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                                                                          replaceName(n);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
                                                                                                                                                                                             {if (true) return productionEndTerminal("Strategy4","-","-","Replacement","Default",first,token);}
      break;
    case PROCEED:
      jj_consume_token(PROCEED);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n = OptStrategy(true);
                                        replaceName(n);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                        replaceName(n);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
                                                                                                           {if (true) return productionEndTerminal("Strategy5","-","-","Replacement","Default",first,token);}
      break;
    case FAIL:
      jj_consume_token(FAIL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                              replaceName(n);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
                                                                 {if (true) return productionEndTerminal("Strategy6","-","-","Replacement","Default",first,token);}
      break;
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                            replaceName(n);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
                                                               {if (true) return productionEndTerminal("Strategy7","-","-","Replacement","Default",first,token);}
      break;
    case QUESTIONMARK:
      jj_consume_token(QUESTIONMARK);
      n = Term(true);
                          replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                         replaceName(n);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
                                                                                            {if (true) return productionEndTerminal("Strategy8","-","-","Replacement","Default",first,token);}
      break;
    case EXCLAMATIONMARK:
      jj_consume_token(EXCLAMATIONMARK);
      n = Term(true);
                          replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                         replaceName(n);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
                                                                                            {if (true) return productionEndTerminal("Strategy9","-","-","Replacement","Default",first,token);}
      break;
    case REC:
      jj_consume_token(REC);
      n = Id(true);
                          replaceName(n);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                                                 replaceName(n);
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                    replaceName(n);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
                                                                                                                                       {if (true) return productionEndTerminal("Strategy10","-","-","Replacement","Default",first,token);}
      break;
    case IMPORTTERM:
      jj_consume_token(IMPORTTERM);
      jj_consume_token(LPAREN);
      n = ModName(true);
                                           replaceName(n);
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                              replaceName(n);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
                                                                                                                 {if (true) return productionEndTerminal("Strategy11","-","-","Replacement","Default",first,token);}
      break;
    case BACKSLASH:
      jj_consume_token(BACKSLASH);
      n = Rule(true);
                           replaceName(n);
      jj_consume_token(BACKSLASH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                               replaceName(n);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
                                                                                                  {if (true) return productionEndTerminal("Strategy12","-","-","Replacement","Default",first,token);}
      break;
    case 149:
      jj_consume_token(149);
      n = ScopeLabels(true);
                                  replaceName(n);
      jj_consume_token(DDOT);
      n = Strategy(true);
                                                                         replaceName(n);
      jj_consume_token(150);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                             replaceName(n);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
                                                                                                                                                {if (true) return productionEndTerminal("Strategy13","-","-","Replacement","Default",first,token);}
      break;
    case RULES:
      jj_consume_token(RULES);
      jj_consume_token(LPAREN);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_15;
        }
        n = DynRuleDef(true);
                                         replaceName(n);
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                              replaceName(n);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
                                                                                                                 {if (true) return productionEndTerminal("Strategy14","-","-","Replacement","Default",first,token);}
      break;
    case ALL:
    case NOT:
    case ONE:
    case WITH:
    case SOME:
    case TEST:
    case WHERE:
      n = Strat(true);
                       replaceName(n);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                                              replaceName(n);
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                 replaceName(n);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
                                                                                                                                    {if (true) return productionEndTerminal("Strategy15","-","-","Replacement","Default",first,token);}
      break;
    case PRIM:
      jj_consume_token(PRIM);
      jj_consume_token(LPAREN);
      n = String(true);
                                   replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n = OptPrimStrategy(true);
                                                                              replaceName(n);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                                                                                  replaceName(n);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
                                                                                                                                                     {if (true) return productionEndTerminal("Strategy16","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[78] = jj_gen;
      if (jj_2_4(2147483647)) {
        n = Term(true);
                                             replaceName(n);
        jj_consume_token(151);
        n = Term(true);
                                                                                 replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case SEMICOLON:
        case 152:
        case 153:
        case 154:
          n = AlternativeStrategy(true);
                                                                                                                                replaceName(n);
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
                                                                                                                                                   {if (true) return productionEndTerminal("Strategy17","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          n = OptRuleOrStrategy(true);
                                       replaceName(n);
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case SEMICOLON:
          case 152:
          case 153:
          case 154:
            n = AlternativeStrategy(true);
                                                                                          replaceName(n);
            break;
          default:
            jj_la1[66] = jj_gen;
            ;
          }
                                                                                                             {if (true) return productionEndTerminal("Strategy18","-","-","Replacement","Default",first,token);}
          break;
        case LBRACE:
          n = StrategyCurly(true);
                               replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case SEMICOLON:
          case 152:
          case 153:
          case 154:
            n = AlternativeStrategy(true);
                                                                              replaceName(n);
            break;
          default:
            jj_la1[67] = jj_gen;
            ;
          }
                                                                                                 {if (true) return productionEndTerminal("Strategy19","-","-","Replacement","Default",first,token);}
          break;
        case LT:
          n = StrategyAngle(true);
                               replaceName(n);
          n = Term(true);
                                                              replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case SEMICOLON:
          case 152:
          case 153:
          case 154:
            n = AlternativeStrategy(true);
                                                                                                             replaceName(n);
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
                                                                                                                                {if (true) return productionEndTerminal("Strategy20","-","-","Replacement","Default",first,token);}
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALL:
          case FAIL:
          case ID:
          case LET:
          case NOT:
          case ONE:
          case CALL:
          case PROCEED:
          case WITH:
          case PRIM:
          case RULES:
          case SOME:
          case TEST:
          case WHERE:
          case IMPORTTERM:
          case IF:
          case REC:
          case SWITCH:
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case STRING_QUOT_BRACKET:
          case STRING_QUOT_BRACE:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case LT:
          case MINUS:
          case QUESTIONMARK:
          case EXCLAMATIONMARK:
          case NUMBERSIGN:
          case LOWLINE:
          case BACKSLASH:
          case 149:
            n = StrategyList(true);
                                   replaceName(n);
            break;
          default:
            jj_la1[69] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VERTICALLINE:
            jj_consume_token(VERTICALLINE);
            n = Strategy(true);
                                                                            replaceName(n);
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case SEMICOLON:
          case 152:
          case 153:
          case 154:
            n = AlternativeStrategy(true);
                                                                                                                                replaceName(n);
            break;
          default:
            jj_la1[71] = jj_gen;
            ;
          }
                                                                                                                                                   {if (true) return productionEndTerminal("Strategy21","-","-","Replacement","Default",first,token);}
          break;
        case IDENTIFIER:
          n = Id(true);
                    replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            n = OptStrategy(true);
                                                           replaceName(n);
            break;
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case SEMICOLON:
          case 152:
          case 153:
          case 154:
            n = AlternativeStrategy(true);
                                                                                                           replaceName(n);
            break;
          default:
            jj_la1[73] = jj_gen;
            ;
          }
                                                                                                                              {if (true) return productionEndTerminal("Strategy22","-","-","Replacement","Default",first,token);}
          break;
        case STRING_LITERAL:
          n = String(true);
                        replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            n = OptStrategy(true);
                                                               replaceName(n);
            break;
          default:
            jj_la1[74] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case SEMICOLON:
          case 152:
          case 153:
          case 154:
            n = AlternativeStrategy(true);
                                                                                                               replaceName(n);
            break;
          default:
            jj_la1[75] = jj_gen;
            ;
          }
                                                                                                                                  {if (true) return productionEndTerminal("Strategy23","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[79] = jj_gen;
          if (jj_2_5(2147483647)) {
            n = Real(true);
                                        replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS:
            case SEMICOLON:
            case 152:
            case 153:
            case 154:
              n = AlternativeStrategy(true);
                                                                                       replaceName(n);
              break;
            default:
              jj_la1[76] = jj_gen;
              ;
            }
                                                                                                          {if (true) return productionEndTerminal("Strategy24","-","-","Replacement","Default",first,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
            case MINUS:
              n = Int(true);
                     replaceName(n);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PLUS:
              case SEMICOLON:
              case 152:
              case 153:
              case 154:
                n = AlternativeStrategy(true);
                                                                    replaceName(n);
                break;
              default:
                jj_la1[77] = jj_gen;
                ;
              }
                                                                                       {if (true) return productionEndTerminal("Strategy25","-","-","Replacement","Default",first,token);}
              break;
            default:
              jj_la1[80] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Strat(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOME:
      jj_consume_token(SOME);
                 {if (true) return productionEndTerminal("Strat1","-","-","Replacement","Default",first,token);}
      break;
    case ONE:
      jj_consume_token(ONE);
                {if (true) return productionEndTerminal("Strat2","-","-","Replacement","Default",first,token);}
      break;
    case ALL:
      jj_consume_token(ALL);
                {if (true) return productionEndTerminal("Strat3","-","-","Replacement","Default",first,token);}
      break;
    case NOT:
      jj_consume_token(NOT);
                {if (true) return productionEndTerminal("Strat4","-","-","Replacement","Default",first,token);}
      break;
    case WHERE:
      jj_consume_token(WHERE);
                  {if (true) return productionEndTerminal("Strat5","-","-","Replacement","Default",first,token);}
      break;
    case WITH:
      jj_consume_token(WITH);
                 {if (true) return productionEndTerminal("Strat6","-","-","Replacement","Default",first,token);}
      break;
    case TEST:
      jj_consume_token(TEST);
                 {if (true) return productionEndTerminal("Strat7","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AlternativeStrategy(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case SEMICOLON:
    case 153:
    case 154:
      n = AlternativeOperator(true);
                                     replaceName(n);
      n = Strategy(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("AlternativeStrategy1","-","-","Replacement","Default",first,token);}
      break;
    case 152:
      jj_consume_token(152);
      n = Term(true);
                           replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SEMICOLON:
      case 152:
      case 153:
      case 154:
        n = AlternativeStrategy(true);
                                                                          replaceName(n);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
                                                                                             {if (true) return productionEndTerminal("AlternativeStrategy2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AlternativeOperator(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("AlternativeOperator1","-","-","Replacement","Default",first,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("AlternativeOperator2","-","-","Replacement","Default",first,token);}
      break;
    case 153:
      jj_consume_token(153);
               {if (true) return productionEndTerminal("AlternativeOperator3","-","-","Replacement","Default",first,token);}
      break;
    case 154:
      jj_consume_token(154);
               {if (true) return productionEndTerminal("AlternativeOperator4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptPrimStrategy(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    if (jj_2_6(2147483647)) {
      n = StrategyList(true);
                                                                 replaceName(n);
      jj_consume_token(VERTICALLINE);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case STRING_QUOT_BRACKET:
    case STRING_QUOT_BRACE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case LT:
    case MINUS:
    case NUMBERSIGN:
    case LOWLINE:
      n = TermList(true);
                                                                                                          replaceName(n);
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
                                                                                                                             {if (true) return productionEndTerminal("OptPrimStrategy","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptRuleOrStrategy(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_7(2147483647)) {
      n = Rule(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("OptRuleOrStrategy1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
      case FAIL:
      case ID:
      case LET:
      case NOT:
      case ONE:
      case CALL:
      case PROCEED:
      case WITH:
      case PRIM:
      case RULES:
      case SOME:
      case TEST:
      case WHERE:
      case IMPORTTERM:
      case IF:
      case REC:
      case SWITCH:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case STRING_QUOT_BRACKET:
      case STRING_QUOT_BRACE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case LT:
      case MINUS:
      case QUESTIONMARK:
      case EXCLAMATIONMARK:
      case NUMBERSIGN:
      case LOWLINE:
      case BACKSLASH:
      case 149:
        n = StrategyList(true);
                               replaceName(n);
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
                                                  {if (true) return productionEndTerminal("OptRuleOrStrategy2","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyCurly(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    if (jj_2_8(2147483647)) {
      n = OptStrategyCurly(true);
                                                                 replaceName(n);
    } else {
      ;
    }
    n = Strategy(true);
                                                                                                     replaceName(n);
    jj_consume_token(RBRACE);
                                                                                                                           {if (true) return productionEndTerminal("StrategyCurly","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptStrategyCurly(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = IdList(true);
                         replaceName(n);
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(DDOT);
                                                {if (true) return productionEndTerminal("OptStrategyCurly","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyAngle(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LT);
    n = Strategy(true);
                              replaceName(n);
    jj_consume_token(GT);
                                                    {if (true) return productionEndTerminal("StrategyAngle","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptStrategy(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case FAIL:
    case ID:
    case LET:
    case NOT:
    case ONE:
    case CALL:
    case PROCEED:
    case WITH:
    case PRIM:
    case RULES:
    case SOME:
    case TEST:
    case WHERE:
    case IMPORTTERM:
    case IF:
    case REC:
    case SWITCH:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case STRING_QUOT_BRACKET:
    case STRING_QUOT_BRACE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case LT:
    case MINUS:
    case QUESTIONMARK:
    case EXCLAMATIONMARK:
    case NUMBERSIGN:
    case LOWLINE:
    case BACKSLASH:
    case 149:
      n = StrategyList(true);
                                   replaceName(n);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTICALLINE:
      n = OptTerm(true);
                                                                       replaceName(n);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                              {if (true) return productionEndTerminal("OptStrategy","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptTerm(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VERTICALLINE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case STRING_QUOT_BRACKET:
    case STRING_QUOT_BRACE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case LT:
    case MINUS:
    case NUMBERSIGN:
    case LOWLINE:
      n = TermList(true);
                               replaceName(n);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
                                                  {if (true) return productionEndTerminal("OptTerm","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchCase(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CASE);
    n = Strategy(true);
                                 replaceName(n);
    jj_consume_token(DDOT);
    n = Strategy(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("SwitchCase","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ScopeLabels(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("ScopeLabels1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[92] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = DynRuleScopedIdList(true);
                                      replaceName(n);
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
                                                         {if (true) return productionEndTerminal("ScopeLabels2","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleScopeId(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_9(2)) {
      n = Id(true);
                                 replaceName(n);
      jj_consume_token(DOT);
      n = Term(true);
                                                                    replaceName(n);
                                                                                      {if (true) return productionEndTerminal("DynRuleScopeId1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("DynRuleScopeId2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleDef(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_10(2147483647)) {
      n = DynRuleId(true);
                                                                                     replaceName(n);
      jj_consume_token(DDOT);
      n = Rule(true);
                                                                                                                        replaceName(n);
      jj_consume_token(DEPENDS);
      jj_consume_token(ON);
      n = Term(true);
                                                                                                                                                                      replaceName(n);
                                                                                                                                                                                        {if (true) return productionEndTerminal("DynRuleDef1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_11(2147483647)) {
      n = DynRuleId(true);
                                                                    replaceName(n);
      jj_consume_token(DDOT);
      n = RuleOrTerm(true);
                                                                                                             replaceName(n);
                                                                                                                               {if (true) return productionEndTerminal("DynRuleDef2","-","-","Replacement","Default",first,token);}
    } else if (jj_2_12(2147483647)) {
      n = DynRuleId(true);
                                                                     replaceName(n);
      jj_consume_token(155);
      n = Rule(true);
                                                                                                         replaceName(n);
                                                                                                                           {if (true) return productionEndTerminal("DynRuleDef3","-","-","Replacement","Default",first,token);}
    } else if (jj_2_13(2147483647)) {
      n = DynRuleId(true);
                                                                               replaceName(n);
      n = TermOperator(true);
                                                                                                                      replaceName(n);
      n = Term(true);
                                                                                                                                                     replaceName(n);
                                                                                                                                                                       {if (true) return productionEndTerminal("DynRuleDef4","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = Id(true);
                    replaceName(n);
        jj_consume_token(PLUS);
        n = Term(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("DynRuleDef5","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleOrTerm(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_14(2147483647)) {
      n = Rule(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("RuleOrTerm1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case STRING_QUOT_BRACKET:
      case STRING_QUOT_BRACE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case LT:
      case MINUS:
      case NUMBERSIGN:
      case LOWLINE:
        n = Term(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("RuleOrTerm2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleId(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RuleDec(true);
                         replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case DOT:
      n = OptRuleDec3(true);
                                                                replaceName(n);
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
                                                                                   {if (true) return productionEndTerminal("DynRuleId","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleDec(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n = OptRuleDec1(true);
                                                           replaceName(n);
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
                                                                              {if (true) return productionEndTerminal("RuleDec","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptRuleDec1(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = TypedIdList(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTICALLINE:
      n = OptRuleDec2(true);
                                                                          replaceName(n);
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                 {if (true) return productionEndTerminal("OptRuleDec1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptRuleDec2(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VERTICALLINE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = TypedIdList(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
                                                     {if (true) return productionEndTerminal("OptRuleDec2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptRuleDec3(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RuleDecOperator(true);
                                 replaceName(n);
    n = Term(true);
                                                                replaceName(n);
                                                                                  {if (true) return productionEndTerminal("OptRuleDec3","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleDecOperator(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("RuleDecOperator1","-","-","Replacement","Default",first,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
              {if (true) return productionEndTerminal("RuleDecOperator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TermOperator(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 156:
      jj_consume_token(156);
               {if (true) return productionEndTerminal("TermOperator1","-","-","Replacement","Default",first,token);}
      break;
    case 151:
      jj_consume_token(151);
               {if (true) return productionEndTerminal("TermOperator2","-","-","Replacement","Default",first,token);}
      break;
    case 157:
      jj_consume_token(157);
                {if (true) return productionEndTerminal("TermOperator3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleNames(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("RuleNames1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[104] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n = IdList(true);
                         replaceName(n);
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
                                            {if (true) return productionEndTerminal("RuleNames2","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypedId(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DDOT:
      jj_consume_token(DDOT);
      n = Type(true);
                                                        replaceName(n);
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
                                                                           {if (true) return productionEndTerminal("TypedId","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Type(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_15(2147483647)) {
      n = FunType(true);
                                              replaceName(n);
                                                                {if (true) return productionEndTerminal("Type1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
        n = TrafoSort(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("Type2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunType(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ArgType(true);
                         replaceName(n);
    label_16:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(STAR);
      n = ArgType(true);
                                                                             replaceName(n);
    }
    jj_consume_token(ARROW);
    n = Type(true);
                                                                                                                   replaceName(n);
                                                                                                                                     {if (true) return productionEndTerminal("FunType","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArgType(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_17(2147483647)) {
      n = TrafoSort(true);
                                                  replaceName(n);
                                                                    {if (true) return productionEndTerminal("ArgType1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        n = Type(true);
                          replaceName(n);
        jj_consume_token(RPAREN);
                                                {if (true) return productionEndTerminal("ArgType2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AlternativeTerm(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 158:
      jj_consume_token(158);
      n = Term(true);
                           replaceName(n);
      jj_consume_token(RBRACE);
                                                 {if (true) return productionEndTerminal("AlternativeTerm1","-","-","Replacement","Default",first,token);}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case STRING_QUOT_BRACKET:
      case STRING_QUOT_BRACE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case LT:
      case MINUS:
      case NUMBERSIGN:
      case LOWLINE:
        n = TermList(true);
                               replaceName(n);
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
                                                      {if (true) return productionEndTerminal("AlternativeTerm2","-","-","Replacement","Default",first,token);}
      break;
    case NUMBERSIGN:
      jj_consume_token(NUMBERSIGN);
      jj_consume_token(LPAREN);
      n = Term(true);
                              replaceName(n);
      jj_consume_token(RPAREN);
                                                    {if (true) return productionEndTerminal("AlternativeTerm3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOWLINE:
      jj_consume_token(LOWLINE);
      if (jj_2_18(2147483647)) {
        n = Term(true);
                                             replaceName(n);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case NUMBERSIGN:
      case 158:
        n = AlternativeTerm(true);
                                                                                         replaceName(n);
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
                                                                                                            {if (true) return productionEndTerminal("Term1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[143] = jj_gen;
      if (jj_2_21(2147483647)) {
        n = Real(true);
                                        replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case NUMBERSIGN:
        case 158:
          n = AlternativeTerm(true);
                                                                                   replaceName(n);
          break;
        default:
          jj_la1[111] = jj_gen;
          ;
        }
                                                                                                      {if (true) return productionEndTerminal("Term2","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case MINUS:
          n = Int(true);
                     replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                replaceName(n);
            break;
          default:
            jj_la1[112] = jj_gen;
            ;
          }
                                                                                   {if (true) return productionEndTerminal("Term3","-","-","Replacement","Default",first,token);}
          break;
        case STRING_LITERAL:
          n = String(true);
                        replaceName(n);
          if (jj_2_19(2147483647)) {
            n = OptStringTerm(true);
                                                                                            replaceName(n);
          } else {
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                                                                                        replaceName(n);
            break;
          default:
            jj_la1[113] = jj_gen;
            ;
          }
                                                                                                                                                           {if (true) return productionEndTerminal("Term4","-","-","Replacement","Default",first,token);}
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case STRING_QUOT_BRACKET:
          case STRING_QUOT_BRACE:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case LT:
          case MINUS:
          case NUMBERSIGN:
          case LOWLINE:
            n = TermList(true);
                               replaceName(n);
            break;
          default:
            jj_la1[114] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                               replaceName(n);
            break;
          default:
            jj_la1[115] = jj_gen;
            ;
          }
                                                                                                  {if (true) return productionEndTerminal("Term5","-","-","Replacement","Default",first,token);}
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case STRING_QUOT_BRACKET:
          case STRING_QUOT_BRACE:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case LT:
          case MINUS:
          case NUMBERSIGN:
          case LOWLINE:
            n = TermList(true);
                               replaceName(n);
            break;
          default:
            jj_la1[116] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VERTICALLINE:
            jj_consume_token(VERTICALLINE);
            n = Term(true);
                                                                    replaceName(n);
            break;
          default:
            jj_la1[117] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
            break;
          default:
            jj_la1[118] = jj_gen;
            ;
          }
                                                                                                                                       {if (true) return productionEndTerminal("Term6","-","-","Replacement","Default",first,token);}
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case STRING_QUOT_BRACKET:
          case STRING_QUOT_BRACE:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case LT:
          case MINUS:
          case NUMBERSIGN:
          case LOWLINE:
            n = TermList(true);
                               replaceName(n);
            break;
          default:
            jj_la1[119] = jj_gen;
            ;
          }
          jj_consume_token(RBRACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                               replaceName(n);
            break;
          default:
            jj_la1[120] = jj_gen;
            ;
          }
                                                                                                  {if (true) return productionEndTerminal("Term7","-","-","Replacement","Default",first,token);}
          break;
        case NUMBERSIGN:
          jj_consume_token(NUMBERSIGN);
          jj_consume_token(LPAREN);
          n = Term(true);
                              replaceName(n);
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                             replaceName(n);
            break;
          default:
            jj_la1[121] = jj_gen;
            ;
          }
                                                                                                {if (true) return productionEndTerminal("Term8","-","-","Replacement","Default",first,token);}
          break;
        case STRING_QUOT_BRACKET:
          n = StringQuotBracket(true);
                                   replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                              replaceName(n);
            break;
          default:
            jj_la1[122] = jj_gen;
            ;
          }
                                                                                                 {if (true) return productionEndTerminal("Term9","-","-","Replacement","Default",first,token);}
          break;
        case STRING_QUOT_BRACE:
          n = StringQuotBrace(true);
                                 replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                            replaceName(n);
            break;
          default:
            jj_la1[123] = jj_gen;
            ;
          }
                                                                                               {if (true) return productionEndTerminal("Term10","-","-","Replacement","Default",first,token);}
          break;
        case IDENTIFIER:
          n = Id(true);
                    replaceName(n);
          if (jj_2_20(2)) {
            n = OptIdTerm(true);
                                                                      replaceName(n);
          } else {
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case NUMBERSIGN:
          case 158:
            n = AlternativeTerm(true);
                                                                                                                  replaceName(n);
            break;
          default:
            jj_la1[124] = jj_gen;
            ;
          }
                                                                                                                                     {if (true) return productionEndTerminal("Term11","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[144] = jj_gen;
          if (jj_2_22(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                              replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                         replaceName(n);
              break;
            default:
              jj_la1[125] = jj_gen;
              ;
            }
                                                                                                                                            {if (true) return productionEndTerminal("Term12","-","-","Replacement","Default",first,token);}
          } else if (jj_2_23(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                               replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                          replaceName(n);
              break;
            default:
              jj_la1[126] = jj_gen;
              ;
            }
                                                                                                                                             {if (true) return productionEndTerminal("Term13","-","-","Replacement","Default",first,token);}
          } else if (jj_2_24(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                              replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                         replaceName(n);
              break;
            default:
              jj_la1[127] = jj_gen;
              ;
            }
                                                                                                                                            {if (true) return productionEndTerminal("Term14","-","-","Replacement","Default",first,token);}
          } else if (jj_2_25(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                             replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                        replaceName(n);
              break;
            default:
              jj_la1[128] = jj_gen;
              ;
            }
                                                                                                                                           {if (true) return productionEndTerminal("Term15","-","-","Replacement","Default",first,token);}
          } else if (jj_2_26(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                            replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                       replaceName(n);
              break;
            default:
              jj_la1[129] = jj_gen;
              ;
            }
                                                                                                                                          {if (true) return productionEndTerminal("Term16","-","-","Replacement","Default",first,token);}
          } else if (jj_2_27(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                                  replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                             replaceName(n);
              break;
            default:
              jj_la1[130] = jj_gen;
              ;
            }
                                                                                                                                                {if (true) return productionEndTerminal("Term17","-","-","Replacement","Default",first,token);}
          } else if (jj_2_28(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                             replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                        replaceName(n);
              break;
            default:
              jj_la1[131] = jj_gen;
              ;
            }
                                                                                                                                           {if (true) return productionEndTerminal("Term18","-","-","Replacement","Default",first,token);}
          } else if (jj_2_29(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                         replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
              break;
            default:
              jj_la1[132] = jj_gen;
              ;
            }
                                                                                                                                       {if (true) return productionEndTerminal("Term19","-","-","Replacement","Default",first,token);}
          } else if (jj_2_30(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                         replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
              break;
            default:
              jj_la1[133] = jj_gen;
              ;
            }
                                                                                                                                       {if (true) return productionEndTerminal("Term20","-","-","Replacement","Default",first,token);}
          } else if (jj_2_31(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                         replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
              break;
            default:
              jj_la1[134] = jj_gen;
              ;
            }
                                                                                                                                       {if (true) return productionEndTerminal("Term21","-","-","Replacement","Default",first,token);}
          } else if (jj_2_32(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                         replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
              break;
            default:
              jj_la1[135] = jj_gen;
              ;
            }
                                                                                                                                       {if (true) return productionEndTerminal("Term22","-","-","Replacement","Default",first,token);}
          } else if (jj_2_33(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                         replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
              break;
            default:
              jj_la1[136] = jj_gen;
              ;
            }
                                                                                                                                       {if (true) return productionEndTerminal("Term23","-","-","Replacement","Default",first,token);}
          } else if (jj_2_34(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                         replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                    replaceName(n);
              break;
            default:
              jj_la1[137] = jj_gen;
              ;
            }
                                                                                                                                       {if (true) return productionEndTerminal("Term24","-","-","Replacement","Default",first,token);}
          } else if (jj_2_35(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                          replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                     replaceName(n);
              break;
            default:
              jj_la1[138] = jj_gen;
              ;
            }
                                                                                                                                        {if (true) return productionEndTerminal("Term25","-","-","Replacement","Default",first,token);}
          } else if (jj_2_36(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                           replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                      replaceName(n);
              break;
            default:
              jj_la1[139] = jj_gen;
              ;
            }
                                                                                                                                         {if (true) return productionEndTerminal("Term26","-","-","Replacement","Default",first,token);}
          } else if (jj_2_37(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                            replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                       replaceName(n);
              break;
            default:
              jj_la1[140] = jj_gen;
              ;
            }
                                                                                                                                          {if (true) return productionEndTerminal("Term27","-","-","Replacement","Default",first,token);}
          } else if (jj_2_38(2147483647)) {
            n = NoTermAfterStrategyAngle(true);
                                                                           replaceName(n);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case NUMBERSIGN:
            case 158:
              n = AlternativeTerm(true);
                                                                                                                      replaceName(n);
              break;
            default:
              jj_la1[141] = jj_gen;
              ;
            }
                                                                                                                                         {if (true) return productionEndTerminal("Term28","-","-","Replacement","Default",first,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LT:
              n = StrategyAngle(true);
                               replaceName(n);
              n = Term(true);
                                                              replaceName(n);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACE:
              case NUMBERSIGN:
              case 158:
                n = AlternativeTerm(true);
                                                                                                         replaceName(n);
                break;
              default:
                jj_la1[142] = jj_gen;
                ;
              }
                                                                                                                            {if (true) return productionEndTerminal("Term29","-","-","Replacement","Default",first,token);}
              break;
            default:
              jj_la1[145] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NoTermAfterStrategyAngle(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = StrategyAngle(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("NoTermAfterStrategyAngle","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptIdTerm(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTICALLINE:
      jj_consume_token(VERTICALLINE);
      jj_consume_token(LBRACKET);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case LPAREN:
        case RPAREN:
        case LBRACE:
        case RBRACE:
        case STAR:
        case COMMA:
        case SEMICOLON:
        case DDOT:
        case ASSIGN:
          ;
          break;
        default:
          jj_la1[146] = jj_gen;
          break label_17;
        }
        n = OptTerms(true);
                                   replaceName(n);
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(VERTICALLINE);
                                                               {if (true) return productionEndTerminal("OptIdTerm1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case STRING_QUOT_BRACKET:
      case STRING_QUOT_BRACE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case LT:
      case MINUS:
      case NUMBERSIGN:
      case LOWLINE:
        n = TermList(true);
                               replaceName(n);
        break;
      default:
        jj_la1[147] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                                                      {if (true) return productionEndTerminal("OptIdTerm2","-","-","Replacement","Default",first,token);}
      break;
    case AT:
      jj_consume_token(AT);
      n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("OptIdTerm3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptTerms(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_39(2)) {
      n = Id(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("OptTerms1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DDOT:
        jj_consume_token(DDOT);
              {if (true) return productionEndTerminal("OptTerms2","-","-","Replacement","Default",first,token);}
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
              {if (true) return productionEndTerminal("OptTerms3","-","-","Replacement","Default",first,token);}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
              {if (true) return productionEndTerminal("OptTerms4","-","-","Replacement","Default",first,token);}
        break;
      case RPAREN:
        jj_consume_token(RPAREN);
              {if (true) return productionEndTerminal("OptTerms5","-","-","Replacement","Default",first,token);}
        break;
      case STAR:
        jj_consume_token(STAR);
              {if (true) return productionEndTerminal("OptTerms6","-","-","Replacement","Default",first,token);}
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
              {if (true) return productionEndTerminal("OptTerms7","-","-","Replacement","Default",first,token);}
        break;
      case RBRACE:
        jj_consume_token(RBRACE);
              {if (true) return productionEndTerminal("OptTerms8","-","-","Replacement","Default",first,token);}
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("OptTerms9","-","-","Replacement","Default",first,token);}
        break;
      case COMMA:
        jj_consume_token(COMMA);
              {if (true) return productionEndTerminal("OptTerms10","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptStringTerm(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case STRING_QUOT_BRACKET:
    case STRING_QUOT_BRACE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case LT:
    case MINUS:
    case NUMBERSIGN:
    case LOWLINE:
      n = TermList(true);
                               replaceName(n);
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                      {if (true) return productionEndTerminal("OptStringTerm","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IdList(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    label_18:
    while (true) {
      if (jj_2_40(2)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(COMMA);
      n = Id(true);
                                                                   replaceName(n);
    }
                                                                                       {if (true) return productionEndTerminal("IdList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TermList(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Term(true);
                      replaceName(n);
    label_19:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(COMMA);
      n = Term(true);
                                                                       replaceName(n);
    }
                                                                                           {if (true) return productionEndTerminal("TermList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypedIdList(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = TypedId(true);
                         replaceName(n);
    label_20:
    while (true) {
      if (jj_2_42(2)) {
        ;
      } else {
        break label_20;
      }
      jj_consume_token(COMMA);
      n = TypedId(true);
                                                                             replaceName(n);
    }
                                                                                                 {if (true) return productionEndTerminal("TypedIdList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyList(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Strategy(true);
                          replaceName(n);
    label_21:
    while (true) {
      if (jj_2_43(2)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(COMMA);
      n = Strategy(true);
                                                                               replaceName(n);
    }
                                                                                                   {if (true) return productionEndTerminal("StrategyList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleScopedIdList(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = DynRuleScopeId(true);
                                replaceName(n);
    label_22:
    while (true) {
      if (jj_2_44(2)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(COMMA);
      n = DynRuleScopeId(true);
                                                                                           replaceName(n);
    }
                                                                                                               {if (true) return productionEndTerminal("DynRuleScopedIdList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TrafoSortList(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = TrafoSort(true);
                           replaceName(n);
    label_23:
    while (true) {
      if (jj_2_45(2)) {
        ;
      } else {
        break label_23;
      }
      jj_consume_token(COMMA);
      n = TrafoSort(true);
                                                                                 replaceName(n);
    }
                                                                                                     {if (true) return productionEndTerminal("TrafoSortList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(VERTICALLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_scan_token(155)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(DEPENDS)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_3R_283()) return true;
    if (jj_3R_37()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_283()) return true;
    if (jj_scan_token(155)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_283()) return true;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_3R_283()) return true;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(DEPENDS)) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(VERTICALLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(VERTICALLINE)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(VERTICALLINE)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(OTHERWISE)) return true;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(154)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(VERTICALLINE)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(153)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(152)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_276()) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(TEST)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(WITH)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(ONE)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_126()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(151)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_43()) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_173()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_206()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(151)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(PRIM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_172()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(RULES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(149)) return true;
    if (jj_3R_198()) return true;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(150)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(BACKSLASH)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(BACKSLASH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(IMPORTTERM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(REC)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(EXCLAMATIONMARK)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(FAIL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(PROCEED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(CALL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(VERTICALLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    if (jj_scan_token(VERTICALLINE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(LET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(EXTERNAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_312()) jj_scanpos = xsp;
    if (jj_scan_token(VERTICALLINE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(VERTICALLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_274()) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(INTERNAL)) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(OVERRIDE)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(EXTEND)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_3R_278()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_259()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(VERTICALLINE)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(STRING_QUOT_BRACE)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(STRING_QUOT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(VERTICALLINE)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(VERTICALLINE)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(150)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_43()) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(VERTICALLINE)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(VERTICALLINE)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(RULES)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(STRATEGIES)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(WITH)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_43()) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_43()) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(151)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_43()) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_141()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(NUMBERSIGN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_126()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(LOWLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(NUMBERSIGN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(DDOT)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(157)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(151)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(156)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_164()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_174()) return true;
    return false;
  }

  public StrategoParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[151];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8000,0x0,0x6000,0x0,0x0,0x0,0x20010000,0x20010000,0x0,0x0,0x0,0x0,0x0,0x0,0x20010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0xd0000000,0x0,0xd0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xb500,0x0,0x0,0xe0800000,0xe0800000,0x0,0x0,0x0,0xb500,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0xe0000000,0xe0000000,0x800000,0x0,0x0,0x0,0x0,0x40200,0x40200,0x0,0x0,0x0,0x0,0x0,0x800000,0x200000,0x0,0x100000,0x2000000,0x0,0xe0800000,0x0,0xd0e5ace,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0e5ace,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0e5ace,0x0,0x0,0x6420c,0x0,0x0,0x0,0x0,0xd0e5ace,0x0,0xd0e5ace,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000c08,0x20000c08,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000c08,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x8,0x0,0x0,0x0,0x0,0x20000c08,0x20000c08,0x0,0x20000c08,0x0,0x20000c08,0x0,0x0,0x0,0x0,0x20000c08,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000c08,0x0,0x0,0x0,0x0,0x0,0x20000c08,0x0,0x20000c08,0x0,0x0,0x20000c08,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000c08,0x0,0x0,0x20000c08,0x0,0x0,0x20000c08,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x20000000,0x20000000,0x0,0x0,0x0,0x8000,0x8000,0x8000,0x0,0x0,0x8000,0x0,0x100000,0x8000,0x1108000,0x8000,0x0,0x1108000,0x1108000,0x1108000,0x0,0x1100000,0x0,0x8000,0x8000,0x0,0x0,0x8000,0x100000,0x8000,0x0,0x8000,0x0,0x0,0x8000,0x8000,0x8000,0x0,0x100000,0x8000,0x0,0x10000000,0x0,0x0,0x10000000,0x8000,0x10000000,0x25508000,0x25508000,0x10000000,0x100000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x8000,0x10000000,0x10000000,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x25508000,0x0,0x10000000,0x100000,0x10000000,0x100000,0x10000000,0x10000000,0x10000000,0x0,0x5508000,0x20000000,0x0,0x10000000,0x10000000,0x10000000,0x25508000,0x25508000,0x8000,0x25508000,0x0,0x25508000,0x8000,0x0,0x8000,0x8000,0x25508000,0x10000000,0x100000,0x8000,0x0,0x8000,0x10000000,0x0,0x8000,0x0,0x0,0x1108000,0x100000,0x25508000,0x400000,0x400000,0x400000,0x400000,0x400000,0x25508000,0x400000,0x25508000,0x0,0x400000,0x25508000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x0,0x21508000,0x4000000,0x40f08000,0x25508000,0x100000,0x40f00000,0x25508000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x7000002,0x0,0x0,0x7000002,0x0,0x7000002,0x340070,0x40040,0x7000002,0x0,0x7000002,0x7000002,0x7000002,0x7000002,0x7000002,0x7000002,0x7000002,0x7000002,0x7000002,0x0,0x7000002,0x7000002,0x1,0x7000002,0x7000002,0x7000002,0x7000002,0x7000002,0x340070,0x200,0x7000002,0x0,0x7000002,0x0,0x7000002,0x7000002,0x7000002,0x300030,0x0,0x0,0x0,0x7000002,0x7000002,0x6000002,0x40040,0x340070,0x0,0x340070,0x200,0x40040,0x0,0x400,0x0,0x0,0x40040,0x8,0x0,0x0,0x200,0x0,0x8,0x30800000,0x0,0x400,0x4,0x0,0x0,0x40040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40040,0x40000040,0x40040,0x200,0x40000040,0x40040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000040,0x40000,0x40,0x0,0x20007,0x40040,0x280,0x20007,0x40040,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[45];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public StrategoParser(CharStream stream) {
    token_source = new StrategoParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 151; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 151; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StrategoParser(StrategoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 151; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(StrategoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 151; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[159];
    for (int i = 0; i < 159; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 151; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 159; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 45; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
