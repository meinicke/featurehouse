/* Generated By:JavaCC: Do not edit this line. CSharpMergeParserTokenManager.java */
                                                                                                // adapted from csharp_fst.gcide

package de.ovgu.cide.fstgen.parsers.generated_csharp_merge;
                                                                                                                        // adapted from csharp_fst.gcide
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class CSharpMergeParserTokenManager implements CSharpMergeParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x2000L) != 0L)
            return 164;
         if ((active1 & 0x300000000000L) != 0L)
            return 153;
         if ((active0 & 0xffffffffffffff80L) != 0L || (active1 & 0x7fffffffL) != 0L)
         {
            jjmatchedKind = 147;
            return 1;
         }
         if ((active1 & 0x80000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0xfffffd7ffffdfd80L) != 0L || (active1 & 0x6bdf5577L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 147;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x28000020200L) != 0L || (active1 & 0x1420aa88L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xe000000400101000L) != 0L || (active1 & 0x12002a00L) != 0L)
            return 1;
         if ((active0 & 0x1fffff7bffefed80L) != 0L || (active1 & 0x69ff5577L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 147;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x11002800008a6900L) != 0L || (active1 & 0x18030006L) != 0L)
            return 1;
         if ((active0 & 0x8effd77bff658480L) != 0L || (active1 & 0x61fc7d71L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0xe20844028208000L) != 0L || (active1 & 0x21141010L) != 0L)
            return 1;
         if ((active0 & 0x80df533bd7450480L) != 0L || (active1 & 0x40e86d61L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x5d131041010000L) != 0L || (active1 & 0x40400501L) != 0L)
            return 1;
         if ((active0 & 0x8082402b96440480L) != 0L || (active1 & 0xa86860L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x8080000a06000000L) != 0L || (active1 & 0x804000L) != 0L)
            return 1;
         if ((active0 & 0x2402190440480L) != 0L || (active1 & 0x282860L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2002180440080L) != 0L || (active1 & 0x282020L) != 0L)
            return 1;
         if ((active0 & 0x400010000400L) != 0L || (active1 & 0x840L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000400L) != 0L || (active1 & 0x840L) != 0L)
            return 1;
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 34:
         return jjStartNfaWithStates_0(0, 141, 164);
      case 35:
         return jjStopAtPos(0, 140);
      case 37:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 38:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x100L);
      case 40:
         return jjStopAtPos(0, 100);
      case 41:
         return jjStopAtPos(0, 101);
      case 42:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 43:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1008000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 137);
      case 45:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2020000000000L, 0x10000L);
      case 46:
         return jjStartNfaWithStates_0(0, 95, 3);
      case 47:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 58:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 59:
         return jjStopAtPos(0, 139);
      case 60:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000L, 0x4L);
      case 61:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20001L);
      case 62:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000000000L, 0x10L);
      case 63:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x280L, 0x200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2a800L, 0x4000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xaaa80000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2aa00000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xaa80000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xaaa0000000000000L, 0x8000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000002L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000aaa8L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x2020000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x5400L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x550000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x55000000L, 0x800000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1500000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x55554000000000L, 0x40000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x5500000000000000L, 0x1L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1554L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x94000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x140000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 96);
      case 124:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x80L);
      case 125:
         return jjStopAtPos(0, 97);
      case 126:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 43:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 45:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      case 58:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      case 60:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 62:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe0000000000000L, active2, 0L);
      case 63:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001280c00L, active1, 0x800000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000010080L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x13f00001000L, active1, 0x42000000L, active2, 0L);
      case 102:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 67, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x500040002800000L, active1, 0x140000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x280100000000000L, active1, 0x1004004L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800080008000000L, active1, 0x10L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 110:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x10002b40L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000200a0002100L, active1, 0x4b0002L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000014008000L, active1, 0x28000000L, active2, 0L);
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x201400L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x15400000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40104000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000400000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x1L, active2, 0L);
      case 124:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 117);
         break;
      case 62:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1410108800000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x20040L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800002448000L, active1, 0x1100000L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000004000000L, active1, 0x51000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20002000004000L, active1, 0x40080000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000a0000100L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040010002000L, active1, 0x28000010L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x21L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8414000001000000L, active1, 0x804000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000080880L, active1, 0x200100L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 1);
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000220000L, active1, 0x10002802L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000220000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 1);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 119);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000801008000L, active1, 0x80100L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400002200000L, active1, 0L);
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 1);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8208102000010400L, active1, 0x40202801L);
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000200000000L, active1, 0L);
      case 107:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 1);
         break;
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2010040000000L, active1, 0x1040020L);
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x1010L);
      case 111:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 1);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x400L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000440000L, active1, 0x100000L);
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000028000000L, active1, 0L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x41004090000080L, active1, 0x804000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10001000000000L, active1, 0x20400000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000004040000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x50000000010000L, active1, 0x40000000L);
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 1);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 1);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 1);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 1);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 1);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x10010000000L, active1, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 103:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 1);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000c0000000L, active1, 0x800020L);
      case 107:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x400002000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80020000000000L, active1, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x201000000L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100100000000L, active1, 0x1L);
      case 112:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8001000400080L, active1, 0x2c00L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 1);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 1);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x4000L);
      case 119:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x402200000080L, active1, 0x804000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 1);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x8002000010000000L, active1, 0x60L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 1);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 1);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 1);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 1);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 103:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 1);
         break;
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 1);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 1);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 1);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0x2800L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 1);
         break;
      case 104:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x20L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 1);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 1);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x400100000000L, active1, 0x280000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2010000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0x800L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 1);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 1);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x40L);
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 1);
         break;
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 1);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 1);
         break;
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 1);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 85, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 1);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 1);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 1);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 46, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 164;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 164:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                  {
                     if (kind > 153)
                        kind = 153;
                  }
                  break;
               case 153:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(159, 160);
                  else if (curChar == 47)
                     jjCheckNAddStates(4, 6);
                  break;
               case 0:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 3);
                  if ((0xffffff7fffffdbffL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                  }
                  else if (curChar == 39)
                     jjAddStates(7, 9);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 150)
                        kind = 150;
                     jjCheckNAddStates(10, 19);
                  }
                  else if (curChar == 47)
                     jjAddStates(20, 21);
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  else if (curChar == 36)
                  {
                     if (kind > 147)
                        kind = 147;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 48)
                     jjAddStates(22, 23);
                  break;
               case 1:
                  if ((0x83ff801000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddStates(24, 27);
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddTwoStates(10, 7);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddStates(10, 19);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddStates(28, 31);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddTwoStates(16, 7);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddTwoStates(19, 7);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddTwoStates(22, 7);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAddTwoStates(25, 7);
                  break;
               case 35:
                  if (curChar == 39)
                     jjAddStates(7, 9);
                  break;
               case 36:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if (curChar == 39 && kind > 152)
                     kind = 152;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 37);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 37);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 37);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 64:
                  if (curChar == 48)
                     jjCheckNAdd(37);
                  break;
               case 66:
                  if (curChar == 34)
                     jjCheckNAdd(37);
                  break;
               case 67:
                  if (curChar == 39)
                     jjCheckNAdd(37);
                  break;
               case 68:
               case 87:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 3);
                  break;
               case 69:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 70:
                  if (curChar == 34 && kind > 153)
                     kind = 153;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 41);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 46);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 85:
                  if (curChar == 48)
                     jjCheckNAddStates(0, 3);
                  break;
               case 88:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
               case 103:
                  if (curChar == 34)
                     jjCheckNAddStates(47, 49);
                  break;
               case 104:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 106:
                  if (curChar == 34 && kind > 154)
                     kind = 154;
                  break;
               case 107:
                  if ((0xffffff7fffffdbffL & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 108:
                  if ((0xfffffffbffffdbffL & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 135:
                  if (curChar == 48 && kind > 165)
                     kind = 165;
                  break;
               case 137:
                  if (curChar == 34 && kind > 165)
                     kind = 165;
                  break;
               case 138:
                  if (curChar == 39 && kind > 165)
                     kind = 165;
                  break;
               case 139:
                  if (curChar == 48)
                     jjAddStates(22, 23);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjAddStates(50, 55);
                  break;
               case 152:
                  if (curChar == 47)
                     jjAddStates(20, 21);
                  break;
               case 154:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 155:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 156:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 157:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(159, 160);
                  break;
               case 159:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(159, 160);
                  break;
               case 160:
                  if (curChar == 42)
                     jjCheckNAddStates(56, 58);
                  break;
               case 161:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(162, 160);
                  break;
               case 162:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(162, 160);
                  break;
               case 163:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 164:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 92)
                     jjAddStates(59, 69);
                  if (curChar == 92)
                     jjAddStates(70, 72);
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  else if (curChar == 92)
                     jjAddStates(73, 83);
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                  }
                  else if (curChar == 92)
                     jjAddStates(84, 86);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 101)
                     jjAddStates(87, 88);
                  break;
               case 7:
                  if ((0x205000002050L & l) != 0L && kind > 150)
                     kind = 150;
                  break;
               case 8:
                  if (curChar == 69)
                     jjAddStates(89, 90);
                  break;
               case 14:
                  if (curChar == 101)
                     jjAddStates(91, 92);
                  break;
               case 17:
                  if (curChar == 69)
                     jjAddStates(93, 94);
                  break;
               case 20:
                  if (curChar == 101)
                     jjAddStates(95, 96);
                  break;
               case 23:
                  if (curChar == 69)
                     jjAddStates(97, 98);
                  break;
               case 26:
                  if ((0x20100000201000L & l) != 0L && kind > 150)
                     kind = 150;
                  break;
               case 27:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(28, 28);
                  break;
               case 28:
                  if (curChar == 76 && kind > 150)
                     kind = 150;
                  break;
               case 29:
                  if (curChar == 76)
                     jjCheckNAddTwoStates(30, 30);
                  break;
               case 30:
                  if (curChar == 85 && kind > 150)
                     kind = 150;
                  break;
               case 31:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(32, 28);
                  break;
               case 32:
                  if (curChar == 108 && kind > 150)
                     kind = 150;
                  break;
               case 33:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(34, 30);
                  break;
               case 34:
                  if (curChar == 117 && kind > 150)
                     kind = 150;
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(99, 101);
                  break;
               case 39:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(41, 37);
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(42, 37);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(43, 37);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 44:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 52:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if (curChar == 92)
                     jjAddStates(102, 112);
                  break;
               case 57:
                  if (curChar == 118)
                     jjCheckNAdd(37);
                  break;
               case 58:
                  if (curChar == 116)
                     jjCheckNAdd(37);
                  break;
               case 59:
                  if (curChar == 114)
                     jjCheckNAdd(37);
                  break;
               case 60:
                  if (curChar == 110)
                     jjCheckNAdd(37);
                  break;
               case 61:
                  if (curChar == 102)
                     jjCheckNAdd(37);
                  break;
               case 62:
                  if (curChar == 98)
                     jjCheckNAdd(37);
                  break;
               case 63:
                  if (curChar == 97)
                     jjCheckNAdd(37);
                  break;
               case 65:
                  if (curChar == 92)
                     jjCheckNAdd(37);
                  break;
               case 69:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 71:
                  if (curChar == 92)
                     jjAddStates(70, 72);
                  break;
               case 72:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(37, 41);
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(42, 46);
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 77:
                  if (curChar == 92)
                     jjAddStates(59, 69);
                  break;
               case 78:
                  if (curChar == 118)
                     jjCheckNAddStates(0, 3);
                  break;
               case 79:
                  if (curChar == 116)
                     jjCheckNAddStates(0, 3);
                  break;
               case 80:
                  if (curChar == 114)
                     jjCheckNAddStates(0, 3);
                  break;
               case 81:
                  if (curChar == 110)
                     jjCheckNAddStates(0, 3);
                  break;
               case 82:
                  if (curChar == 102)
                     jjCheckNAddStates(0, 3);
                  break;
               case 83:
                  if (curChar == 98)
                     jjCheckNAddStates(0, 3);
                  break;
               case 84:
                  if (curChar == 97)
                     jjCheckNAddStates(0, 3);
                  break;
               case 86:
                  if (curChar == 92)
                     jjCheckNAddStates(0, 3);
                  break;
               case 89:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
               case 100:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 97:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 101:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  jjAddStates(47, 49);
                  break;
               case 107:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 108:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 109:
                  if (curChar == 92)
                     jjAddStates(84, 86);
                  break;
               case 110:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 115:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
               case 126:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 123:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 127:
                  if (curChar == 92)
                     jjAddStates(73, 83);
                  break;
               case 128:
                  if (curChar == 118 && kind > 165)
                     kind = 165;
                  break;
               case 129:
                  if (curChar == 116 && kind > 165)
                     kind = 165;
                  break;
               case 130:
                  if (curChar == 114 && kind > 165)
                     kind = 165;
                  break;
               case 131:
                  if (curChar == 110 && kind > 165)
                     kind = 165;
                  break;
               case 132:
                  if (curChar == 102 && kind > 165)
                     kind = 165;
                  break;
               case 133:
                  if (curChar == 98 && kind > 165)
                     kind = 165;
                  break;
               case 134:
                  if (curChar == 97 && kind > 165)
                     kind = 165;
                  break;
               case 136:
                  if (curChar == 92 && kind > 165)
                     kind = 165;
                  break;
               case 140:
                  if (curChar == 120)
                     jjCheckNAdd(141);
                  break;
               case 141:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddStates(50, 55);
                  break;
               case 142:
                  if ((0x20100000201000L & l) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 143:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(144, 144);
                  break;
               case 144:
                  if (curChar == 76 && kind > 151)
                     kind = 151;
                  break;
               case 145:
                  if (curChar == 76)
                     jjCheckNAddTwoStates(146, 146);
                  break;
               case 146:
                  if (curChar == 85 && kind > 151)
                     kind = 151;
                  break;
               case 147:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(148, 144);
                  break;
               case 148:
                  if (curChar == 108 && kind > 151)
                     kind = 151;
                  break;
               case 149:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(150, 146);
                  break;
               case 150:
                  if (curChar == 117 && kind > 151)
                     kind = 151;
                  break;
               case 151:
                  if (curChar == 88)
                     jjCheckNAdd(141);
                  break;
               case 154:
                  jjAddStates(4, 6);
                  break;
               case 159:
                  jjCheckNAddTwoStates(159, 160);
                  break;
               case 161:
               case 162:
                  jjCheckNAddTwoStates(162, 160);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 164:
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 3);
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 162)
                        kind = 162;
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 105:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 49);
                  break;
               case 107:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 162)
                     kind = 162;
                  break;
               case 108:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 165)
                     kind = 165;
                  break;
               case 154:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 6);
                  break;
               case 159:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(159, 160);
                  break;
               case 161:
               case 162:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(162, 160);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 164 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   69, 70, 71, 77, 154, 155, 157, 36, 38, 56, 11, 12, 20, 23, 7, 26, 
   27, 29, 31, 33, 153, 158, 140, 151, 3, 4, 8, 7, 13, 14, 17, 7, 
   69, 74, 70, 71, 77, 69, 75, 70, 71, 77, 69, 76, 70, 71, 77, 104, 
   105, 106, 141, 142, 143, 145, 147, 149, 160, 161, 163, 78, 79, 80, 81, 82, 
   83, 84, 85, 86, 87, 88, 72, 89, 97, 128, 129, 130, 131, 132, 133, 134, 
   135, 136, 137, 138, 110, 115, 123, 5, 6, 9, 10, 15, 16, 18, 19, 21, 
   22, 24, 25, 39, 44, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 
   67, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\154\157\156\147", "\141\163", "\156\141\155\145\163\160\141\143\145", "\142\141\163\145", 
"\156\145\167", "\142\157\157\154", "\156\165\154\154", "\142\162\145\141\153", 
"\157\142\152\145\143\164", "\142\171\164\145", "\157\160\145\162\141\164\157\162", "\143\141\163\145", 
"\157\165\164", "\143\141\164\143\150", "\157\166\145\162\162\151\144\145", 
"\143\150\141\162", "\160\141\162\141\155\163", "\143\150\145\143\153\145\144", 
"\160\162\151\166\141\164\145", "\143\154\141\163\163", "\160\162\157\164\145\143\164\145\144", 
"\143\157\156\163\164", "\160\165\142\154\151\143", "\143\157\156\164\151\156\165\145", 
"\162\145\141\144\157\156\154\171", "\144\145\143\151\155\141\154", "\162\145\146", 
"\144\145\146\141\165\154\164", "\162\145\164\165\162\156", "\144\145\154\145\147\141\164\145", 
"\163\142\171\164\145", "\144\157", "\163\145\141\154\145\144", "\144\157\165\142\154\145", 
"\163\150\157\162\164", "\145\154\163\145", "\163\151\172\145\157\146", "\145\156\165\155", 
"\163\164\141\143\153\141\154\154\157\143", "\145\166\145\156\164", "\163\164\141\164\151\143", 
"\145\170\160\154\151\143\151\164", "\163\164\162\151\156\147", "\145\170\164\145\162\156", 
"\163\164\162\165\143\164", "\146\141\154\163\145", "\163\167\151\164\143\150", 
"\146\151\156\141\154\154\171", "\164\150\151\163", "\146\151\170\145\144", "\164\150\162\157\167", 
"\146\154\157\141\164", "\164\162\165\145", "\146\157\162", "\164\162\171", 
"\146\157\162\145\141\143\150", "\164\171\160\145\157\146", "\147\157\164\157", "\165\151\156\164", 
"\151\146", "\165\154\157\156\147", "\151\155\160\154\151\143\151\164", 
"\165\156\143\150\145\143\153\145\144", "\151\156", "\165\156\163\141\146\145", "\151\156\164", 
"\165\163\150\157\162\164", "\151\156\164\145\162\146\141\143\145", "\165\163\151\156\147", 
"\151\156\164\145\162\156\141\154", "\166\151\162\164\165\141\154", "\151\163", "\166\157\151\144", 
"\154\157\143\153", "\167\150\151\154\145", "\166\157\154\141\164\151\154\145", 
"\167\150\145\162\145", "\141\163\163\145\155\142\154\171", "\155\157\144\165\154\145", 
"\160\141\162\164\151\141\154", "\171\151\145\154\144", "\154\145\164", "\142\171", "\146\162\157\155", 
"\151\156\164\157", "\147\162\157\165\160", "\163\145\154\145\143\164", "\56", "\173", "\175", 
"\133", "\135", "\50", "\51", "\53", "\53\75", "\55", "\55\75", "\52", "\52\75", 
"\57", "\57\75", "\45", "\45\75", "\53\53", "\55\55", "\74\74", "\74\74\75", 
"\76\76", "\76\76\75", "\76\76\76", "\76\76\76\75", "\46", "\46\75", "\174", "\174\75", 
"\136", "\136\75", "\176", "\75", "\75\75", "\74", "\74\75", "\76", "\76\75", "\41", 
"\41\75", "\174\174", "\46\46", "\54", "\72", "\73", "\43", "\42", "\77", "\77\77", 
"\55\76", "\75\76", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\72\72", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xa407cbffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7eL, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[164];
private final int[] jjstateSet = new int[328];
protected char curChar;
public CSharpMergeParserTokenManager(CharStream stream){
   input_stream = stream;
}
public CSharpMergeParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 164; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
