/* Generated By:JavaCC: Do not edit this line. CApproxParser.java */
package de.ovgu.cide.fstgen.parsers.generated_capprox;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class CApproxParser extends AbstractFSTParser implements CApproxParserConstants {

        public CApproxParser() {}

    // Run the parser
    public static void main ( String args [ ] ) {
      CApproxParser parser ;


      if(args.length == 0){
        System.out.println("C (approx) Parser Version 0.1Alpha:  Reading from standard input . . .");
        parser = new CApproxParser(new OffsetCharStream(System.in));
      }
      else if(args.length == 1){
        System.out.println("C (approx) Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
      try {
        parser = new CApproxParser(new OffsetCharStream(new java.io.FileInputStream(args[0])));
      }
      catch(java.io.FileNotFoundException e){
        System.out.println("C (approx) Parser Version 0.1:  File " + args[0] + " not found.");
        return ;
        }
      }
      else {
        System.out.println("C (approx) Parser Version 0.1Alpha:  Usage is one of:");
        System.out.println("         java CParser < inputfile");
        System.out.println("OR");
        System.out.println("         java CParser inputfile");
        return ;
      }
      try {
        parser.TranslationUnit(false);
        System.out.println("C (approx) Parser Version 0.1Alpha:  Java program parsed successfully.");
      }
      catch(ParseException e){
        System.out.println("C (approx) Parser Version 0.1Alpha:  Encountered errors during parse.");
        e.printStackTrace();
      }
    }


         /**
     * Append the given {@link Token} and any preceding special tokens to a
     * given {@link StringBuffer}.
     *
     * @param token the given JavaCC {@link Token} object
     * @param buffer the buffer to which to append <code>token</code>
     **/
    final private static void accumulate (Token token, StringBuffer buffer) {

        // Append preceding special tokens to <code>buffer</code>:
        //
        Token special = firstSpecial (token) ;
        if (special != token)
            while (special != null) {
                buffer.append (special.toString ()) ;
                special = special.next ;
            }

        // Finally, append the token itself:
        //
        buffer.append (token.toString ()) ;
    }

    /**
     * Accumulate {@list Token} objects from the token stream, respecting
     * nested code inside <code>open</code> and <code>close</code> pairs,
     * until an unmatched <code>close</code> is the next token in the stream.
     * This method assumes that an <code>open</code> token has just been read
     * from the stream so the initial nesting level is 1.  The method returns
     * when a matching <code>close</code> token is the next token in the token
     * stream.  <em>The <code>close</code> token is left in the stream!</em>
     *
     * @return the accumulated tokens as a {@link String}.
     *
     * @throws ParseException
     * if an end-of-file is found before an unmatched <code>close</code> token.
     **/
    final private Token accumulateNestedRegion (int open, int close)
    throws ParseException {

        StringBuffer buffer = new StringBuffer () ;

        // Initialize result with known information (starting position, etc.):
        //
        Token result = Token.newToken (OTHER) ;
        result.specialToken = null ;

        Token startToken = firstSpecial (getToken (1)) ;
        result.beginColumn = startToken.beginColumn ;
        result.beginLine = startToken.beginLine ;

        // Accumulate tokens until a <code>close</code> token is found:
        //
        for (int nesting = 1 ; nesting > 0 ; ) {

            getNextToken () ;

            // Update information in result:
            //
            result.endColumn = token.endColumn ;
            result.endLine = token.endLine ;
            result.next = token.next ;

            if (token.kind == EOF)
                throw new ParseException (
                    "accumulating from line "
                    + result.beginLine
                    + " at column "
                    + result.beginColumn
                    + ": EOF reached before ending "
                    + tokenImage [close]
                    + " found"
                ) ;

                accumulate (token, buffer) ;
            if (token.kind == open)
                        ++ nesting ;
            else if (token.kind == close) {
                        if (nesting == 1)
                        break ;
                        -- nesting ;
            }



        }

        result.image = buffer.toString () ;
        return result ;
    }

    /**
     * Accumulate {@link Token} objects from the token stream until a token
     * matching <code>tokenKind</code> is consumed from the stream.  The
     * tokens are accumulated in <code>buffer</code>, including the terminating
     * token.
     *
     * @return a {@link Token}
     * formed by concatenating all intervening tokens and special tokens.
     **/
    final private Token accumulateUntilToken (int tokenKind)
    throws ParseException {

        StringBuffer buffer = new StringBuffer () ;
        Token token = getNextToken () ;

        // Initialize result with known information (starting position, etc.):
        //
        Token result = Token.newToken (OTHER) ;
        result.specialToken = null ;

        Token startToken = firstSpecial (token) ;
        result.beginColumn = startToken.beginColumn ;
        result.beginLine = startToken.beginLine ;

        // Accumulate tokens until a <code>tokenKind</code> token is found:
        //
        while (token.kind != tokenKind) {

            // Update information in result:
            //
            result.endColumn = token.endColumn ;
            result.endLine = token.endLine ;
            result.next = token.next ;

            if (token.kind == EOF)
                throw new ParseException (
                    "from line "
                    + result.beginLine
                    + " at column "
                    + result.beginColumn
                    + ": EOF reached before "
                    + tokenImage [tokenKind]
                    + " found"
                ) ;

            accumulate (token, buffer) ;
            token = getNextToken () ;
        }

        accumulate (token, buffer) ;

        result.image = buffer.toString () ;
        return result ;
    }
        /**
	 * finds the end of the current line for preprocessor instructions. handles
	 * also multiline makros ending with \
	 * 
	 * @return
	 * @throws ParseException
	 */
        final private Token accumulateUntilLineEnd() throws ParseException {
                StringBuffer buffer = new StringBuffer();
                Token nextToken = peekNext();

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(OTHER);
                result.specialToken = null;

                Token startToken = firstSpecial(nextToken);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;

                // Accumulate tokens until a <code>tokenKind</code> token is found:
                //
                while (!preceededByLinebreak(nextToken) || token.image.equals("\\")) {
                        getNextToken();

                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before special token" + " found");

                        accumulate(token, buffer);
                        nextToken = peekNext();
                }

                result.image = buffer.toString();
                return result;
        }

        private boolean preceededByLinebreak(Token t) {
                assert t != null;
                Token specialToken = t.specialToken;
                while (specialToken != null) {
                        if (specialToken.image.indexOf('\n')>=0)
                                return true;
                        specialToken = specialToken.specialToken;
                }
                return false;
        }
        private Token peekNext() {
                if (token.next == null)
                        token.next = token_source.getNextToken();
                return token.next;
        }
    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

        while (token.specialToken != null)
            token = token.specialToken ;

        return token ;
    }

  Token findEndGT() throws ParseException {
    return accumulateNestedRegion (LT, GT) ;
  }

  Token findLineEnd() throws ParseException {
    return accumulateUntilLineEnd() ;
  }

  Token findEndCB() throws ParseException {
    return accumulateNestedRegion(OB, CB) ;
  }

  Token findEndCCB() throws ParseException {
    return accumulateNestedRegion(OCB, CCB) ;
  }

  final public FSTInfo TranslationUnit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Sequence_CodeUnit_TopLevel(inTerminal);
                                                  replaceName(n);
    jj_consume_token(0);
                                                                          {if (true) return productionEndNonTerminal("TranslationUnit","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sequence_CodeUnit_TopLevel(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      n = CodeUnit_TopLevel(inTerminal);
                                                       replaceName(n);
    }
                                                                           {if (true) return productionEndNonTerminal("Sequence_CodeUnit_TopLevel","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CodeUnit_TopLevel(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_2(2)) {
      n = PPIncludeStatement(true);
                                                 replaceName("PPIncludeStatement", n);
                                                                                         replaceName(n);
                                                                                                           {if (true) return productionEndTerminal("Include","{PPIncludeStatement}","{PPIncludeStatement}","Replacement","Default",first,token);}
    } else if (jj_2_3(2)) {
      n = PPDefineStatement(true);
                                                replaceName("PPDefineStatement", n);
                                                                                       replaceName(n);
                                                                                                         {if (true) return productionEndTerminal("Define","{PPDefineStatement}","{PPDefineStatement}","Replacement","Default",first,token);}
    } else if (jj_2_4(2)) {
      n = PPIfDef_TopLevel(true);
                                               replaceName("PPIfDef_TopLevel", n);
                                                                                     replaceName(n);
                                                                                                       {if (true) return productionEndTerminal("IfDefTL","{PPIfDef_TopLevel}","{PPIfDef_TopLevel}","Replacement","Default",first,token);}
    } else if (jj_2_5(2)) {
      jj_consume_token(HASH);
      n = PPOtherIgnore(true);
                                                replaceName("PPOtherIgnore", n);
                                                                                   replaceName(n);
      findLineEnd();
                                                                                                                   {if (true) return productionEndTerminal("Preprocessor","{PPOtherIgnore}","{PPOtherIgnore}","Replacement","Default",first,token);}
    } else if (jj_2_6(2147483647)) {
      n = Function(true);
                                                      replaceName("Function", n);
                                                                                    replaceName(n);
                                                                                                      {if (true) return productionEndTerminal("Func","{Function}","{Function}","JavaMethodOverriding","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
        n = TypeDef(true);
                         replaceName("TypeDef", n);
                                                      replaceName(n);
                                                                        {if (true) return productionEndTerminal("TypeDef_","{TypeDef}","{TypeDef}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_7(3)) {
          n = ExternDecl(true);
                                         replaceName("ExternDecl", n);
                                                                         replaceName(n);
                                                                                           {if (true) return productionEndTerminal("ExternDec","{ExternDecl}","{ExternDecl}","Replacement","Default",first,token);}
        } else if (jj_2_8(3)) {
          jj_consume_token(STRUCT);
          n = Id(inTerminal);
                                                replaceName("Id", n);
                                                                        replaceName(n);
          jj_consume_token(OCB);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LITERAL:
            case INCLUDE:
            case DEFINE:
            case IFDEF:
            case IFNDEF:
            case ELIF:
            case ELSIF:
            case PPLINE:
            case PPPRAGMA:
            case PPERROR:
            case ENUM:
            case EXTERN:
            case UNSIGNED:
            case CONST:
            case STATIC:
            case STRUCT:
            case INLINE:
            case INLINE2:
            case INLINE3:
            case WEIREDSTUFF2:
            case IF:
            case ELSE:
            case FOR:
            case WHILE:
            case SEMI:
            case COLON:
            case COMMA:
            case LT:
            case GT:
            case OB:
            case CB:
            case OCB:
            case STAR:
            case EQ:
            case PIPE:
            case IDENTIFIER:
            case OTHER:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_2;
            }
            n = Statement(inTerminal);
                                                                                                                       replaceName(n);
          }
          jj_consume_token(CCB);
          jj_consume_token(SEMI);
                                                                                                                                                   {if (true) return productionEndNonTerminal("StructDec","{Id}","{Id}");}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LITERAL:
          case INCLUDE:
          case DEFINE:
          case IFDEF:
          case IFNDEF:
          case ELIF:
          case ELSIF:
          case PPLINE:
          case PPPRAGMA:
          case PPERROR:
          case ENUM:
          case EXTERN:
          case UNSIGNED:
          case CONST:
          case STATIC:
          case STRUCT:
          case INLINE:
          case INLINE2:
          case INLINE3:
          case WEIREDSTUFF2:
          case IF:
          case ELSE:
          case FOR:
          case WHILE:
          case SEMI:
          case COLON:
          case COMMA:
          case LT:
          case GT:
          case OB:
          case CB:
          case OCB:
          case STAR:
          case EQ:
          case PIPE:
          case IDENTIFIER:
          case OTHER:
            n = Statement(true);
                           replaceName("Statement", n);
                                                          replaceName(n);
                                                                            {if (true) return productionEndTerminal("StmtTL","{Statement}","{Statement}","Replacement","Default",first,token);}
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
                                                                            {if (true) return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CodeUnit_InBlock(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_9(2)) {
      n = PPIfDef_BlockLevel(true);
                                                 replaceName(n);
                                                                   {if (true) return productionEndTerminal("IfDefBL","-","-","Replacement","Default",first,token);}
    } else if (jj_2_10(2)) {
      n = PPIncludeStatement(true);
                                                 replaceName(n);
                                                                   {if (true) return productionEndTerminal("IncludeBL","-","-","Replacement","Default",first,token);}
    } else if (jj_2_11(2)) {
      n = PPDefineStatement(true);
                                                replaceName(n);
                                                                  {if (true) return productionEndTerminal("DefineBL","-","-","Replacement","Default",first,token);}
    } else if (jj_2_12(2)) {
      jj_consume_token(HASH);
      n = PPOtherIgnore(true);
                                                replaceName(n);
      findLineEnd();
                                                                                {if (true) return productionEndTerminal("PreprocessorBL","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        n = IfStatement(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("If","-","-","Replacement","Default",first,token);}
        break;
      case FOR:
        n = ForStatement(true);
                                           replaceName(n);
                                                             {if (true) return productionEndTerminal("For","-","-","Replacement","Default",first,token);}
        break;
      case WHILE:
        n = WhileStatement(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("While","-","-","Replacement","Default",first,token);}
        break;
      case DO:
        n = DoStatement(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("Do","-","-","Replacement","Default",first,token);}
        break;
      case SWITCH:
        n = SwitchStatement(true);
                                              replaceName(n);
                                                                {if (true) return productionEndTerminal("Switch","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_13(2)) {
          n = GotoLabel(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("CodeUnit_InBlock10","-","-","Replacement","Default",first,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OCB:
            n = Block(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("Blck","-","-","Replacement","Default",first,token);}
            break;
          case LITERAL:
          case INCLUDE:
          case DEFINE:
          case IFDEF:
          case IFNDEF:
          case ELIF:
          case ELSIF:
          case PPLINE:
          case PPPRAGMA:
          case PPERROR:
          case ENUM:
          case EXTERN:
          case UNSIGNED:
          case CONST:
          case STATIC:
          case STRUCT:
          case INLINE:
          case INLINE2:
          case INLINE3:
          case WEIREDSTUFF2:
          case IF:
          case ELSE:
          case FOR:
          case WHILE:
          case SEMI:
          case COLON:
          case COMMA:
          case LT:
          case GT:
          case OB:
          case CB:
          case STAR:
          case EQ:
          case PIPE:
          case IDENTIFIER:
          case OTHER:
            n = Statement(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("Stmt","-","-","Replacement","Default",first,token);}
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Statement(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case INCLUDE:
      case DEFINE:
      case IFDEF:
      case IFNDEF:
      case ELIF:
      case ELSIF:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case COLON:
      case COMMA:
      case LT:
      case GT:
      case OB:
      case CB:
      case OCB:
      case STAR:
      case EQ:
      case PIPE:
      case IDENTIFIER:
      case OTHER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      n = AnyStmtToken(true);
                               replaceName(n);
    }
    jj_consume_token(SEMI);
                                                       {if (true) return productionEndTerminal("Statement","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfStatement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IF);
    jj_consume_token(OB);
    findEndCB();
    n = BlockOrSingleStatement(true);
                                                             replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n = ElseBlock(true);
                                                                                                               replaceName(n);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                                                                                                                                  {if (true) return productionEndTerminal("IfStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ElseBlock(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ELSE);
                 {if (true) return productionEndTerminal("ElseBlock","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ForStatement(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FOR);
    jj_consume_token(OB);
    findEndCB();
    n = BlockOrSingleStatement(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("ForStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo WhileStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WHILE);
    jj_consume_token(OB);
    findEndCB();
    n = BlockOrSingleStatement(true);
                                                                replaceName(n);
                                                                                  {if (true) return productionEndTerminal("WhileStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DoStatement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DO);
    n = BlockOrSingleStatement(true);
                                             replaceName(n);
    jj_consume_token(WHILE);
    jj_consume_token(OB);
    findEndCB();
    jj_consume_token(SEMI);
                                                                                           {if (true) return productionEndTerminal("DoStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchStatement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SWITCH);
    jj_consume_token(OB);
    findEndCB();
    jj_consume_token(OCB);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case SWDEFAULT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      n = SwCase(true);
                                                      replaceName(n);
    }
    jj_consume_token(CCB);
                                                                              {if (true) return productionEndTerminal("SwitchStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwCase(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SWDEFAULT:
      jj_consume_token(SWDEFAULT);
      jj_consume_token(COLON);
      n = Sequence_CodeUnit_InBlock(true);
                                                         replaceName(n);
                                                                           {if (true) return productionEndTerminal("SwCase1","-","-","Replacement","Default",first,token);}
      break;
    case CASE:
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OB:
        jj_consume_token(OB);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(CB);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      n = SwCaseLabel(true);
                                                                        replaceName(n);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        n = MoreSwCaseLabel(true);
                                                                                                                   replaceName(n);
      }
      jj_consume_token(COLON);
      n = Sequence_CodeUnit_InBlock(true);
                                                                                                                                                                             replaceName(n);
                                                                                                                                                                                               {if (true) return productionEndTerminal("SwCase2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwCaseLabel(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("SwCaseLabel1","-","-","Replacement","Default",first,token);}
      break;
    case LITERAL:
    case OTHER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER:
        jj_consume_token(OTHER);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(LITERAL);
                             {if (true) return productionEndTerminal("SwCaseLabel2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MoreSwCaseLabel(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(PIPE);
    n = SwCaseLabel(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("MoreSwCaseLabel","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExternDecl(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EXTERN);
    jj_consume_token(LITERAL);
    n = Block(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("ExternDecl","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PPIncludeStatement(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(HASH);
    jj_consume_token(INCLUDE);
    findLineEnd();
                                     {if (true) return productionEndTerminal("PPIncludeStatement","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PPDefineStatement(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_14(2)) {
      jj_consume_token(HASH);
      jj_consume_token(DEFINE);
      findLineEnd();
                                                 {if (true) return productionEndTerminal("PPDefineStatement1","-","{TOSTRING}","Replacement","Default",first,token);}
    } else if (jj_2_15(2)) {
      jj_consume_token(HASH);
      jj_consume_token(PPUNDEF);
      findLineEnd();
                                                {if (true) return productionEndTerminal("PPDefineStatement2","-","{TOSTRING}","Replacement","Default",first,token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PPIfDef_TopLevel(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = IfDefLine(true);
                           replaceName(n);
    n = Sequence_CodeUnit_TopLevel(true);
                                                                                replaceName(n);
    label_6:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_6;
      }
      n = IfElseIf_TopLevel(true);
                                                                                                                                          replaceName(n);
    }
    if (jj_2_17(2)) {
      jj_consume_token(HASH);
      jj_consume_token(ELSE);
      n = Sequence_CodeUnit_TopLevel(true);
                                                                                                                                                                                                                          replaceName(n);
    } else {
      ;
    }
    jj_consume_token(HASH);
    jj_consume_token(ENDIF);
                                                                                                                                                                                                                                                         {if (true) return productionEndTerminal("PPIfDef_TopLevel","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PPIfDef_BlockLevel(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = IfDefLine(true);
                           replaceName(n);
    n = Sequence_CodeUnit_InBlock(true);
                                                                               replaceName(n);
    label_7:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_7;
      }
      n = IfElseIf_BlockLevel(true);
                                                                                                                                           replaceName(n);
    }
    if (jj_2_19(2)) {
      jj_consume_token(HASH);
      jj_consume_token(ELSE);
      n = Sequence_CodeUnit_InBlock(true);
                                                                                                                                                                                                                          replaceName(n);
    } else {
      ;
    }
    jj_consume_token(HASH);
    jj_consume_token(ENDIF);
                                                                                                                                                                                                                                                         {if (true) return productionEndTerminal("PPIfDef_BlockLevel","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PPOtherIgnore(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PPLINE:
      jj_consume_token(PPLINE);
                 {if (true) return productionEndTerminal("PPOtherIgnore1","-","{TOSTRING}","Replacement","Default",first,token);}
      break;
    case PPPRAGMA:
      jj_consume_token(PPPRAGMA);
                   {if (true) return productionEndTerminal("PPOtherIgnore2","-","{TOSTRING}","Replacement","Default",first,token);}
      break;
    case PPERROR:
      jj_consume_token(PPERROR);
                  {if (true) return productionEndTerminal("PPOtherIgnore3","-","{TOSTRING}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfDefLine(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_20(2)) {
      jj_consume_token(HASH);
      jj_consume_token(IFDEF);
      jj_consume_token(IDENTIFIER);
                                               {if (true) return productionEndTerminal("IfDefLine1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_21(2)) {
      jj_consume_token(HASH);
      jj_consume_token(IFNDEF);
      jj_consume_token(IDENTIFIER);
                                                {if (true) return productionEndTerminal("IfDefLine2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASH:
        jj_consume_token(HASH);
        jj_consume_token(IF);
        findLineEnd();
                                {if (true) return productionEndTerminal("IfDefLine3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfElseIf(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_22(2)) {
      jj_consume_token(HASH);
      jj_consume_token(ELIF);
                                  {if (true) return productionEndTerminal("IfElseIf1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASH:
        jj_consume_token(HASH);
        jj_consume_token(ELSIF);
                      {if (true) return productionEndTerminal("IfElseIf2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfElseIf_BlockLevel(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = IfElseIf(true);
                          replaceName(n);
    findLineEnd();
    n = Sequence_CodeUnit_InBlock(true);
                                                                                            replaceName(n);
                                                                                                              {if (true) return productionEndTerminal("IfElseIf_BlockLevel","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfElseIf_TopLevel(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = IfElseIf(true);
                          replaceName(n);
    findLineEnd();
    n = Sequence_CodeUnit_TopLevel(true);
                                                                                             replaceName(n);
                                                                                                               {if (true) return productionEndTerminal("IfElseIf_TopLevel","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Function(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = FunctionHeader(true);
                                replaceName("FunctionHeader", n);
                                                                    replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case OB:
    case STAR:
    case PIPE:
    case IDENTIFIER:
    case OTHER:
      n = FunctionParameterList(true);
                                                                                                                     replaceName("FunctionParameterList", n);
                                                                                                                                                                replaceName(n);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(CB);
    n = BlockOrSemi(true);
                                                                                                                                                                                                           replaceName(n);
                                                                                                                                                                                                                             {if (true) return productionEndTerminal("Function","-","{FunctionHeader}({FunctionParameterList})","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionHeader(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERN:
      case STATIC:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      n = Modifier(true);
                           replaceName(n);
    }
    n = FunctionReturnType(true);
                                                                          replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WEIREDSTUFF1:
      n = FunctionExoticStuff(true);
                                                                                                                                             replaceName(n);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                               replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    jj_consume_token(OB);
                                                                                                                                                                                                                                       {if (true) return productionEndTerminal("FunctionHeader","-","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionReturnType(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      jj_consume_token(CONST);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      jj_consume_token(STRUCT);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
                                                           {if (true) return productionEndTerminal("FunctionReturnType","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Modifier(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                   {if (true) return productionEndTerminal("Modifier1","-","-","Replacement","Default",first,token);}
      break;
    case INLINE:
      jj_consume_token(INLINE);
                   {if (true) return productionEndTerminal("Modifier2","-","-","Replacement","Default",first,token);}
      break;
    case INLINE2:
      jj_consume_token(INLINE2);
                       {if (true) return productionEndTerminal("Modifier3","-","-","Replacement","Default",first,token);}
      break;
    case INLINE3:
      jj_consume_token(INLINE3);
                     {if (true) return productionEndTerminal("Modifier4","-","-","Replacement","Default",first,token);}
      break;
    case EXTERN:
      jj_consume_token(EXTERN);
                   {if (true) return productionEndTerminal("Modifier5","-","-","Replacement","Default",first,token);}
      break;
    case WEIREDSTUFF2:
      jj_consume_token(WEIREDSTUFF2);
                         {if (true) return productionEndTerminal("Modifier6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionExoticStuff(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WEIREDSTUFF1);
    jj_consume_token(OB);
    jj_consume_token(LITERAL);
    jj_consume_token(CB);
                                       {if (true) return productionEndTerminal("FunctionExoticStuff","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionParameterList(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = FunctionParameter(true);
                                   replaceName(n);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      n = FunctionParameter(true);
                                                                                    replaceName(n);
    }
                                                                                                        {if (true) return productionEndTerminal("FunctionParameterList","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionParameter(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_10:
    while (true) {
      n = VarDeclToken(true);
                               replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case OB:
      case STAR:
      case PIPE:
      case IDENTIFIER:
      case OTHER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
    }
                                                   {if (true) return productionEndTerminal("FunctionParameter","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Block(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(OCB);
    n = Sequence_CodeUnit_InBlock(true);
                                               replaceName(n);
    jj_consume_token(CCB);
                                                                     {if (true) return productionEndTerminal("Block","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo GotoLabel(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
                          {if (true) return productionEndTerminal("GotoLabel","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sequence_CodeUnit_InBlock(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_11:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_11;
      }
      n = CodeUnit_InBlock(true);
                                                replaceName(n);
    }
                                                                    {if (true) return productionEndTerminal("Sequence_CodeUnit_InBlock","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BlockOrSemi(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                           {if (true) return productionEndTerminal("BlockOrSemi1","-","-","Replacement","Default",first,token);}
      break;
    case OCB:
      n = Block(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("BlockOrSemi2","-","-","Replacement","Default",first,token);}
      break;
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case COMMA:
    case OB:
    case STAR:
    case PIPE:
    case IDENTIFIER:
    case OTHER:
      label_12:
      while (true) {
        n = VarDecl(true);
                          replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERAL:
        case PPLINE:
        case PPPRAGMA:
        case PPERROR:
        case ENUM:
        case EXTERN:
        case UNSIGNED:
        case CONST:
        case STATIC:
        case STRUCT:
        case INLINE:
        case INLINE2:
        case INLINE3:
        case WEIREDSTUFF2:
        case SEMI:
        case COMMA:
        case OB:
        case STAR:
        case PIPE:
        case IDENTIFIER:
        case OTHER:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
      }
      n = Block(true);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("BlockOrSemi3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BlockOrSingleStatement(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCB:
      n = Block(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("BlockOrSingleStatement1","-","-","Replacement","Default",first,token);}
      break;
    case LITERAL:
    case INCLUDE:
    case DEFINE:
    case IFDEF:
    case IFNDEF:
    case ELIF:
    case ELSIF:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case IF:
    case ELSE:
    case FOR:
    case WHILE:
    case DO:
    case SWITCH:
    case SEMI:
    case COLON:
    case COMMA:
    case LT:
    case GT:
    case OB:
    case CB:
    case STAR:
    case EQ:
    case HASH:
    case PIPE:
    case IDENTIFIER:
    case OTHER:
      n = CodeUnit_InBlock(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("BlockOrSingleStatement2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeDef(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_24(2)) {
      jj_consume_token(TYPEDEF);
      jj_consume_token(ENUM);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERAL:
        case INCLUDE:
        case DEFINE:
        case IFDEF:
        case IFNDEF:
        case ELIF:
        case ELSIF:
        case PPLINE:
        case PPPRAGMA:
        case PPERROR:
        case ENUM:
        case EXTERN:
        case UNSIGNED:
        case CONST:
        case STATIC:
        case STRUCT:
        case INLINE:
        case INLINE2:
        case INLINE3:
        case WEIREDSTUFF2:
        case IF:
        case ELSE:
        case FOR:
        case WHILE:
        case COLON:
        case COMMA:
        case LT:
        case GT:
        case OB:
        case CB:
        case OCB:
        case CCB:
        case STAR:
        case EQ:
        case PIPE:
        case IDENTIFIER:
        case OTHER:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        n = AnyTypeDefToken(true);
                                                                replaceName(n);
      }
      jj_consume_token(SEMI);
                                                                                        {if (true) return productionEndTerminal("TypeDef1","-","{TOSTRING}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
        jj_consume_token(TYPEDEF);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LITERAL:
          case INCLUDE:
          case DEFINE:
          case IFDEF:
          case IFNDEF:
          case ELIF:
          case ELSIF:
          case PPLINE:
          case PPPRAGMA:
          case PPERROR:
          case ENUM:
          case EXTERN:
          case UNSIGNED:
          case CONST:
          case STATIC:
          case STRUCT:
          case INLINE:
          case INLINE2:
          case INLINE3:
          case WEIREDSTUFF2:
          case IF:
          case ELSE:
          case FOR:
          case WHILE:
          case COLON:
          case COMMA:
          case LT:
          case GT:
          case OB:
          case CB:
          case OCB:
          case STAR:
          case EQ:
          case PIPE:
          case IDENTIFIER:
          case OTHER:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_14;
          }
          n = AnyStmtToken(true);
                                         replaceName(n);
        }
        jj_consume_token(SEMI);
                                                                 {if (true) return productionEndTerminal("TypeDef2","-","{TOSTRING}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BlockAssignment(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OB:
      n = Cast(true);
                           replaceName(n);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(OCB);
    findEndCCB();
                                                               {if (true) return productionEndTerminal("BlockAssignment","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EnumBlock(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ENUM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(OCB);
    findEndCCB();
                                                {if (true) return productionEndTerminal("EnumBlock","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Cast(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(OB);
    n = FunctionReturnType(true);
                                        replaceName(n);
    jj_consume_token(CB);
                                                              {if (true) return productionEndTerminal("Cast","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AnyTypeDefToken(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCB:
      jj_consume_token(OCB);
                           {if (true) return productionEndTerminal("AnyTypeDefToken1","-","-","Replacement","Default",first,token);}
      break;
    case CCB:
      jj_consume_token(CCB);
              {if (true) return productionEndTerminal("AnyTypeDefToken2","-","-","Replacement","Default",first,token);}
      break;
    case LITERAL:
    case INCLUDE:
    case DEFINE:
    case IFDEF:
    case IFNDEF:
    case ELIF:
    case ELSIF:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case IF:
    case ELSE:
    case FOR:
    case WHILE:
    case COLON:
    case COMMA:
    case LT:
    case GT:
    case OB:
    case CB:
    case STAR:
    case EQ:
    case PIPE:
    case IDENTIFIER:
    case OTHER:
      n = AnyStmtToken(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("AnyTypeDefToken3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AnyStmtToken(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("AnyStmtToken1","-","-","Replacement","Default",first,token);}
      break;
    case LITERAL:
      jj_consume_token(LITERAL);
                   {if (true) return productionEndTerminal("AnyStmtToken2","-","-","Replacement","Default",first,token);}
      break;
    case OTHER:
      jj_consume_token(OTHER);
                 {if (true) return productionEndTerminal("AnyStmtToken3","-","-","Replacement","Default",first,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
              {if (true) return productionEndTerminal("AnyStmtToken4","-","-","Replacement","Default",first,token);}
      break;
    case PIPE:
      jj_consume_token(PIPE);
              {if (true) return productionEndTerminal("AnyStmtToken5","-","-","Replacement","Default",first,token);}
      break;
    case LT:
      jj_consume_token(LT);
              {if (true) return productionEndTerminal("AnyStmtToken6","-","-","Replacement","Default",first,token);}
      break;
    case GT:
      jj_consume_token(GT);
              {if (true) return productionEndTerminal("AnyStmtToken7","-","-","Replacement","Default",first,token);}
      break;
    case OB:
      jj_consume_token(OB);
              {if (true) return productionEndTerminal("AnyStmtToken8","-","-","Replacement","Default",first,token);}
      break;
    case CB:
      jj_consume_token(CB);
              {if (true) return productionEndTerminal("AnyStmtToken9","-","-","Replacement","Default",first,token);}
      break;
    case OCB:
      n = Block(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("AnyStmtToken10","-","-","Replacement","Default",first,token);}
      break;
    case IF:
      jj_consume_token(IF);
               {if (true) return productionEndTerminal("AnyStmtToken11","-","-","Replacement","Default",first,token);}
      break;
    case ELSE:
      jj_consume_token(ELSE);
                 {if (true) return productionEndTerminal("AnyStmtToken12","-","-","Replacement","Default",first,token);}
      break;
    case FOR:
      jj_consume_token(FOR);
                {if (true) return productionEndTerminal("AnyStmtToken13","-","-","Replacement","Default",first,token);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
                  {if (true) return productionEndTerminal("AnyStmtToken14","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[35] = jj_gen;
      if (jj_2_25(3)) {
        n = EnumBlock(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("AnyStmtToken15","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENUM:
          jj_consume_token(ENUM);
                 {if (true) return productionEndTerminal("AnyStmtToken16","-","-","Replacement","Default",first,token);}
          break;
        case STAR:
          jj_consume_token(STAR);
              {if (true) return productionEndTerminal("AnyStmtToken17","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[36] = jj_gen;
          if (jj_2_26(2147483647)) {
            n = BlockAssignment(true);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("AnyStmtToken18","-","-","Replacement","Default",first,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EQ:
              jj_consume_token(EQ);
              {if (true) return productionEndTerminal("AnyStmtToken19","-","-","Replacement","Default",first,token);}
              break;
            case COLON:
              jj_consume_token(COLON);
              {if (true) return productionEndTerminal("AnyStmtToken20","-","-","Replacement","Default",first,token);}
              break;
            case EXTERN:
            case STATIC:
            case INLINE:
            case INLINE2:
            case INLINE3:
            case WEIREDSTUFF2:
              n = Modifier(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("AnyStmtToken21","-","-","Replacement","Default",first,token);}
              break;
            case IFDEF:
              jj_consume_token(IFDEF);
                  {if (true) return productionEndTerminal("AnyStmtToken22","-","-","Replacement","Default",first,token);}
              break;
            case IFNDEF:
              jj_consume_token(IFNDEF);
                   {if (true) return productionEndTerminal("AnyStmtToken23","-","-","Replacement","Default",first,token);}
              break;
            case DEFINE:
              jj_consume_token(DEFINE);
                   {if (true) return productionEndTerminal("AnyStmtToken24","-","-","Replacement","Default",first,token);}
              break;
            case INCLUDE:
              jj_consume_token(INCLUDE);
                    {if (true) return productionEndTerminal("AnyStmtToken25","-","-","Replacement","Default",first,token);}
              break;
            case ELIF:
              jj_consume_token(ELIF);
                 {if (true) return productionEndTerminal("AnyStmtToken26","-","-","Replacement","Default",first,token);}
              break;
            case ELSIF:
              jj_consume_token(ELSIF);
                  {if (true) return productionEndTerminal("AnyStmtToken27","-","-","Replacement","Default",first,token);}
              break;
            case PPLINE:
            case PPPRAGMA:
            case PPERROR:
              n = PPOtherIgnore(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("AnyStmtToken28","-","-","Replacement","Default",first,token);}
              break;
            case CONST:
              jj_consume_token(CONST);
                  {if (true) return productionEndTerminal("AnyStmtToken29","-","-","Replacement","Default",first,token);}
              break;
            case STRUCT:
              jj_consume_token(STRUCT);
                   {if (true) return productionEndTerminal("AnyStmtToken30","-","-","Replacement","Default",first,token);}
              break;
            case UNSIGNED:
              jj_consume_token(UNSIGNED);
                     {if (true) return productionEndTerminal("AnyStmtToken31","-","-","Replacement","Default",first,token);}
              break;
            default:
              jj_la1[37] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VarDecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case COMMA:
      case OB:
      case STAR:
      case PIPE:
      case IDENTIFIER:
      case OTHER:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_15;
      }
      n = VarDeclTokenOrComma(true);
                                      replaceName(n);
    }
    jj_consume_token(SEMI);
                                                              {if (true) return productionEndTerminal("VarDecl","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VarDeclTokenOrComma(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case OB:
    case STAR:
    case PIPE:
    case IDENTIFIER:
    case OTHER:
      n = VarDeclToken(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("VarDeclTokenOrComma1","-","-","Replacement","Default",first,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
              {if (true) return productionEndTerminal("VarDeclTokenOrComma2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VarDeclToken(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("VarDeclToken1","-","-","Replacement","Default",first,token);}
      break;
    case LITERAL:
      jj_consume_token(LITERAL);
                   {if (true) return productionEndTerminal("VarDeclToken2","-","-","Replacement","Default",first,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("VarDeclToken3","-","-","Replacement","Default",first,token);}
      break;
    case OTHER:
      jj_consume_token(OTHER);
                 {if (true) return productionEndTerminal("VarDeclToken4","-","-","Replacement","Default",first,token);}
      break;
    case PIPE:
      jj_consume_token(PIPE);
              {if (true) return productionEndTerminal("VarDeclToken5","-","-","Replacement","Default",first,token);}
      break;
    case CONST:
      jj_consume_token(CONST);
                  {if (true) return productionEndTerminal("VarDeclToken6","-","-","Replacement","Default",first,token);}
      break;
    case STRUCT:
      jj_consume_token(STRUCT);
                   {if (true) return productionEndTerminal("VarDeclToken7","-","-","Replacement","Default",first,token);}
      break;
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
                     {if (true) return productionEndTerminal("VarDeclToken8","-","-","Replacement","Default",first,token);}
      break;
    case ENUM:
      jj_consume_token(ENUM);
                 {if (true) return productionEndTerminal("VarDeclToken9","-","-","Replacement","Default",first,token);}
      break;
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
      n = PPOtherIgnore(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("VarDeclToken10","-","-","Replacement","Default",first,token);}
      break;
    case EXTERN:
    case STATIC:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
      n = Modifier(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("VarDeclToken11","-","-","Replacement","Default",first,token);}
      break;
    case OB:
      jj_consume_token(OB);
      findEndCB();
                         {if (true) return productionEndTerminal("VarDeclToken12","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Literal(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LITERAL);
                   {if (true) return productionEndTerminal("Literal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(IFNDEF)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(IFDEF)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(IFNDEF)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(IFDEF)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(PPERROR)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(PPPRAGMA)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(PPLINE)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(CB)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(PPUNDEF)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(OTHER)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_scan_token(LITERAL)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(OB)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(CB)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(TYPEDEF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(OCB)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(CCB)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(HASH)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(WEIREDSTUFF1)) return true;
    if (jj_scan_token(OB)) return true;
    if (jj_scan_token(LITERAL)) return true;
    if (jj_scan_token(CB)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(WEIREDSTUFF2)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(INLINE3)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(INLINE2)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(INLINE)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(HASH)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(ELSIF)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELSIF)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_50()) return true;
    return false;
  }

  public CApproxParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xdbbc0200,0x20000000,0xdbbc0200,0x0,0xdbbc0200,0xdbbc0200,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x1a000000,0x0,0x0,0xda000200,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0xda000200,0xda000200,0xda000200,0xdbbc0200,0xdbbc0200,0xdbbc0200,0x20000000,0x0,0x0,0xdbbc0200,0x200,0x40000000,0x9bbc0000,0xda000200,0xda000200,0xda000200,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x6dfe1f7f,0x0,0x6dfe1f7f,0x7a00,0x6dfe1f7f,0x6dfc1f7f,0x400,0x18000,0x400000,0x20000000,0x18000,0x0,0x40000000,0x0,0x10000000,0x10000000,0x6440017f,0x174,0x4000000,0x80,0x2,0x8,0x1,0x174,0x80000,0x6440017f,0x644a017f,0x654a017f,0x7dfe7f7f,0x6ffc1f7f,0x6dfc1f7f,0x0,0x400000,0x40000000,0x6ffc1f7f,0x61f81e00,0x4000000,0x804017f,0x6448017f,0x6448017f,0x6440017f,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x2,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x2,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CApproxParser(CharStream stream) {
    token_source = new CApproxParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CApproxParser(CApproxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CApproxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[66];
    for (int i = 0; i < 66; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
