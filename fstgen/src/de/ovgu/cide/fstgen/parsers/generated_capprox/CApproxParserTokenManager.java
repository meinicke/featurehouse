/* Generated By:JavaCC: Do not edit this line. CApproxParserTokenManager.java */
package de.ovgu.cide.fstgen.parsers.generated_capprox;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class CApproxParserTokenManager implements CApproxParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fe1ffdfc0000L) != 0L)
         {
            jjmatchedKind = 62;
            return 30;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 38;
         }
         if ((active0 & 0x1e000000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 88;
         }
         return -1;
      case 1:
         if ((active0 & 0x1e000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active0 & 0x1dc1fffcc0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active0 & 0x220000300000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0x1d5fffffc0000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
            return 30;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0x151ffbd7c0000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x840042800000L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0x141fda82c0000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active0 & 0x100215500000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x101e120040000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x401c88280000L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x1000020040000L) != 0L)
            return 30;
         if ((active0 & 0x1e100000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
            return 30;
         }
         return -1;
      case 7:
         if ((active0 & 0x18000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 7;
            }
            return 30;
         }
         if ((active0 & 0x6100000000L) != 0L)
            return 30;
         return -1;
      case 8:
         if ((active0 & 0x12000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
            return 30;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 30;
         return -1;
      case 9:
         if ((active0 & 0x2000000000L) != 0L)
            return 30;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
            return 30;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
            return 30;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      case 35:
         return jjStopAtPos(0, 60);
      case 40:
         return jjStopAtPos(0, 54);
      case 41:
         return jjStopAtPos(0, 55);
      case 42:
         return jjStopAtPos(0, 58);
      case 44:
         return jjStopAtPos(0, 51);
      case 58:
         return jjStopAtPos(0, 50);
      case 59:
         return jjStopAtPos(0, 49);
      case 60:
         return jjStopAtPos(0, 52);
      case 61:
         return jjStopAtPos(0, 59);
      case 62:
         return jjStopAtPos(0, 53);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x1e000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800200000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1200000080000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400d1c00000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x21000340000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400c00000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x104000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 123:
         return jjStopAtPos(0, 56);
      case 124:
         return jjStopAtPos(0, 61);
      case 125:
         return jjStopAtPos(0, 57);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000080000L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40001800000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1144440000L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 30);
         return jjMoveStringLiteralDfa2_0(active0, 0x80200000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x408000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4500000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000080000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x506000800000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x202200000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x840101000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 30);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 30);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x80a4100000L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 30);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1101480000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000040000L);
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 30);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400800000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 30);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 30);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 30);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 30);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8100000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000080000L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 30);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000040000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 97:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 30);
         break;
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 30);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 30);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 30);
         break;
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 30);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 30);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 107:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 95:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 40, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 114;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 36)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(24);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(14, 16);
                  }
                  break;
               case 88:
               case 30:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(30);
                  break;
               case 87:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(30);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(30);
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 3:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 4:
                  if (curChar == 34 && kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 7:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 9:
                  if (curChar == 10)
                     jjCheckNAddStates(11, 13);
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 9)
                     kind = 9;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 13);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(21, 23);
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if (curChar != 36)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(30);
                  break;
               case 35:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 40:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(14, 16);
                  break;
               case 41:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(41, 22);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(43, 22);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 28);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(52, 28);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar != 46)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(27, 29);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(27, 29);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(58, 28);
                  break;
               case 59:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 60:
                  if (curChar == 47)
                     jjCheckNAddStates(30, 32);
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 62:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 63:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 64:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 42)
                     jjCheckNAddStates(33, 35);
                  break;
               case 68:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(69, 67);
                  break;
               case 69:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(69, 67);
                  break;
               case 70:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 72:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(73, 75);
                  break;
               case 73:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 75);
                  break;
               case 74:
                  if (curChar == 41 && kind > 7)
                     kind = 7;
                  break;
               case 75:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 89:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(90, 93);
                  break;
               case 90:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(90, 93);
                  break;
               case 91:
                  if (curChar == 41 && kind > 8)
                     kind = 8;
                  break;
               case 92:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 100:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 95)
                     jjAddStates(36, 37);
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if (curChar == 92)
                     jjAddStates(38, 41);
                  break;
               case 3:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(42, 44);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 22:
                  if ((0x100000001000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 28:
                  if ((0x5000000050L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 103 && kind > 62)
                     kind = 62;
                  break;
               case 32:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 42:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(43, 22);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 61:
                  jjAddStates(30, 32);
                  break;
               case 66:
                  jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
               case 69:
                  jjCheckNAddTwoStates(69, 67);
                  break;
               case 71:
                  if (curChar == 95)
                     jjAddStates(36, 37);
                  break;
               case 73:
                  jjAddStates(53, 54);
                  break;
               case 77:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 90:
                  jjAddStates(55, 56);
                  break;
               case 94:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 95:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 102:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(30, 32);
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
               case 69:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(69, 67);
                  break;
               case 73:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 90:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(55, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 114 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   45, 46, 28, 49, 50, 53, 54, 60, 65, 12, 14, 1, 2, 4, 41, 22, 
   42, 1, 2, 6, 4, 24, 25, 28, 45, 46, 28, 55, 56, 28, 61, 62, 
   64, 67, 68, 70, 88, 113, 3, 5, 7, 10, 15, 16, 18, 26, 27, 47, 
   48, 51, 52, 57, 58, 73, 75, 90, 93, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\151\156\143\154\165\144\145", 
"\144\145\146\151\156\145", "\151\146\144\145\146", "\151\146\156\144\145\146", "\145\156\144\151\146", 
"\145\154\151\146", "\145\154\163\151\146", "\154\151\156\145", "\165\156\144\145\146", 
"\160\162\141\147\155\141", "\145\162\162\157\162", "\164\171\160\145\144\145\146", "\145\156\165\155", 
"\145\170\164\145\162\156", "\165\156\163\151\147\156\145\144", "\143\157\156\163\164", 
"\163\164\141\164\151\143", "\163\164\162\165\143\164", "\151\156\154\151\156\145", 
"\137\137\151\156\154\151\156\145\137\137", "\137\137\151\156\154\151\156\145", "\137\137\162\145\147\142\141\156\153", 
"\137\137\124\111\120\117\106\125\116\103\137\137", "\151\146", "\145\154\163\145", "\146\157\162", "\167\150\151\154\145", 
"\144\157", "\163\167\151\164\143\150", "\143\141\163\145", 
"\144\145\146\141\165\154\164", "\73", "\72", "\54", "\74", "\76", "\50", "\51", "\173", "\175", "\52", "\75", 
"\43", "\174", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffffc0201L, 0x2L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1feL, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[114];
private final int[] jjstateSet = new int[228];
protected char curChar;
public CApproxParserTokenManager(CharStream stream){
   input_stream = stream;
}
public CApproxParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 114; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 65)
   {
      jjmatchedKind = 65;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
